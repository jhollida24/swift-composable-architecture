{"metadata":{"category":"The Composable Architecture","title":"Adding side effects","categoryPathComponent":"MeetComposableArchitecture","role":"project"},"sections":[{"kind":"hero","chapter":"Essentials","estimatedTimeInMinutes":30,"title":"Adding side effects","content":[{"inlineContent":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"text":"back into your feature.","type":"text"}],"type":"paragraph"}]},{"kind":"tasks","tasks":[{"title":"What is a side effect?","stepsSection":[{"media":null,"code":"01-02-01-code-0001.swift","content":[{"inlineContent":[{"text":"Let’s add a new bit of functionality to the counter feature we built in","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature"},{"type":"text","text":". We will add a button that when tapped makes a network request to"},{"type":"text","text":" "},{"type":"text","text":"fetch a fact about the number that is currently displayed."}],"type":"paragraph"}],"type":"step","caption":[{"inlineContent":[{"type":"text","text":"There are two ways you can approach this. Sometimes people like to work on the reducer"},{"text":" ","type":"text"},{"type":"text","text":"first, and then the view. Others like to start with the view, which is what we will do now."},{"type":"text","text":" "},{"type":"text","text":"We have added an additional button to the bottom of "},{"type":"codeVoice","code":"CounterView"},{"type":"text","text":", and when it is tapped we"},{"text":" ","type":"text"},{"type":"text","text":"will send a "},{"type":"codeVoice","code":"factButtonTapped"},{"type":"text","text":" action, which does not yet exist in the counter domain, but"},{"text":" ","type":"text"},{"type":"text","text":"will soon."}],"type":"paragraph"}],"runtimePreview":"02-01-image-0001.png"},{"type":"step","caption":[],"code":"01-02-01-code-0002.swift","runtimePreview":null,"media":null,"content":[{"inlineContent":[{"text":"We will also add a progress view at the bottom to display while we are loading the fact,","type":"text"},{"text":" ","type":"text"},{"text":"and we will unwrap a bit of optional state to display the fact. We are using the","type":"text"},{"text":" ","type":"text"},{"code":"isLoading","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"fact","type":"codeVoice"},{"type":"text","text":" state to accomplish this, neither of which exists in the counter"},{"text":" ","type":"text"},{"type":"text","text":"feature yet, but will soon."}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That is all it takes for the view. The code is not yet compiling because we are using state"},{"type":"text","text":" "},{"type":"text","text":"and actions that don’t yet exist, so let’s fix those errors in the reducer."}]},{"runtimePreview":null,"caption":[],"content":[{"inlineContent":[{"text":"Recall that this is what our ","type":"text"},{"code":"CounterFeature","type":"codeVoice"},{"text":" reducer looks like so far, as built in","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","type":"reference","isActive":true},{"type":"text","text":". It has a simple "},{"type":"codeVoice","code":"State"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Action"},{"text":" type, and the reducer","type":"text"},{"type":"text","text":" "},{"text":"simply decrements or increments the ","type":"text"},{"type":"codeVoice","code":"count"},{"type":"text","text":" state depending on which action is sent."}],"type":"paragraph"}],"code":"01-02-01-code-0003.swift","type":"step","media":null},{"media":null,"code":"01-02-01-code-0004.swift","caption":[],"type":"step","content":[{"inlineContent":[{"text":"Let’s add the additional state and actions that have been dictated to us by the view.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"We know we need some "},{"type":"codeVoice","code":"fact"},{"type":"text","text":" and "},{"code":"isLoading","type":"codeVoice"},{"type":"text","text":" state, and we need a "},{"type":"codeVoice","code":"factButtonTapped"},{"text":" action.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"We can also implement that action in the reducer by flipping "},{"type":"codeVoice","code":"isLoading"},{"text":" to ","type":"text"},{"type":"codeVoice","code":"true"},{"type":"text","text":", and"},{"type":"text","text":" "},{"type":"text","text":"we’ll clear the "},{"type":"codeVoice","code":"fact"},{"type":"text","text":" state when any button is tapped. And finally, we will return "},{"code":".none","type":"codeVoice"},{"type":"text","text":""},{"text":" ","type":"text"},{"type":"text","text":"just like we did in all the other cases."}],"type":"paragraph"}],"runtimePreview":null},{"media":null,"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Now the question is: how can we perform a side-effect? We will be using"},{"text":" ","type":"text"},{"identifier":"http:\/\/www.numbersapi.com","isActive":true,"type":"reference"},{"type":"text","text":" to fetch a fact for the state’s current count. We might"},{"type":"text","text":" "},{"type":"text","text":"hope we can just use "},{"type":"codeVoice","code":"URLSession"},{"type":"text","text":" directly in the reducer to perform some async work, but"},{"type":"text","text":" "},{"type":"text","text":"unfortunately that is not allowed."}],"type":"paragraph"}],"caption":[],"type":"step","code":"01-02-01-code-0005.swift"},{"type":"paragraph","inlineContent":[{"text":"The Composable Architecture separates the simple, pure transformations of state from the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"complex, messy side effects. It is one of the core tenets of the library and there are a lot"},{"type":"text","text":" "},{"text":"of benefits to doing so. Luckily for us, the library gives us a tool that is appropriate","type":"text"},{"text":" ","type":"text"},{"text":"for executing side effects. It is called ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","type":"reference","isActive":true},{"type":"text","text":" and it is"},{"text":" ","type":"text"},{"type":"text","text":"explored in the next section."}]}],"anchor":"What-is-a-side-effect","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"inlineContent":[{"type":"text","text":"Side effects are by far the most important aspect of feature development. They are what allow"},{"type":"text","text":" "},{"type":"text","text":"us to communicate with the outside world, such as making API requests, interacting with file"},{"type":"text","text":" "},{"text":"systems, and performing time-based asynchrony. Without them, our applications could not do","type":"text"},{"type":"text","text":" "},{"text":"anything of real value for our users.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"However, side effects are also the most complex part of our features. State mutations are","type":"text"},{"text":" ","type":"text"},{"text":"simple processes. If you run the reducer with the same piece of state and same action, you will","type":"text"},{"text":" ","type":"text"},{"text":"always get the same result. But effects are susceptible to the vagaries of the outside world,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"such as network connectivity, disk permissions, and more. Each time you run an effect, you"},{"type":"text","text":" "},{"text":"can get back a completely different answer.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Let’s start by seeing why we can’t simply perform effectful work directly in our"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" conformances, and then we will see what tools the"},{"type":"text","text":" "},{"text":"library provides for performing effects.","type":"text"}]}]}]},{"title":"Performing a network request","stepsSection":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The primary way one constructs an "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"type":"text","text":" is via the static method"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)"},{"type":"text","text":". This provides"},{"type":"text","text":" "},{"text":"you with an asynchronous context to perform any kind of work you want, as well as a handle","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"("},{"code":"send","type":"codeVoice"},{"type":"text","text":") for sending actions back into the system."}]}],"caption":[],"media":null,"type":"step","code":"01-02-02-code-0001.swift","runtimePreview":null},{"code":"01-02-02-code-0002.swift","runtimePreview":null,"content":[{"inlineContent":[{"text":"The trailing closure of ","type":"text"},{"type":"codeVoice","code":".run"},{"type":"text","text":" is the perfect place to perform our network request to fetch"},{"text":" ","type":"text"},{"text":"data from ","type":"text"},{"isActive":true,"identifier":"http:\/\/www.numbersapi.com","type":"reference"},{"text":" and turn it into a string.","type":"text"}],"type":"paragraph"}],"media":null,"type":"step","caption":[{"type":"aside","name":"Tip","style":"tip","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Unfortunately "},{"identifier":"http:\/\/www.numbersapi.com","type":"reference","isActive":true},{"text":" does not offer HTTPS, so you will need","type":"text"},{"type":"text","text":" "},{"text":"to add an entry to your application’s Info.plist in order to allow HTTP requests. See","type":"text"},{"type":"text","text":" "},{"identifier":"https:\/\/developer.apple.com\/documentation\/bundleresources\/information_property_list\/nsapptransportsecurity","type":"reference","isActive":true},{"text":" article for information on how to do that.","type":"text"}]}]}]},{"runtimePreview":null,"code":"01-02-02-code-0003.swift","caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"However, it is not possible to then mutate the "},{"code":"state.fact","type":"codeVoice"},{"type":"text","text":" in the effect after fetching"},{"type":"text","text":" "},{"type":"text","text":"the data from the network. This is strictly enforced by the compiler since sendable closures"},{"text":" ","type":"text"},{"type":"text","text":"cannot capture "},{"code":"inout","type":"codeVoice"},{"type":"text","text":" state. This is showing how the library chooses to separate the nice,"},{"type":"text","text":" "},{"type":"text","text":"simple and pure state mutations that reducers perform from the messy, complex effects."}]}],"type":"step"},{"runtimePreview":null,"type":"step","caption":[{"style":"warning","content":[{"type":"paragraph","inlineContent":[{"text":"Currently we are ignoring any errors that can be thrown by ","type":"text"},{"code":"URLSession","type":"codeVoice"},{"type":"text","text":". In a"},{"text":" ","type":"text"},{"text":"more complete application you would want to leverage ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","isActive":true,"type":"reference"},{"type":"text","text":" "},{"text":"to have errors fed back into the reducer so that you can react appropriately.","type":"text"}]}],"type":"aside","name":"Warning"}],"code":"01-02-02-code-0004.swift","content":[{"type":"paragraph","inlineContent":[{"text":"In order for us to feed the information from the effect back into our reducer we need to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"introduce another action, called "},{"type":"codeVoice","code":"factResponse"},{"type":"text","text":", and it will have an associated value of the"},{"type":"text","text":" "},{"text":"string that is fetched from the network. Then we can send that action in the effect after","type":"text"},{"type":"text","text":" "},{"type":"text","text":"performing the asynchronous work, and we can handle the new action by flipping "},{"code":"isLoading","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"back to "},{"code":"false","type":"codeVoice"},{"text":" and updating the ","type":"text"},{"type":"codeVoice","code":"fact"},{"text":" state.","type":"text"}]}],"media":null},{"type":"step","caption":[],"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We can now run the application in the simulator or in a preview and see that the feature"},{"type":"text","text":" "},{"text":"works as we expect. We can count up to a number, tap the “Fact” button, and a moment","type":"text"},{"type":"text","text":" "},{"text":"later a fact will be displayed at the bottom of the UI.","type":"text"}]}],"code":"01-02-02-code-0005.swift","runtimePreview":"02-02-video-0005.mov"}],"anchor":"Performing-a-network-request","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that we understand what a side-effect is and why they cannot be performed directly in"},{"type":"text","text":" "},{"type":"text","text":"a reducer, let’s see how to fix the code we wrote above."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Composable Architecture bakes the notion of “effect” directly into the definition of"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":". After a reducer processes an action by mutating"},{"text":" ","type":"text"},{"type":"text","text":"state, it can return something called an "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","isActive":true},{"text":", which","type":"text"},{"text":" ","type":"text"},{"text":"represents an asynchronous unit that is run by the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"type":"text","text":". Effects"},{"text":" ","type":"text"},{"text":"are what can communicate with outside systems and then feed data from the outside back into","type":"text"},{"text":" ","type":"text"},{"text":"the reducer.","type":"text"}]},{"inlineContent":[{"text":"This is exactly what we want to do for our number fact effect. We want to make a network","type":"text"},{"type":"text","text":" "},{"type":"text","text":"request, and then feed that information back into the reducer. So, let’s get started."}],"type":"paragraph"}]}]},{"title":"Managing a timer","anchor":"Managing-a-timer","stepsSection":[{"caption":[{"name":"Note","style":"note","content":[{"inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"isTimerRunning"},{"type":"text","text":" state and "},{"code":"toggleTimerButtonTapped","type":"codeVoice"},{"type":"text","text":" actions do not yet exist."},{"type":"text","text":" "},{"type":"text","text":"We will add them in the next step."}],"type":"paragraph"}],"type":"aside"}],"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We will start with the view layer, just as we did before. We will add a button that either"},{"type":"text","text":" "},{"text":"displays “Start timer” or “Stop timer”, depending on some ","type":"text"},{"type":"codeVoice","code":"isTimerRunning"},{"type":"text","text":" state, and"},{"type":"text","text":" "},{"type":"text","text":"when tapped we will send a "},{"type":"codeVoice","code":"toggleTimerButtonTapped"},{"text":" action. That’s all it takes for the","type":"text"},{"text":" ","type":"text"},{"text":"view.","type":"text"}]}],"code":"01-02-03-code-0001.swift","runtimePreview":null,"type":"step"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Next we will update the reducer by adding the "},{"type":"codeVoice","code":"isTimerRunning"},{"text":" state, a new","type":"text"},{"type":"text","text":" "},{"code":"toggleTimerButtonTapped","type":"codeVoice"},{"text":" action, and stubbing in the basics of the logic for the new","type":"text"},{"type":"text","text":" "},{"type":"text","text":"action. We know we will want to execute some asynchronous work, in particular a timer, so"},{"type":"text","text":" "},{"text":"we have gone ahead and opened up a ","type":"text"},{"type":"codeVoice","code":"run"},{"type":"text","text":" effect."}]}],"caption":[],"type":"step","code":"01-02-03-code-0002.swift","runtimePreview":null,"media":null},{"runtimePreview":null,"type":"step","caption":[],"code":"01-02-03-code-0003.swift","media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Inside the ","type":"text"},{"type":"codeVoice","code":"run"},{"type":"text","text":" effect we can emulate a very crude timer by starting an infinite "},{"type":"codeVoice","code":"while"},{"type":"text","text":" "},{"text":"loop and sleeping for one second inside the loop. This is not the best way to construct a","type":"text"},{"type":"text","text":" "},{"text":"timer as it allows for drift to occur, but it will be fine for our purposes right now.","type":"text"}]}]},{"runtimePreview":null,"content":[{"inlineContent":[{"text":"In order to react to each timer tick in the reducer we need to introduce a new action,","type":"text"},{"type":"text","text":" "},{"code":"timerTick","type":"codeVoice"},{"text":", that will be sent after each ","type":"text"},{"type":"codeVoice","code":"Task.sleep"},{"type":"text","text":". And it’s in that action we will"},{"type":"text","text":" "},{"type":"text","text":"increment the state’s "},{"type":"codeVoice","code":"count"},{"text":".","type":"text"}],"type":"paragraph"}],"type":"step","media":null,"code":"01-02-03-code-0004.swift","caption":[]},{"type":"paragraph","inlineContent":[{"text":"However, there is a bug. If we tap the “Start timer” button to start the timer, and then tap","type":"text"},{"type":"text","text":" "},{"type":"text","text":"“Stop timer”, we will see that the timer did not stop."}]},{"content":[{"inlineContent":[{"text":"To fix the bug, we can leverage a powerful feature of the Composable Architecture known as","type":"text"},{"type":"text","text":" "},{"type":"text","text":"“effect cancellation”. We can mark any effect as cancellable using the"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/cancellable(id:cancelInFlight:)","isActive":true},{"type":"text","text":" method by providing"},{"type":"text","text":" "},{"type":"text","text":"an ID, and then at a later time we can cancel that effect using"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/cancel(id:)","type":"reference","isActive":true},{"type":"text","text":"."}],"type":"paragraph"}],"code":"01-02-03-code-0005.swift","runtimePreview":null,"media":null,"type":"step","caption":[]},{"code":"01-02-03-code-0006.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now the feature works as we expect. We can start the timer, wait a few seconds to see it"},{"type":"text","text":" "},{"text":"count up, and then we can stop the timer. This shows how to manage a long-living effect,","type":"text"},{"type":"text","text":" "},{"text":"including how to cancel effects.","type":"text"}]}],"caption":[],"media":null,"type":"step","runtimePreview":"03-03-video-0006.mp4"}],"contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"text":"Network requests are probably one of the most common types of side effects, but they are not","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the only kind. Let’s add a new bit of functionality to our counter feature. We will add"},{"text":" ","type":"text"},{"type":"text","text":"another button that when tapped starts a one second repeating timer, and for each tick we will"},{"type":"text","text":" "},{"type":"text","text":"increment the state’s "},{"type":"codeVoice","code":"count"},{"type":"text","text":" by one."}]}]}]}]},{"title":"Testing your feature","featuredEyebrow":"Tutorial","action":{"isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","overridingTitle":"Get started"},"kind":"callToAction","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"kind":"project","hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials"]],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","modules":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","kind":"task"}]},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores","kind":"task"}]}]},{"projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","kind":"task"}]},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations"},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation"},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation"}]},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/composablearchitecture\/01-02-addingsideeffects"]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects"},"references":{"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Project-set-up":{"kind":"section","title":"Project set up","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Project-set-up","role":"pseudoSymbol","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}]},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Navigation":{"abstract":[],"kind":"article","role":"article","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","url":"\/tutorials\/meetcomposablearchitecture\/navigation","title":"Navigation","type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-views":{"url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-views","type":"section","title":"Integrate views","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","role":"pseudoSymbol","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"text":" ","type":"text"},{"text":"state.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Create-a-reducer":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Create-a-reducer","abstract":[{"text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"kind":"section","title":"Create a reducer","role":"pseudoSymbol"},"01-02-02-code-0005.swift":{"fileType":"swift","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    var count = 0","    var fact: String?","    var isLoading = false","  }","  ","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case factResponse(String)","    case incrementButtonTapped","  }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        state.fact = nil","        return .none","        ","      case .factButtonTapped:","        state.fact = nil","        state.isLoading = true","        return .run { [count = state.count] send in","          let (data, _) = try await URLSession.shared","            .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","          let fact = String(decoding: data, as: UTF8.self)","          await send(.factResponse(fact))","        }","        ","      case let .factResponse(fact):","        state.fact = fact","        state.isLoading = false","        return .none","        ","      case .incrementButtonTapped:","        state.count += 1","        state.fact = nil","        return .none","      }","    }","  }","}"],"identifier":"01-02-02-code-0005.swift","type":"file","fileName":"CounterFeature.swift","syntax":"swift","highlights":[]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-effects":{"abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-effects","title":"Testing effects","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Improve-domain-modeling":{"url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Improve-domain-modeling","type":"section","title":"Improve domain modeling","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","role":"pseudoSymbol","abstract":[{"text":"In the previous section you learned how to model your domains so that a parent feature can","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"text":" ","type":"text"},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"text":"many","type":"text"}]},{"text":" features.","type":"text"}]},"01-02-02-code-0002.swift":{"identifier":"01-02-02-code-0002.swift","fileType":"swift","fileName":"CounterFeature.swift","syntax":"swift","highlights":[{"line":29},{"line":30},{"line":31},{"line":32}],"type":"file","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    var count = 0","    var fact: String?","    var isLoading = false","  }","  ","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case incrementButtonTapped","  }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        state.fact = nil","        return .none","        ","      case .factButtonTapped:","        state.fact = nil","        state.isLoading = true","        return .run { [count = state.count] send in","          let (data, _) = try await URLSession.shared","            .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","          let fact = String(decoding: data, as: UTF8.self)","        }","        ","      case .incrementButtonTapped:","        state.count += 1","        state.fact = nil","        return .none","      }","    }","  }","}"]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"title":"Effect","navigatorTitle":[{"kind":"identifier","text":"Effect"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","abstract":[],"kind":"symbol","url":"\/documentation\/composablearchitecture\/effect","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Effect"}]},"01-02-03-code-0004.swift":{"fileType":"swift","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    var count = 0","    var fact: String?","    var isLoading = false","    var isTimerRunning = false","  }","  ","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case factResponse(String)","    case incrementButtonTapped","    case timerTick","    case toggleTimerButtonTapped","  }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        state.fact = nil","        return .none","        ","      case .factButtonTapped:","        state.fact = nil","        state.isLoading = true","        return .run { [count = state.count] send in","          let (data, _) = try await URLSession.shared","            .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","          let fact = String(decoding: data, as: UTF8.self)","          await send(.factResponse(fact))","        }","        ","      case let .factResponse(fact):","        state.fact = fact","        state.isLoading = false","        return .none","        ","      case .incrementButtonTapped:","        state.count += 1","        state.fact = nil","        return .none","        ","      case .timerTick:","        state.count += 1","        state.fact = nil","        return .none","        ","      case .toggleTimerButtonTapped:","        state.isTimerRunning.toggle()","        return .run { send in","          while true {","            try await Task.sleep(for: .seconds(1))","            await send(.timerTick)","          }","        }","      }","    }","  }","}"],"identifier":"01-02-03-code-0004.swift","type":"file","fileName":"CounterFeature.swift","syntax":"swift","highlights":[{"line":18},{"line":50},{"line":51},{"line":52},{"line":53},{"line":54},{"line":60}]},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture":{"url":"\/tutorials\/meetcomposablearchitecture","type":"topic","title":"Meet the Composable Architecture","kind":"overview","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","role":"overview","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"consistent and understandable way, with composition, testing, and ergonomics in mind. It can be"},{"text":" ","type":"text"},{"text":"used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult":{"deprecated":true,"url":"\/documentation\/composablearchitecture\/taskresult","type":"topic","abstract":[{"type":"text","text":"A value that represents either a success or a failure. This type differs from Swift’s "},{"code":"Result","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"type in that it uses only one generic for the success case, leaving the failure case as an"},{"type":"text","text":" "},{"type":"text","text":"untyped "},{"type":"codeVoice","code":"Error"},{"type":"text","text":"."}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TaskResult","kind":"identifier"}],"navigatorTitle":[{"text":"TaskResult","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","kind":"symbol","role":"symbol","title":"TaskResult"},"http://www.numbersapi.com":{"type":"link","url":"http:\/\/www.numbersapi.com","title":"numbersapi.com","identifier":"http:\/\/www.numbersapi.com","titleInlineContent":[{"text":"numbersapi.com","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Controlling-dependencies":{"type":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Controlling-dependencies","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"title":"Controlling dependencies"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/cancellable(id:cancelInFlight:)":{"kind":"symbol","abstract":[{"type":"text","text":"Turns an effect into one that is capable of being canceled."}],"type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"cancellable","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"externalParam","text":"id"},{"text":": some ","kind":"text"},{"text":"Hashable","preciseIdentifier":"s:SH","kind":"typeIdentifier"},{"kind":"text","text":" & "},{"kind":"typeIdentifier","preciseIdentifier":"s:s8SendableP","text":"Sendable"},{"text":", ","kind":"text"},{"text":"cancelInFlight","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Bool","preciseIdentifier":"s:Sb"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:22ComposableArchitecture6EffectV","text":"Effect","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">"}],"url":"\/documentation\/composablearchitecture\/effect\/cancellable(id:cancelinflight:)","role":"symbol","title":"cancellable(id:cancelInFlight:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/cancellable(id:cancelInFlight:)"},"01-02-03-code-0003.swift":{"fileType":"swift","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    var count = 0","    var fact: String?","    var isLoading = false","    var isTimerRunning = false","  }","  ","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case factResponse(String)","    case incrementButtonTapped","    case toggleTimerButtonTapped","  }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        state.fact = nil","        return .none","        ","      case .factButtonTapped:","        state.fact = nil","        state.isLoading = true","        return .run { [count = state.count] send in","          let (data, _) = try await URLSession.shared","            .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","          let fact = String(decoding: data, as: UTF8.self)","          await send(.factResponse(fact))","        }","        ","      case let .factResponse(fact):","        state.fact = fact","        state.isLoading = false","        return .none","        ","      case .incrementButtonTapped:","        state.count += 1","        state.fact = nil","        return .none","        ","      case .toggleTimerButtonTapped:","        state.isTimerRunning.toggle()","        return .run { send in","          while true {","            try await Task.sleep(for: .seconds(1))","          }","        }","      }","    }","  }","}"],"identifier":"01-02-03-code-0003.swift","type":"file","fileName":"CounterFeature.swift","syntax":"swift","highlights":[{"line":52},{"line":53},{"line":54}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Composing-reducers":{"type":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Composing-reducers","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers","abstract":[{"text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent","type":"text"},{"type":"text","text":" "},{"type":"text","text":"feature that contains the "},{"code":"CounterFeature","type":"codeVoice"},{"type":"text","text":" we have been building thus far."}],"title":"Composing reducers"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-network-requests":{"abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-network-requests","title":"Testing network requests","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation":{"abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"kind":"project","role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation","title":"Testing presentation","type":"topic","estimatedTime":"40min"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/cancel(id:)":{"kind":"symbol","abstract":[{"text":"An effect that will cancel any currently in-flight effect with the given identifier.","type":"text"}],"type":"topic","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"cancel","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"id"},{"text":": some ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:SH","text":"Hashable"},{"text":" & ","kind":"text"},{"kind":"typeIdentifier","text":"Sendable","preciseIdentifier":"s:s8SendableP"},{"kind":"text","text":") -> "},{"text":"Effect","preciseIdentifier":"s:22ComposableArchitecture6EffectV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":">","kind":"text"}],"url":"\/documentation\/composablearchitecture\/effect\/cancel(id:)","role":"symbol","title":"cancel(id:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/cancel(id:)"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-with-SwiftUI":{"url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-with-SwiftUI","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"text":" ","type":"text"},{"text":"learn how to hook up that feature to a SwiftUI view.","type":"text"}],"title":"Integrating with SwiftUI","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","kind":"section","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Adding-a-tab-view":{"type":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Adding-a-tab-view","title":"Adding a tab view","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"type":"text","text":"feature that contains the "},{"code":"CounterFeature","type":"codeVoice"},{"type":"text","text":" we have been building thus far."}],"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Drill-down-to-contact-detail":{"abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Drill-down-to-contact-detail","title":"Drill-down to contact detail","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures":{"type":"topic","role":"project","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures","title":"Composing features","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"text":"feature that contains the ","type":"text"},{"type":"codeVoice","code":"CounterFeature"},{"text":" we have been building thus far.","type":"text"}],"kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures","estimatedTime":"30min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation":{"abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"kind":"project","role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation","title":"Your first presentation","type":"topic","estimatedTime":"30min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks":{"abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"kind":"project","role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks","title":"Navigation stacks","type":"topic","estimatedTime":"30min"},"01-02-02-code-0001.swift":{"identifier":"01-02-02-code-0001.swift","fileType":"swift","fileName":"CounterFeature.swift","syntax":"swift","highlights":[{"line":29},{"line":30},{"line":31}],"type":"file","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    var count = 0","    var fact: String?","    var isLoading = false","  }","  ","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case incrementButtonTapped","  }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        state.fact = nil","        return .none","        ","      case .factButtonTapped:","        state.fact = nil","        state.isLoading = true","        return .run { send in","          \/\/ ✅ Do async work in here, and send actions back into the system.","        }","        ","      case .incrementButtonTapped:","        state.count += 1","        state.fact = nil","        return .none","      }","    }","  }","}"]},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Essentials":{"abstract":[],"kind":"article","role":"article","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","url":"\/tutorials\/meetcomposablearchitecture\/essentials","title":"Essentials","type":"topic"},"https://developer.apple.com/documentation/bundleresources/information_property_list/nsapptransportsecurity":{"type":"link","url":"https:\/\/developer.apple.com\/documentation\/bundleresources\/information_property_list\/nsapptransportsecurity","title":"this","identifier":"https:\/\/developer.apple.com\/documentation\/bundleresources\/information_property_list\/nsapptransportsecurity","titleInlineContent":[{"type":"text","text":"this"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-into-the-app":{"abstract":[{"text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then","type":"text"},{"text":" ","type":"text"},{"text":"learn how to hook up that feature to a SwiftUI view.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-into-the-app","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","role":"pseudoSymbol","type":"section","title":"Integrating into the app"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-add-contact-flow":{"url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-add-contact-flow","type":"section","title":"Testing the add contact flow","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","role":"pseudoSymbol","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"how multiple features integrate together and communicate with each other."}]},"03-03-video-0006.mp4":{"alt":null,"variants":[{"traits":["1x","light"],"url":"\/videos\/ComposableArchitecture\/03-03-video-0006.mp4"}],"type":"video","poster":null,"identifier":"03-03-video-0006.mp4"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects":{"url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects","type":"topic","estimatedTime":"30min","title":"Adding side effects","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","role":"project","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}]},"01-02-01-code-0002.swift":{"fileType":"swift","content":["struct CounterView: View {","  let store: StoreOf<CounterFeature>","  ","  var body: some View {","    VStack {","      Text(\"\\(store.count)\")","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","      HStack {","        Button(\"-\") {","          store.send(.decrementButtonTapped)","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","        ","        Button(\"+\") {","          store.send(.incrementButtonTapped)","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","      }","      Button(\"Fact\") {","        store.send(.factButtonTapped)","      }","      .font(.largeTitle)","      .padding()","      .background(Color.black.opacity(0.1))","      .cornerRadius(10)","      ","      if store.isLoading {","        ProgressView()","      } else if let fact = store.fact {","        Text(fact)","          .font(.largeTitle)","          .multilineTextAlignment(.center)","          .padding()","      }","    }","  }","}"],"identifier":"01-02-01-code-0002.swift","type":"file","fileName":"CounterFeature.swift","syntax":"swift","highlights":[{"line":35},{"line":36},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41},{"line":42},{"line":43}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#What-is-a-side-effect":{"type":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#What-is-a-side-effect","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}],"title":"What is a side effect?"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature":{"abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"kind":"project","role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature","title":"Testing your feature","type":"topic","estimatedTime":"1hr 0min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Child-to-parent-communication":{"url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Child-to-parent-communication","type":"section","title":"Child-to-parent communication","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","role":"pseudoSymbol","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"type":"text","text":" "},{"text":"state.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-state-changes":{"abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-state-changes","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","role":"pseudoSymbol","type":"section","title":"Testing state changes"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Managing-a-timer":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Managing-a-timer","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"back into your feature."}],"kind":"section","title":"Managing a timer","role":"pseudoSymbol"},"01-02-01-code-0005.swift":{"identifier":"01-02-01-code-0005.swift","fileType":"swift","fileName":"CounterFeature.swift","syntax":"swift","highlights":[{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35},{"line":36},{"line":37}],"type":"file","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    var count = 0","    var fact: String?","    var isLoading = false","  }","  ","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case incrementButtonTapped","  }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        state.fact = nil","        return .none","        ","      case .factButtonTapped:","        state.fact = nil","        state.isLoading = true","        ","        let (data, _) = try await URLSession.shared","          .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(state.count)\")!)","        \/\/ 🛑 'async' call in a function that does not support concurrency","        \/\/ 🛑 Errors thrown from here are not handled","        ","        state.fact = String(decoding: data, as: UTF8.self)","        state.isLoading = false","        ","        return .none","        ","      case .incrementButtonTapped:","        state.count += 1","        state.fact = nil","        return .none","      }","    }","  }","}"]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"type":"topic","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"text":"s should be executed later by the store, if any.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"url":"\/documentation\/composablearchitecture\/reducer","title":"Reducer","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Reducer","kind":"identifier"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Contact-detail-feature":{"abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Contact-detail-feature","title":"Contact detail feature","type":"section"},"01-02-01-code-0003.swift":{"fileType":"swift","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    var count = 0","  }","  ","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        return .none","        ","      case .incrementButtonTapped:","        state.count += 1","        return .none","      }","    }","  }","}"],"identifier":"01-02-01-code-0003.swift","type":"file","fileName":"CounterFeature.swift","syntax":"swift","highlights":[]},"01-02-03-code-0002.swift":{"type":"file","identifier":"01-02-03-code-0002.swift","fileType":"swift","fileName":"CounterFeature.swift","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    var count = 0","    var fact: String?","    var isLoading = false","    var isTimerRunning = false","  }","  ","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case factResponse(String)","    case incrementButtonTapped","    case toggleTimerButtonTapped","  }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        state.fact = nil","        return .none","        ","      case .factButtonTapped:","        state.fact = nil","        state.isLoading = true","        return .run { [count = state.count] send in","          let (data, _) = try await URLSession.shared","            .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","          let fact = String(decoding: data, as: UTF8.self)","          await send(.factResponse(fact))","        }","        ","      case let .factResponse(fact):","        state.fact = fact","        state.isLoading = false","        return .none","        ","      case .incrementButtonTapped:","        state.count += 1","        state.fact = nil","        return .none","        ","      case .toggleTimerButtonTapped:","        state.isTimerRunning.toggle()","        return .run { send in","        }","      }","    }","  }","}"],"highlights":[{"line":10},{"line":18},{"line":48},{"line":49},{"line":50},{"line":51},{"line":52}],"syntax":"swift"},"01-02-01-code-0004.swift":{"highlights":[{"line":8},{"line":9},{"line":14},{"line":23},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":33}],"content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    var count = 0","    var fact: String?","    var isLoading = false","  }","  ","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case incrementButtonTapped","  }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        state.fact = nil","        return .none","        ","      case .factButtonTapped:","        state.fact = nil","        state.isLoading = true","        return .none","        ","      case .incrementButtonTapped:","        state.count += 1","        state.fact = nil","        return .none","      }","    }","  }","}"],"identifier":"01-02-01-code-0004.swift","syntax":"swift","type":"file","fileType":"swift","fileName":"CounterFeature.swift"},"01-02-03-code-0005.swift":{"type":"file","identifier":"01-02-03-code-0005.swift","fileType":"swift","fileName":"CounterFeature.swift","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    var count = 0","    var fact: String?","    var isLoading = false","    var isTimerRunning = false","  }","  ","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case factResponse(String)","    case incrementButtonTapped","    case timerTick","    case toggleTimerButtonTapped","  }","  ","  enum CancelID { case timer }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        state.fact = nil","        return .none","        ","      case .factButtonTapped:","        state.fact = nil","        state.isLoading = true","        return .run { [count = state.count] send in","          let (data, _) = try await URLSession.shared","            .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","          let fact = String(decoding: data, as: UTF8.self)","          await send(.factResponse(fact))","        }","        ","      case let .factResponse(fact):","        state.fact = fact","        state.isLoading = false","        return .none","        ","      case .incrementButtonTapped:","        state.count += 1","        state.fact = nil","        return .none","        ","      case .timerTick:","        state.count += 1","        state.fact = nil","        return .none","        ","      case .toggleTimerButtonTapped:","        state.isTimerRunning.toggle()","        if state.isTimerRunning {","          return .run { send in","            while true {","              try await Task.sleep(for: .seconds(1))","              await send(.timerTick)","            }","          }","          .cancellable(id: CancelID.timer)","        } else {","          return .cancel(id: CancelID.timer)","        }","      }","    }","  }","}"],"highlights":[{"line":22},{"line":23},{"line":59},{"line":60},{"line":61},{"line":62},{"line":63},{"line":64},{"line":66},{"line":67},{"line":68}],"syntax":"swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"url":"\/documentation\/composablearchitecture\/store","title":"Store","navigatorTitle":[{"kind":"identifier","text":"Store"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"kind":"symbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations":{"type":"topic","role":"project","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations","kind":"project","abstract":[{"text":"In the previous section you learned how to model your domains so that a parent feature can","type":"text"},{"text":" ","type":"text"},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","title":"Multiple presentation destinations","estimatedTime":"30min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Delete-contacts":{"type":"section","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","title":"Delete contacts","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Delete-contacts","abstract":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"text":" ","type":"text"},{"text":"able to present ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"text":" features.","type":"text"}]},"02-01-image-0001.png":{"alt":null,"type":"image","identifier":"02-01-image-0001.png","variants":[{"traits":["1x","light"],"url":"\/images\/ComposableArchitecture\/02-01-image-0001.png"}]},"02-02-video-0005.mov":{"alt":null,"type":"video","identifier":"02-02-video-0005.mov","variants":[{"traits":["1x","light"],"url":"\/videos\/ComposableArchitecture\/02-02-video-0005.mov"}],"poster":null},"01-02-03-code-0001.swift":{"highlights":[{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34},{"line":35}],"content":["struct CounterView: View {","  let store: StoreOf<CounterFeature>","  ","  var body: some View {","    VStack {","      Text(\"\\(store.count)\")","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","      HStack {","        Button(\"-\") {","          store.send(.decrementButtonTapped)","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","        ","        Button(\"+\") {","          store.send(.incrementButtonTapped)","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","      }","      Button(store.isTimerRunning ? \"Stop timer\" : \"Start timer\") {","        store.send(.toggleTimerButtonTapped)","      }","      .font(.largeTitle)","      .padding()","      .background(Color.black.opacity(0.1))","      .cornerRadius(10)","      ","      Button(\"Fact\") {","        store.send(.factButtonTapped)","      }","      .font(.largeTitle)","      .padding()","      .background(Color.black.opacity(0.1))","      .cornerRadius(10)","      ","      if store.isLoading {","        ProgressView()","      } else if let fact = store.fact {","        Text(fact)","          .font(.largeTitle)","          .multilineTextAlignment(.center)","          .padding()","      }","    }","  }","}"],"identifier":"01-02-03-code-0001.swift","syntax":"swift","type":"file","fileType":"swift","fileName":"CounterFeature.swift"},"01-02-03-code-0006.swift":{"type":"file","identifier":"01-02-03-code-0006.swift","fileType":"swift","fileName":"CounterFeature.swift","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    var count = 0","    var fact: String?","    var isLoading = false","    var isTimerRunning = false","  }","  ","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case factResponse(String)","    case incrementButtonTapped","    case timerTick","    case toggleTimerButtonTapped","  }","  ","  enum CancelID { case timer }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        state.fact = nil","        return .none","        ","      case .factButtonTapped:","        state.fact = nil","        state.isLoading = true","        return .run { [count = state.count] send in","          let (data, _) = try await URLSession.shared","            .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","          let fact = String(decoding: data, as: UTF8.self)","          await send(.factResponse(fact))","        }","        ","      case let .factResponse(fact):","        state.fact = fact","        state.isLoading = false","        return .none","        ","      case .incrementButtonTapped:","        state.count += 1","        state.fact = nil","        return .none","        ","      case .timerTick:","        state.count += 1","        state.fact = nil","        return .none","        ","      case .toggleTimerButtonTapped:","        state.isTimerRunning.toggle()","        if state.isTimerRunning {","          return .run { send in","            while true {","              try await Task.sleep(for: .seconds(1))","              await send(.timerTick)","            }","          }","          .cancellable(id: CancelID.timer)","        } else {","          return .cancel(id: CancelID.timer)","        }","      }","    }","  }","}"],"highlights":[],"syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Non-exhaustive-testing":{"abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Non-exhaustive-testing","title":"Non-exhaustive testing","type":"section"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:fileID:filePath:line:column:)":{"kind":"symbol","title":"run(priority:operation:catch:fileID:filePath:line:column:)","type":"topic","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"run","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"priority"},{"kind":"text","text":": "},{"text":"TaskPriority","kind":"typeIdentifier","preciseIdentifier":"s:ScP"},{"kind":"text","text":"?, "},{"text":"operation","kind":"externalParam"},{"kind":"text","text":": ("},{"preciseIdentifier":"s:22ComposableArchitecture4SendV","text":"Send","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"catch","kind":"externalParam"},{"text":": ((any ","kind":"text"},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture4SendV","kind":"typeIdentifier","text":"Send"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":")?, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":", "},{"text":"filePath","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture6EffectV","text":"Effect","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">"}],"role":"symbol","abstract":[{"type":"text","text":"Wraps an asynchronous unit of work that can emit actions any number of times in an effect."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:fileid:filepath:line:column:)"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-reducers":{"type":"section","role":"pseudoSymbol","title":"Integrate reducers","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-reducers","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"text":" ","type":"text"},{"text":"state.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature":{"abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"kind":"project","role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature","title":"Your first feature","type":"topic","estimatedTime":"20min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-delete-contact-flow":{"type":"section","role":"pseudoSymbol","title":"Testing the delete contact flow","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-delete-contact-flow","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}]},"01-02-01-code-0001.swift":{"syntax":"swift","content":["struct CounterView: View {","  let store: StoreOf<CounterFeature>","  ","  var body: some View {","    VStack {","      Text(\"\\(store.count)\")","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","      HStack {","        Button(\"-\") {","          store.send(.decrementButtonTapped)","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","        ","        Button(\"+\") {","          store.send(.incrementButtonTapped)","        }","        .font(.largeTitle)","        .padding()","        .background(Color.black.opacity(0.1))","        .cornerRadius(10)","      }","      Button(\"Fact\") {","        store.send(.factButtonTapped)","      }","      .font(.largeTitle)","      .padding()","      .background(Color.black.opacity(0.1))","      .cornerRadius(10)","    }","  }","}"],"highlights":[{"line":28},{"line":29},{"line":30},{"line":31},{"line":32},{"line":33},{"line":34}],"type":"file","fileType":"swift","identifier":"01-02-01-code-0001.swift","fileName":"CounterFeature.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Performing-a-network-request":{"abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Performing-a-network-request","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","role":"pseudoSymbol","type":"section","title":"Performing a network request"},"01-02-02-code-0003.swift":{"type":"file","identifier":"01-02-02-code-0003.swift","fileType":"swift","fileName":"CounterFeature.swift","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    var count = 0","    var fact: String?","    var isLoading = false","  }","  ","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case incrementButtonTapped","  }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        state.fact = nil","        return .none","        ","      case .factButtonTapped:","        state.fact = nil","        state.isLoading = true","        return .run { [count = state.count] send in","          let (data, _) = try await URLSession.shared","            .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","          let fact = String(decoding: data, as: UTF8.self)","          state.fact = fact","          \/\/ 🛑 Mutable capture of 'inout' parameter 'state' is not allowed in","          \/\/    concurrently-executing code","        }","        ","      case .incrementButtonTapped:","        state.count += 1","        state.fact = nil","        return .none","      }","    }","  }","}"],"highlights":[{"line":33},{"line":34},{"line":35}],"syntax":"swift"},"01-02-02-code-0004.swift":{"syntax":"swift","content":["import ComposableArchitecture","","@Reducer","struct CounterFeature {","  @ObservableState","  struct State {","    var count = 0","    var fact: String?","    var isLoading = false","  }","  ","  enum Action {","    case decrementButtonTapped","    case factButtonTapped","    case factResponse(String)","    case incrementButtonTapped","  }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        state.fact = nil","        return .none","        ","      case .factButtonTapped:","        state.fact = nil","        state.isLoading = true","        return .run { [count = state.count] send in","          let (data, _) = try await URLSession.shared","            .data(from: URL(string: \"http:\/\/numbersapi.com\/\\(count)\")!)","          let fact = String(decoding: data, as: UTF8.self)","          await send(.factResponse(fact))","        }","        ","      case let .factResponse(fact):","        state.fact = fact","        state.isLoading = false","        return .none","        ","      case .incrementButtonTapped:","        state.count += 1","        state.fact = nil","        return .none","      }","    }","  }","}"],"highlights":[{"line":15},{"line":34},{"line":37},{"line":38},{"line":39},{"line":40},{"line":41}],"type":"file","fileType":"swift","identifier":"01-02-02-code-0004.swift","fileName":"CounterFeature.swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Deleting-a-contact":{"abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Deleting-a-contact","title":"Deleting a contact","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Deriving-child-stores":{"abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"type":"text","text":"feature that contains the "},{"type":"codeVoice","code":"CounterFeature"},{"text":" we have been building thus far.","type":"text"}],"kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Deriving-child-stores","title":"Deriving child stores","type":"section"}}}