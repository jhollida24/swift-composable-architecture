{"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"category":"The Composable Architecture","categoryPathComponent":"MeetComposableArchitecture","role":"project","title":"Composing features"},"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials"]],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","modules":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","kind":"task"}]},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature"},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures"}]},{"projects":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","kind":"task"}]},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","kind":"task"}]}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation"}]},"sections":[{"content":[{"inlineContent":[{"text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent","type":"text"},{"type":"text","text":" "},{"text":"feature that contains the ","type":"text"},{"code":"CounterFeature","type":"codeVoice"},{"type":"text","text":" we have been building thus far."}],"type":"paragraph"}],"title":"Composing features","kind":"hero","chapter":"Essentials","estimatedTimeInMinutes":30},{"kind":"tasks","tasks":[{"stepsSection":[{"inlineContent":[{"type":"text","text":"Let’s approach this in a naive way first by trying to create a root level view that uses"},{"text":" ","type":"text"},{"text":"a ","type":"text"},{"code":"TabView","type":"codeVoice"},{"text":". To keep things simple we will just have two tabs, and each will contain their","type":"text"},{"type":"text","text":" "},{"type":"text","text":"own isolated "},{"type":"codeVoice","code":"CounterView"},{"type":"text","text":", which was built previously in the tutorial."}],"type":"paragraph"},{"code":"01-04-01-code-0001.swift","type":"step","caption":[],"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new file called AppFeature.swift with some basic scaffolding in place already"},{"text":" ","type":"text"},{"type":"text","text":"for a tab-based view."}]}],"media":null},{"content":[{"inlineContent":[{"type":"text","text":"In the tab view we want to create two "},{"type":"codeVoice","code":"CounterView"},{"type":"text","text":"s, one for each tab, but in order to do"},{"text":" ","type":"text"},{"type":"text","text":"so we need to supply two stores."}],"type":"paragraph"}],"media":null,"runtimePreview":null,"type":"step","code":"01-04-01-code-0002.swift","caption":[]},{"inlineContent":[{"text":"Where do we get these stores from? Previously when building the ","type":"text"},{"code":"CounterView","type":"codeVoice"},{"text":" the store was","type":"text"},{"text":" ","type":"text"},{"text":"defined as a simple ","type":"text"},{"type":"codeVoice","code":"let"},{"text":" property and then whoever constructed the ","type":"text"},{"code":"CounterView","type":"codeVoice"},{"text":" (e.g.","type":"text"},{"text":" ","type":"text"},{"text":"the SwiftUI preview and app entry point) was responsibile for constructing the store and","type":"text"},{"text":" ","type":"text"},{"text":"passing it along.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"We could try that same strategy here.","type":"text"}],"type":"paragraph"},{"media":null,"caption":[],"code":"01-04-01-code-0003.swift","type":"step","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Add two new variables to "},{"code":"AppView","type":"codeVoice"},{"type":"text","text":" that hold stores to be provided to each "},{"type":"codeVoice","code":"CounterView"},{"text":".","type":"text"}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, this is not ideal. We now have two completely isolated stores that are not capable"},{"text":" ","type":"text"},{"type":"text","text":"of communicating with each other. In the future there may be events that happen in one"},{"type":"text","text":" "},{"text":"tab that can affect the other tab.","type":"text"}]},{"inlineContent":[{"text":"This is why in the Composable Architecture we prefer to compose features together and have","type":"text"},{"text":" ","type":"text"},{"text":"our views powered by a single ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":", rather than have multiple"},{"type":"text","text":" "},{"type":"text","text":"isolated stores. This makes it extremely easy for features to communicate with each other,"},{"type":"text","text":" "},{"text":"and we can even write tests that the communication is working properly.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"So, let’s put the view aside for a moment and focus first on composing our features’ reducers"},{"text":" ","type":"text"},{"type":"text","text":"together into a single package, and then we will come back to the view and see how to"},{"type":"text","text":" "},{"type":"text","text":"properly create this tab view."}]}],"anchor":"Adding-a-tab-view","contentSection":[{"mediaPosition":"trailing","kind":"contentAndMedia","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We will explore composing features together by adding a "},{"code":"TabView","type":"codeVoice"},{"text":" feature with two tabs,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"each housing a "},{"type":"codeVoice","code":"CounterFeature"},{"text":". This will give us the opportunity to explore the ","type":"text"},{"code":"Scope","type":"codeVoice"},{"type":"text","text":" "},{"text":"reducer and the ","type":"text"},{"code":"scope","type":"codeVoice"},{"type":"text","text":" operator on stores."}]}]}],"title":"Adding a tab view"},{"stepsSection":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We are going to create a new app-level reducer to power the logic and behavior of the"},{"text":" ","type":"text"},{"code":"AppView","type":"codeVoice"},{"type":"text","text":" we created above. We will also be putting the reducer in the same file as the view,"},{"text":" ","type":"text"},{"type":"text","text":"just as we did for "},{"type":"codeVoice","code":"CounterFeature"},{"text":" and ","type":"text"},{"code":"CounterView","type":"codeVoice"},{"type":"text","text":". We personally prefer to do this until"},{"text":" ","type":"text"},{"type":"text","text":"our features get too big, and then we will split the reducer and view into their own files."}]},{"media":null,"caption":[],"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Create a new "},{"code":"AppFeature","type":"codeVoice"},{"type":"text","text":" struct and apply the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" macro."}]}],"code":"01-04-02-code-0001.swift","type":"step"},{"code":"01-04-02-code-0002.swift","caption":[{"name":"Note","type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":"We are proactively conforming "},{"type":"codeVoice","code":"State"},{"type":"text","text":" to "},{"type":"codeVoice","code":"Equatable"},{"text":" in order to be able to write","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"tests on this feature later."}],"type":"paragraph"}]}],"runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a "},{"type":"codeVoice","code":"State"},{"text":" struct and ","type":"text"},{"type":"codeVoice","code":"Action"},{"text":" enum to the reducer. These data types will hold the state","type":"text"},{"type":"text","text":" "},{"type":"text","text":"and actions for each tab, each of which are just the "},{"type":"codeVoice","code":"CounterFeature"},{"text":".","type":"text"}]}],"media":null,"type":"step"},{"runtimePreview":null,"type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Next we need to implement the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-20w8t","isActive":true},{"type":"text","text":" of the reducer."},{"type":"text","text":" "},{"text":"Previously we did this by using the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce","isActive":true},{"text":" type to open a closure","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"and perform any state mutations necessary based on the action passed in."}]}],"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We still want to do that for the core logic of the app feature, but we also want compose in"},{"type":"text","text":" "},{"type":"text","text":"the  "},{"code":"CounterFeature","type":"codeVoice"},{"text":" reducer so that its logic can execute on the ","type":"text"},{"code":"tab1","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"tab2"},{"text":" state","type":"text"},{"type":"text","text":" "},{"text":"without the ","type":"text"},{"code":"AppFeature","type":"codeVoice"},{"text":" having to recreate it.","type":"text"}]}],"media":null,"code":"01-04-02-code-0003.swift"},{"media":null,"runtimePreview":null,"type":"step","code":"01-04-02-code-0004.swift","content":[{"inlineContent":[{"type":"text","text":"To compose the "},{"type":"codeVoice","code":"CounterFeature"},{"type":"text","text":" into the "},{"code":"AppFeature","type":"codeVoice"},{"type":"text","text":" we can use the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope"},{"type":"text","text":" reducer. It allows you to focus in on a sub-domain of the"},{"type":"text","text":" "},{"text":"parent feature, and run a child reducer on that sub-domain. In this case we want to do that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"twice. First we single out the "},{"code":"tab1","type":"codeVoice"},{"type":"text","text":" state and actions in order to run the "},{"code":"CounterFeature","type":"codeVoice"},{"text":" ","type":"text"},{"text":"reducer, and then we do it again for the ","type":"text"},{"type":"codeVoice","code":"tab2"},{"type":"text","text":" state and actions."}],"type":"paragraph"}],"caption":[{"content":[{"inlineContent":[{"text":"The ","type":"text"},{"code":"body","type":"codeVoice"},{"type":"text","text":" computed property is using result builders behind the scenes. It allows"},{"type":"text","text":" "},{"type":"text","text":"us to list any number of reducers in the "},{"type":"codeVoice","code":"body"},{"type":"text","text":" as  long as the types match up. When an"},{"type":"text","text":" "},{"type":"text","text":"action comes into the system each reducer will run on the feature’s state from"},{"type":"text","text":" "},{"text":"top-to-bottom. Result builders is also what SwiftUI uses to compose view hierarchies","type":"text"},{"text":" ","type":"text"},{"text":"in a view ","type":"text"},{"type":"codeVoice","code":"body"},{"text":".","type":"text"}],"type":"paragraph"}],"style":"note","name":"Note","type":"aside"}]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"AppFeature"},{"text":" is now a fully composed feature comprising 3 completely independent features:","type":"text"},{"type":"text","text":" "},{"type":"text","text":"there’s the core app feature logic, the counter feature running in the first tab, and the"},{"type":"text","text":" "},{"type":"text","text":"counter feature running in the second tab."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can even write a test for this integration of features before even getting the view"},{"type":"text","text":" "},{"text":"properly working.","type":"text"}]},{"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Create a new file in your test target called AppFeatureTests.swift and paste in the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"following basic scaffolding."}]}],"code":"01-04-02-code-0005.swift","runtimePreview":null,"caption":[{"type":"paragraph","inlineContent":[{"text":"We are going to start by showing that when the increment button is tapped in the first tab,","type":"text"},{"text":" ","type":"text"},{"text":"the count goes up in the ","type":"text"},{"type":"codeVoice","code":"tab1"},{"type":"text","text":" state."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Create a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true,"type":"reference"},{"text":" that holds onto the ","type":"text"},{"code":"AppFeature","type":"codeVoice"},{"type":"text","text":" domain."},{"text":" ","type":"text"},{"text":"This is done by providing the initial state of the feature and specifying","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the reducer that powers the feature."}]}],"caption":[{"type":"aside","name":"Note","style":"note","content":[{"inlineContent":[{"text":"Remember that the ","type":"text"},{"code":"TestStore","type":"codeVoice"},{"text":" is the testable runtime of a feature that allows you","type":"text"},{"type":"text","text":" "},{"text":"to send actions and assert on how state changes. It also forces you to assert on how effects","type":"text"},{"text":" ","type":"text"},{"text":"emit data back into the system.","type":"text"}],"type":"paragraph"}]}],"media":null,"type":"step","code":"01-04-02-code-0006.swift","runtimePreview":null},{"media":null,"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Send an action into the test store to emulate the user tapping on the increment button"},{"text":" ","type":"text"},{"type":"text","text":"in the first tab."}],"type":"paragraph"}],"caption":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use case key path syntax when sending actions through multiple layers of features."}]}],"name":"Tip","style":"tip","type":"aside"},{"content":[{"inlineContent":[{"text":"The nesting of the action enums of the features gives us a natural way to","type":"text"},{"type":"text","text":" "},{"text":"distinguish between actions in different tabs. Sending ","type":"text"},{"code":"\\.tab1.incrementButtonTapped","type":"codeVoice"},{"type":"text","text":" is"},{"type":"text","text":" "},{"type":"text","text":"very different from sending  "},{"type":"codeVoice","code":"\\.tab2.incrementButtonTapped"},{"type":"text","text":"."}],"type":"paragraph"}],"name":"Note","style":"note","type":"aside"}],"code":"01-04-02-code-0007.swift","type":"step"},{"type":"paragraph","inlineContent":[{"text":"If we were to run this test it would of course fail because we have not asserted on how state","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"changes after sending this action, and by default the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true},{"text":" ","type":"text"},{"text":"requires that you exhaustively assert on everything happening in the feature.","type":"text"}]},{"type":"step","code":"01-04-02-code-0008.swift","content":[{"type":"paragraph","inlineContent":[{"text":"To get the test to pass we have to open up a trailing closure on ","type":"text"},{"type":"codeVoice","code":"store.send"},{"type":"text","text":" and mutate"},{"text":" ","type":"text"},{"type":"text","text":"the previous version of the feature state so that it matches the state after the action"},{"type":"text","text":" "},{"text":"is sent.","type":"text"}]}],"media":null,"runtimePreview":null,"caption":[]},{"type":"paragraph","inlineContent":[{"text":"And now this test passes!","type":"text"}]}],"anchor":"Composing-reducers","title":"Composing reducers","contentSection":[{"mediaPosition":"trailing","content":[{"inlineContent":[{"type":"text","text":"We’ve now seen that by approaching the problem of composing features naively we run into a"},{"text":" ","type":"text"},{"type":"text","text":"weird situation of having multiple isolated stores. We can fix this problem by first composing"},{"text":" ","type":"text"},{"text":"the features together at the reducer level, and then showing how we can have a single store","type":"text"},{"type":"text","text":" "},{"text":"power our tab-based application.","type":"text"}],"type":"paragraph"}],"kind":"contentAndMedia"}]},{"anchor":"Deriving-child-stores","title":"Deriving child stores","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that we have a single composed "},{"type":"codeVoice","code":"AppFeature"},{"type":"text","text":" that encapsulates all of the logic and"},{"type":"text","text":" "},{"type":"text","text":"behavior of the root app and its tabs, we can properly implement the view layer of the"},{"type":"text","text":" "},{"text":"application.","type":"text"}]}]}],"stepsSection":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Rather than holding onto individual stores for each tab in the "},{"type":"codeVoice","code":"AppView"},{"type":"text","text":", we can now hold"},{"text":" ","type":"text"},{"text":"onto a single store of the composed ","type":"text"},{"code":"AppFeature","type":"codeVoice"},{"text":" domain, and derive child stores for each","type":"text"},{"text":" ","type":"text"},{"text":"tab that can be handed to the ","type":"text"},{"code":"CounterView","type":"codeVoice"},{"type":"text","text":"s."}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Replace the two individual store properties with a single store of the ","type":"text"},{"code":"AppFeature","type":"codeVoice"},{"type":"text","text":" domain."}]}],"type":"step","media":null,"code":"01-04-03-code-0001.swift","runtimePreview":null,"caption":[]},{"media":null,"content":[{"inlineContent":[{"type":"text","text":"Use the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","isActive":true},{"type":"text","text":" method on"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"text":" to derive a child store focused in on just the ","type":"text"},{"type":"codeVoice","code":"tab1"},{"text":" ","type":"text"},{"text":"domain. This is done by using key path syntax to single out the field of the state and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the case of the action enum."}],"type":"paragraph"}],"type":"step","caption":[],"runtimePreview":null,"code":"01-04-03-code-0002.swift"},{"caption":[],"type":"step","media":null,"code":"01-04-03-code-0003.swift","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"And do the same for the second tab."}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"That is all it takes. We now have a single "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" powering this"},{"text":" ","type":"text"},{"type":"text","text":"entire view, and the logic and behavior of both tabs have been composed into a single reducer."},{"text":" ","type":"text"},{"type":"text","text":"We can give the feature a spin by creating a preview in AppFeature.swift."}]},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"text":"Create a preview for ","type":"text"},{"type":"codeVoice","code":"AppView"},{"type":"text","text":" by initializing a store with the "},{"code":"AppFeature","type":"codeVoice"},{"type":"text","text":" domain."}]}],"code":"01-04-03-code-0004.swift","media":null,"runtimePreview":null,"type":"step"},{"type":"paragraph","inlineContent":[{"text":"We can also run the feature in the simulator by updating the entry point of the app to be","type":"text"},{"type":"text","text":" "},{"text":"powered by the ","type":"text"},{"type":"codeVoice","code":"AppView"},{"text":".","type":"text"}]},{"caption":[],"media":null,"type":"step","code":"01-04-03-code-0005.swift","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Open App.swift and update the entry point to use "},{"type":"codeVoice","code":"AppView"},{"type":"text","text":" and "},{"type":"codeVoice","code":"AppFeature"},{"text":".","type":"text"}]}],"runtimePreview":null},{"inlineContent":[{"type":"text","text":"That’s the basics of composing features together in the Composable Architecture. In its"},{"type":"text","text":" "},{"text":"simplest form it starts by composing the reducers together in the ","type":"text"},{"code":"body","type":"codeVoice"},{"type":"text","text":" of a parent reducer"},{"text":" ","type":"text"},{"text":"and using the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope"},{"text":" reducer to focus in on a sub-domain of","type":"text"},{"text":" ","type":"text"},{"text":"the parent to run a child reducer. Then in the view you derive child stores from the parent","type":"text"},{"text":" ","type":"text"},{"text":"using the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","isActive":true,"type":"reference"},{"type":"text","text":" and hand those child"},{"type":"text","text":" "},{"text":"stores to the child views.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are more advanced ways of composing features, especially when it comes to navigation."},{"type":"text","text":" "},{"text":"See the article ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation"},{"type":"text","text":" for more information on the navigation tools in the library,"},{"type":"text","text":" "},{"type":"text","text":"as well as the second tutorial in "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture"},{"type":"text","text":"."}]}]}]},{"title":"Your first presentation","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"text":" ","type":"text"},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"text":"state.","type":"text"}],"kind":"callToAction","action":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","overridingTitle":"Get started","overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"isActive":true,"type":"reference"},"featuredEyebrow":"Tutorial"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/composablearchitecture\/01-04-composingfeatures"]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures","interfaceLanguage":"swift"},"kind":"project","references":{"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Performing-a-network-request":{"abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Performing-a-network-request","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","role":"pseudoSymbol","type":"section","title":"Performing a network request"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature":{"abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"kind":"project","role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature","title":"Testing your feature","type":"topic","estimatedTime":"1hr 0min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation":{"abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"text":" ","type":"text"},{"text":"state.","type":"text"}],"kind":"project","role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation","title":"Your first presentation","type":"topic","estimatedTime":"30min"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"title":"TestStore","url":"\/documentation\/composablearchitecture\/teststore","abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TestStore"}],"navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-into-the-app":{"abstract":[{"text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then","type":"text"},{"text":" ","type":"text"},{"text":"learn how to hook up that feature to a SwiftUI view.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-into-the-app","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","role":"pseudoSymbol","type":"section","title":"Integrating into the app"},"01-04-02-code-0003.swift":{"content":["import ComposableArchitecture","","@Reducer","struct AppFeature {","  struct State: Equatable {","    var tab1 = CounterFeature.State()","    var tab2 = CounterFeature.State()","  }","  enum Action {","    case tab1(CounterFeature.Action)","    case tab2(CounterFeature.Action)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      \/\/ Core logic of the app feature","      return .none","    }","  }","}"],"syntax":"swift","identifier":"01-04-02-code-0003.swift","fileName":"AppFeature.swift","fileType":"swift","type":"file","highlights":[{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Child-to-parent-communication":{"url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Child-to-parent-communication","type":"section","title":"Child-to-parent communication","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","role":"pseudoSymbol","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"text":" ","type":"text"},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"type":"text","text":" "},{"text":"state.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reduce":{"url":"\/documentation\/composablearchitecture\/reduce","title":"Reduce","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Reduce","kind":"identifier"}],"abstract":[{"type":"text","text":"A type-erased reducer that invokes the given "},{"code":"reduce","type":"codeVoice"},{"text":" function.","type":"text"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reduce","navigatorTitle":[{"kind":"identifier","text":"Reduce"}],"type":"topic"},"01-04-02-code-0008.swift":{"fileName":"AppFeatureTests.swift","identifier":"01-04-02-code-0008.swift","type":"file","fileType":"swift","highlights":[{"line":14},{"line":15},{"line":16}],"syntax":"swift","content":["import ComposableArchitecture","import Testing","","@testable import CounterApp","","@MainActor","struct AppFeatureTests {","  @Test","  func incrementInFirstTab() async {","    let store = TestStore(initialState: AppFeature.State()) {","      AppFeature()","    }","    ","    await store.send(\\.tab1.incrementButtonTapped) {","      $0.tab1.count = 1","    }","  }","}"]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks":{"abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"kind":"project","role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks","title":"Navigation stacks","type":"topic","estimatedTime":"30min"},"01-04-03-code-0002.swift":{"content":["import ComposableArchitecture","import SwiftUI","","struct AppView: View {","  let store: StoreOf<AppFeature>","  ","  var body: some View {","    TabView {","      CounterView(store: store.scope(state: \\.tab1, action: \\.tab1))","        .tabItem {","          Text(\"Counter 1\")","        }","      ","      CounterView(store: store2)","        .tabItem {","          Text(\"Counter 2\")","        }","    }","  }","}"],"syntax":"swift","identifier":"01-04-03-code-0002.swift","fileName":"AppFeature.swift","fileType":"swift","type":"file","highlights":[{"line":9}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Adding-a-tab-view":{"type":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Adding-a-tab-view","title":"Adding a tab view","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"type":"text","text":"feature that contains the "},{"code":"CounterFeature","type":"codeVoice"},{"type":"text","text":" we have been building thus far."}],"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations":{"type":"topic","role":"project","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations","kind":"project","abstract":[{"text":"In the previous section you learned how to model your domains so that a parent feature can","type":"text"},{"text":" ","type":"text"},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","title":"Multiple presentation destinations","estimatedTime":"30min"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Scope":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Scope"}],"role":"symbol","title":"Scope","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope","url":"\/documentation\/composablearchitecture\/scope","abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain."}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Scope"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"type":"topic","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"text":"s should be executed later by the store, if any.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"url":"\/documentation\/composablearchitecture\/reducer","title":"Reducer","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Reducer","kind":"identifier"}]},"01-04-02-code-0005.swift":{"fileName":"AppFeatureTests.swift","syntax":"swift","content":["import ComposableArchitecture","import Testing","","@testable import CounterApp","","@MainActor","struct AppFeatureTests {","  @Test","  func incrementInFirstTab() async {","","  }","}"],"type":"file","identifier":"01-04-02-code-0005.swift","highlights":[],"fileType":"swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-90255":{"title":"scope(state:action:)","type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-90255","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"scope","kind":"identifier"},{"kind":"text","text":"<"},{"text":"ChildState","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ChildAction"},{"text":">(","kind":"text"},{"text":"state","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC","text":"KeyPath"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"text":">, ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ChildAction"},{"text":">) -> ","kind":"text"},{"text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":", "},{"text":"ChildAction","kind":"typeIdentifier"},{"kind":"text","text":">"}],"abstract":[{"text":"Scopes the store to one that exposes child state and actions.","type":"text"}]},"01-04-03-code-0005.swift":{"content":["import ComposableArchitecture","import SwiftUI","","@main","struct MyApp: App {","  static let store = Store(initialState: AppFeature.State()) {","    AppFeature()","  }","  ","  var body: some Scene {","    WindowGroup {","      AppView(store: MyApp.store)","    }","  }","}"],"fileName":"App.swift","highlights":[{"line":6},{"line":7},{"line":12}],"syntax":"swift","type":"file","identifier":"01-04-03-code-0005.swift","fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Deriving-child-stores":{"abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"type":"text","text":"feature that contains the "},{"type":"codeVoice","code":"CounterFeature"},{"text":" we have been building thus far.","type":"text"}],"kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Deriving-child-stores","title":"Deriving child stores","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-network-requests":{"abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"type":"text","text":"against state changes and how effects execute and feed data back into the system."}],"kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-network-requests","title":"Testing network requests","type":"section"},"01-04-02-code-0001.swift":{"fileName":"AppFeature.swift","syntax":"swift","content":["import ComposableArchitecture","","@Reducer","struct AppFeature {","  ","}"],"type":"file","identifier":"01-04-02-code-0001.swift","highlights":[],"fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects":{"url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects","type":"topic","estimatedTime":"30min","title":"Adding side effects","kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","role":"project","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Project-set-up":{"kind":"section","title":"Project set up","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Project-set-up","role":"pseudoSymbol","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"type":"text","text":" "},{"type":"text","text":"state."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-reducers":{"type":"section","role":"pseudoSymbol","title":"Integrate reducers","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-reducers","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"text":" ","type":"text"},{"text":"state.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-state-changes":{"abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-state-changes","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","role":"pseudoSymbol","type":"section","title":"Testing state changes"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Managing-a-timer":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","type":"section","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Managing-a-timer","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"back into your feature."}],"kind":"section","title":"Managing a timer","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Essentials":{"abstract":[],"kind":"article","role":"article","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","url":"\/tutorials\/meetcomposablearchitecture\/essentials","title":"Essentials","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"url":"\/documentation\/composablearchitecture\/store","title":"Store","navigatorTitle":[{"kind":"identifier","text":"Store"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"kind":"symbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Drill-down-to-contact-detail":{"abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Drill-down-to-contact-detail","title":"Drill-down to contact detail","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures":{"type":"topic","role":"project","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures","title":"Composing features","abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"type":"text","text":" "},{"text":"feature that contains the ","type":"text"},{"type":"codeVoice","code":"CounterFeature"},{"text":" we have been building thus far.","type":"text"}],"kind":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures","estimatedTime":"30min"},"01-04-01-code-0003.swift":{"content":["import ComposableArchitecture","import SwiftUI","","struct AppView: View {","  let store1: StoreOf<CounterFeature>","  let store2: StoreOf<CounterFeature>","  ","  var body: some View {","    TabView {","      CounterView(store: store1)","        .tabItem {","          Text(\"Counter 1\")","        }","      ","      CounterView(store: store2)","        .tabItem {","          Text(\"Counter 2\")","        }","    }","  }","}"],"fileName":"AppFeature.swift","highlights":[{"line":1},{"line":5},{"line":6},{"line":7},{"line":10},{"line":15}],"syntax":"swift","type":"file","identifier":"01-04-01-code-0003.swift","fileType":"swift"},"01-04-02-code-0007.swift":{"fileName":"AppFeatureTests.swift","content":["import ComposableArchitecture","import Testing","","@testable import CounterApp","","@MainActor","struct AppFeatureTests {","  @Test","  func incrementInFirstTab() async {","    let store = TestStore(initialState: AppFeature.State()) {","      AppFeature()","    }","    ","    await store.send(\\.tab1.incrementButtonTapped)","  }","}"],"fileType":"swift","type":"file","highlights":[{"line":13},{"line":14}],"identifier":"01-04-02-code-0007.swift","syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Improve-domain-modeling":{"url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Improve-domain-modeling","type":"section","title":"Improve domain modeling","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","role":"pseudoSymbol","abstract":[{"text":"In the previous section you learned how to model your domains so that a parent feature can","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"text":" ","type":"text"},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"text":"many","type":"text"}]},{"text":" features.","type":"text"}]},"01-04-02-code-0004.swift":{"content":["import ComposableArchitecture","","@Reducer","struct AppFeature {","  struct State: Equatable {","    var tab1 = CounterFeature.State()","    var tab2 = CounterFeature.State()","  }","  enum Action {","    case tab1(CounterFeature.Action)","    case tab2(CounterFeature.Action)","  }","  var body: some ReducerOf<Self> {","    Scope(state: \\.tab1, action: \\.tab1) {","      CounterFeature()","    }","    Scope(state: \\.tab2, action: \\.tab2) {","      CounterFeature()","    }","    Reduce { state, action in","      \/\/ Core logic of the app feature","      return .none","    }","  }","}"],"fileName":"AppFeature.swift","highlights":[{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19}],"syntax":"swift","type":"file","identifier":"01-04-02-code-0004.swift","fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#What-is-a-side-effect":{"type":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#What-is-a-side-effect","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"text":" ","type":"text"},{"text":"back into your feature.","type":"text"}],"title":"What is a side effect?"},"01-04-01-code-0002.swift":{"fileName":"AppFeature.swift","content":["import SwiftUI","","struct AppView: View {","  var body: some View {","    TabView {","      CounterView(store: ???)","        .tabItem {","          Text(\"Counter 1\")","        }","      ","      CounterView(store: ???)","        .tabItem {","          Text(\"Counter 2\")","        }","    }","  }","}"],"fileType":"swift","type":"file","highlights":[{"line":6},{"line":7},{"line":8},{"line":9},{"line":11},{"line":12},{"line":13},{"line":14}],"identifier":"01-04-01-code-0002.swift","syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature":{"abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"type":"text","text":" "},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"kind":"project","role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature","title":"Your first feature","type":"topic","estimatedTime":"20min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Contact-detail-feature":{"abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"text":" ","type":"text"},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Contact-detail-feature","title":"Contact detail feature","type":"section"},"01-04-03-code-0001.swift":{"content":["import ComposableArchitecture","import SwiftUI","","struct AppView: View {","  \/\/ let store1: StoreOf<CounterFeature>","  \/\/ let store2: StoreOf<CounterFeature>","  let store: StoreOf<AppFeature>","  ","  var body: some View {","    TabView {","      CounterView(store: store1)","        .tabItem {","          Text(\"Counter 1\")","        }","      ","      CounterView(store: store2)","        .tabItem {","          Text(\"Counter 2\")","        }","    }","  }","}"],"fileName":"AppFeature.swift","highlights":[{"line":7}],"syntax":"swift","type":"file","identifier":"01-04-03-code-0001.swift","fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation":{"abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"kind":"project","role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation","title":"Testing presentation","type":"topic","estimatedTime":"40min"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Delete-contacts":{"type":"section","role":"pseudoSymbol","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","title":"Delete contacts","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Delete-contacts","abstract":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"text":" ","type":"text"},{"text":"able to present ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"text":" features.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-delete-contact-flow":{"type":"section","role":"pseudoSymbol","title":"Testing the delete contact flow","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-delete-contact-flow","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"type":"text","text":" "},{"type":"text","text":"how multiple features integrate together and communicate with each other."}]},"01-04-03-code-0003.swift":{"fileName":"AppFeature.swift","syntax":"swift","content":["import ComposableArchitecture","import SwiftUI","","struct AppView: View {","  let store: StoreOf<AppFeature>","  ","  var body: some View {","    TabView {","      CounterView(store: store.scope(state: \\.tab1, action: \\.tab1))","        .tabItem {","          Text(\"Counter 1\")","        }","      ","      CounterView(store: store.scope(state: \\.tab2, action: \\.tab2))","        .tabItem {","          Text(\"Counter 2\")","        }","    }","  }","}"],"type":"file","identifier":"01-04-03-code-0003.swift","highlights":[{"line":14}],"fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Deleting-a-contact":{"abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"type":"text","text":" "},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Deleting-a-contact","title":"Deleting a contact","type":"section"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"title":"Reducer()","type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/reducer()","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Reducer"},{"text":"()","kind":"text"}],"abstract":[{"type":"text","text":"Helps implement the conformance to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for a type."}]},"01-04-02-code-0002.swift":{"content":["import ComposableArchitecture","","@Reducer","struct AppFeature {","  struct State: Equatable {","    var tab1 = CounterFeature.State()","    var tab2 = CounterFeature.State()","  }","  enum Action {","    case tab1(CounterFeature.Action)","    case tab2(CounterFeature.Action)","  }","}"],"fileName":"AppFeature.swift","highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10},{"line":11},{"line":12}],"syntax":"swift","type":"file","identifier":"01-04-02-code-0002.swift","fileType":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-views":{"url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-views","type":"section","title":"Integrate views","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","role":"pseudoSymbol","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"text":" ","type":"text"},{"text":"state.","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-add-contact-flow":{"url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-add-contact-flow","type":"section","title":"Testing the add contact flow","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","role":"pseudoSymbol","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"how multiple features integrate together and communicate with each other."}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-effects":{"abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-effects","title":"Testing effects","type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-with-SwiftUI":{"url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-with-SwiftUI","abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"text":" ","type":"text"},{"text":"learn how to hook up that feature to a SwiftUI view.","type":"text"}],"title":"Integrating with SwiftUI","type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","kind":"section","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Composing-reducers":{"type":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Composing-reducers","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers","abstract":[{"text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent","type":"text"},{"type":"text","text":" "},{"type":"text","text":"feature that contains the "},{"code":"CounterFeature","type":"codeVoice"},{"type":"text","text":" we have been building thus far."}],"title":"Composing reducers"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Navigation":{"url":"\/documentation\/composablearchitecture\/navigation","abstract":[{"text":"Learn how to use the navigation tools in the library, including how to best model your domains, how","type":"text"},{"type":"text","text":" "},{"text":"to integrate features in the reducer and view layers, and how to write tests.","type":"text"}],"role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation","title":"Navigation","kind":"article","type":"topic"},"01-04-02-code-0006.swift":{"fileName":"AppFeatureTests.swift","syntax":"swift","content":["import ComposableArchitecture","import Testing","","@testable import CounterApp","","@MainActor","struct AppFeatureTests {","  @Test","  func incrementInFirstTab() async {","    let store = TestStore(initialState: AppFeature.State()) {","      AppFeature()","    }","  }","}"],"type":"file","identifier":"01-04-02-code-0006.swift","highlights":[{"line":10},{"line":11},{"line":12}],"fileType":"swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/body-20w8t":{"abstract":[{"text":"The content and behavior of a reducer that is composed from other reducers.","type":"text"}],"url":"\/documentation\/composablearchitecture\/reducer\/body-20w8t","defaultImplementations":2,"required":true,"kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"body"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","text":"Body","preciseIdentifier":"s:22ComposableArchitecture7ReducerP4BodyQa"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/body-20w8t","role":"symbol","type":"topic","title":"body"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Create-a-reducer":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","type":"section","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Create-a-reducer","abstract":[{"text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"kind":"section","title":"Create a reducer","role":"pseudoSymbol"},"01-04-03-code-0004.swift":{"fileType":"swift","syntax":"swift","type":"file","highlights":[{"line":21},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28}],"fileName":"AppFeature.swift","content":["import ComposableArchitecture","import SwiftUI","","struct AppView: View {","  let store: StoreOf<AppFeature>","  ","  var body: some View {","    TabView {","      CounterView(store: store.scope(state: \\.tab1, action: \\.tab1))","        .tabItem {","          Text(\"Counter 1\")","        }","      ","      CounterView(store: store.scope(state: \\.tab2, action: \\.tab2))","        .tabItem {","          Text(\"Counter 2\")","        }","    }","  }","}","","#Preview {","  AppView(","    store: Store(initialState: AppFeature.State()) {","      AppFeature()","    }","  )","}"],"identifier":"01-04-03-code-0004.swift"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture":{"url":"\/tutorials\/meetcomposablearchitecture","type":"topic","title":"Meet the Composable Architecture","kind":"overview","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","role":"overview","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"consistent and understandable way, with composition, testing, and ergonomics in mind. It can be"},{"text":" ","type":"text"},{"text":"used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Controlling-dependencies":{"type":"section","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Controlling-dependencies","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"title":"Controlling dependencies"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Non-exhaustive-testing":{"abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"kind":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Non-exhaustive-testing","title":"Non-exhaustive testing","type":"section"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Navigation":{"abstract":[],"kind":"article","role":"article","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","url":"\/tutorials\/meetcomposablearchitecture\/navigation","title":"Navigation","type":"topic"},"01-04-01-code-0001.swift":{"syntax":"swift","content":["import SwiftUI","","struct AppView: View {","  var body: some View {","    TabView {","      ","    }","  }","}"],"fileType":"swift","fileName":"AppFeature.swift","identifier":"01-04-01-code-0001.swift","highlights":[],"type":"file"}}}