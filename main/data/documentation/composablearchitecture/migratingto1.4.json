{"schemaVersion":{"patch":0,"minor":3,"major":0},"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5"],"generated":true}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides"]]},"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/migratingto1.4"]}],"metadata":{"title":"Migrating to 1.4","modules":[{"name":"ComposableArchitecture"}],"role":"article","roleHeading":"Article"},"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4","interfaceLanguage":"swift"},"kind":"article","primaryContentSections":[{"kind":"content","content":[{"type":"heading","anchor":"Overview","level":2,"text":"Overview"},{"inlineContent":[{"text":"The Composable Architecture is under constant development, and we are always looking for ways to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"simplify the library, and make it more powerful. As such, we often need to deprecate certain APIs"},{"text":" ","type":"text"},{"text":"in favor of newer ones. We recommend people update their code as quickly as possible to the newest","type":"text"},{"type":"text","text":" "},{"text":"APIs, and this article contains some tips for doing so.","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#Using-the-Reducer-macro","isActive":true}]}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"#Using-case-key-paths"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"#Receiving-test-store-actions"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"identifier":"#Moving-off-of-TaskResult","type":"reference","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"#Identified-actions"}]}]}]},{"anchor":"Using-the-Reducer-macro","type":"heading","level":3,"text":"Using the @Reducer macro"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Version 1.4 of the library has introduced a new macro for automating certain aspects of implementing"},{"type":"text","text":" "},{"type":"text","text":"a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"text":". It is called ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true,"type":"reference"},{"type":"text","text":", and to migrate existing code one only needs to annotate"},{"type":"text","text":" "},{"text":"their type with ","type":"text"},{"type":"codeVoice","code":"@Reducer"},{"text":":","type":"text"}]},{"type":"codeListing","syntax":"diff","code":["+@Reducer"," struct MyFeature: Reducer {","   \/\/ ..."," }"]},{"inlineContent":[{"type":"text","text":"No other changes to be made, and you can immediately start taking advantage of new capabilities of"},{"type":"text","text":" "},{"type":"text","text":"reducer composition, such as case key paths (see guides below). See the documentation of"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true},{"type":"text","text":" to see everything that macro adds to your feature’s reducer."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"You can also technically drop the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true,"type":"reference"},{"type":"text","text":" conformance:"}],"type":"paragraph"},{"type":"codeListing","syntax":"diff","code":[" @Reducer","-struct MyFeature: Reducer {","+struct MyFeature {","   \/\/ ..."," }"]},{"inlineContent":[{"type":"text","text":"However, there are some known issues in Xcode that cause autocomplete and type inference to break."},{"type":"text","text":" "},{"text":"See the documentation of ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer#Gotchas","isActive":true},{"type":"text","text":" for more gotchas on using the "},{"code":"@Reducer","type":"codeVoice"},{"type":"text","text":" macro."}],"type":"paragraph"},{"level":3,"type":"heading","text":"Using case key paths","anchor":"Using-case-key-paths"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In version 1.4 we soft-deprecated many APIs that take the "},{"type":"codeVoice","code":"CasePath"},{"text":" type in favor of APIs that take","type":"text"},{"type":"text","text":" "},{"text":"what is known as a ","type":"text"},{"type":"codeVoice","code":"CaseKeyPath"},{"type":"text","text":". Both of these types come from our "},{"isActive":true,"identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths","type":"reference"},{"type":"text","text":" "},{"text":"library and aim to allow one to abstract over the shape of enums just as key paths allow one to do","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"so with structs."}]},{"type":"paragraph","inlineContent":[{"text":"However, in conjunction with version 1.4 of this library we also released an update to CasePaths","type":"text"},{"type":"text","text":" "},{"type":"text","text":"that massively improved the ergonomics of using case paths. We introduced the "},{"code":"@CasePathable","type":"codeVoice"},{"text":" macro","type":"text"},{"text":" ","type":"text"},{"text":"for automatically deriving case paths so that we could stop using runtime reflection, and we","type":"text"},{"type":"text","text":" "},{"text":"introduced a way of using key paths to describe case paths. And so the old ","type":"text"},{"type":"codeVoice","code":"CasePath"},{"type":"text","text":" type has been"},{"text":" ","type":"text"},{"type":"text","text":"deprecated, and the new "},{"code":"CaseKeyPath","type":"codeVoice"},{"text":" type has taken its place.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This means that previously when you would use APIs involving case paths you would have to use the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"\/"},{"text":" prefix operator to derive the case path. For example:","type":"text"}]},{"syntax":"swift","code":["Reduce { state, action in ","  \/\/ ...","}",".ifLet(\\.child, action: \/Action.child) {","  ChildFeature()","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You now get to shorten that into a far simpler, more familiar key path syntax:"}]},{"type":"codeListing","code":["Reduce { state, action in ","  \/\/ ...","}",".ifLet(\\.child, action: \\.child) {","  ChildFeature()","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"To be able to take advantage of this syntax with your feature’s actions, you must annotate your","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","isActive":true},{"type":"text","text":" conformances with the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true,"type":"reference"},{"type":"text","text":" macro:"}]},{"syntax":"swift","code":["@Reducer","struct Feature {","  \/\/ ...","}"],"type":"codeListing"},{"inlineContent":[{"text":"Which automatically applies the ","type":"text"},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" macro to the feature’s "},{"type":"codeVoice","code":"Action"},{"type":"text","text":" enum among other"},{"type":"text","text":" "},{"type":"text","text":"things:"}],"type":"paragraph"},{"type":"codeListing","code":["+@CasePathable"," enum Action {","   \/\/ ..."," }"],"syntax":"diff"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Further, if the feature’s "},{"code":"State","type":"codeVoice"},{"text":" is an enum, ","type":"text"},{"type":"codeVoice","code":"@CasePathable"},{"text":" will also be applied, along with","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"@dynamicMemberLookup"},{"text":":","type":"text"}]},{"type":"codeListing","code":["+@CasePathable","+@dynamicMemberLookup"," enum State {","   \/\/ ..."," }"],"syntax":"diff"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Dynamic member lookups allows a state’s associated value to be accessed via dot-syntax, which can be"},{"type":"text","text":" "},{"text":"useful when scoping a store’s state to a specific case:","type":"text"}]},{"syntax":"diff","code":[" IfLetStore(","   store.scope(","-    state: \/Feature.State.tray, action: Feature.Action.tray","+    state: \\.tray, action: { .tray($0) }","   )",") { store in","  \/\/ ...","}"],"type":"codeListing"},{"inlineContent":[{"text":"To form a case key path for any other enum, you must apply the ","type":"text"},{"code":"@CasePathable","type":"codeVoice"},{"type":"text","text":" macro explicitly:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@CasePathable","enum DelegateAction {","  case didFinish(success: Bool)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And to access its associated values, you must also apply the "},{"type":"codeVoice","code":"@dynamicMemberLookup"},{"type":"text","text":" attributes:"}]},{"type":"codeListing","syntax":"swift","code":["@CasePathable","@dynamicMemberLookup","enum DestinationState {","  case tray(Tray.State)","}"]},{"inlineContent":[{"type":"text","text":"Anywhere you previously used the "},{"type":"codeVoice","code":"\/"},{"type":"text","text":" prefix operator for case paths you should now be able to use"},{"type":"text","text":" "},{"type":"text","text":"key path syntax, so long as all of the enums involved are "},{"type":"codeVoice","code":"@CasePathable"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If you encounter any problems, create a "},{"identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","isActive":true,"type":"reference"},{"text":" on the Composable Architecture","type":"text"},{"type":"text","text":" "},{"text":"repo.","type":"text"}]},{"text":"Receiving test store actions","level":3,"anchor":"Receiving-test-store-actions","type":"heading"},{"inlineContent":[{"type":"text","text":"The power of case key paths and the "},{"type":"codeVoice","code":"@CasePathable"},{"text":" macro has made it possible to massively simplify","type":"text"},{"type":"text","text":" "},{"type":"text","text":"how one asserts on actions received in a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"text":". Instead of constructing the concrete action","type":"text"},{"text":" ","type":"text"},{"text":"received from an effect like this:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["store.receive(.child(.presented(.response(.success(\"Hello!\")))))"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"…you can use key path syntax to describe the nesting of action cases that is received:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["store.receive(\\.child.presented.response.success)"]},{"name":"Note","type":"aside","style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"Case key path syntax requires that every nested action is ","type":"text"},{"code":"@CasePathable","type":"codeVoice"},{"text":". Reducer actions","type":"text"},{"type":"text","text":" "},{"type":"text","text":"are typically "},{"type":"codeVoice","code":"@CasePathable"},{"type":"text","text":" automatically via the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true,"type":"reference"},{"type":"text","text":" macro, but other enums must be"},{"type":"text","text":" "},{"type":"text","text":"explicitly annotated:"}]},{"type":"codeListing","syntax":"swift","code":["@CasePathable","enum DelegateAction {","  case didFinish(success: Bool)","}"]}]},{"type":"paragraph","inlineContent":[{"text":"And in the case of ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"text":" you can even omit the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"path component:"}]},{"type":"codeListing","syntax":"swift","code":["store.receive(\\.child.response.success)"]},{"inlineContent":[{"type":"text","text":"This does not assert on the "},{"inlineContent":[{"text":"data","type":"text"}],"type":"emphasis"},{"text":" received in the action, but typically that is already covered","type":"text"},{"type":"text","text":" "},{"type":"text","text":"by the state assertion made inside the trailing closure of "},{"code":"receive","type":"codeVoice"},{"text":". And if you use this style of","type":"text"},{"type":"text","text":" "},{"type":"text","text":"action receiving exclusively, you can even stop conforming your action types to "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are a few advanced situations to be aware of. When receiving an action that involves an"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction"},{"text":" (more information below in ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4#Identified-actions"},{"type":"text","text":"), then"},{"text":" ","type":"text"},{"type":"text","text":"you can use the subscript "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction\/AllCasePaths-swift.struct\/subscript(id:)"},{"text":" to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"receive a particular action for an element:"}]},{"type":"codeListing","syntax":"swift","code":["store.receive(\\.rows[id: 0].response.success)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And the same goes for "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction"},{"type":"text","text":" too:"}]},{"code":["store.receive(\\.path[id: 0].response.success)"],"type":"codeListing","syntax":"swift"},{"text":"Moving off of TaskResult","level":3,"anchor":"Moving-off-of-TaskResult","type":"heading"},{"inlineContent":[{"text":"In version 1.4 of the library, the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","isActive":true,"type":"reference"},{"type":"text","text":" was soft-deprecated and eventually will be fully"},{"text":" ","type":"text"},{"type":"text","text":"deprecated and then removed. The original rationale for the introduction of "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult"},{"type":"text","text":" was to"},{"text":" ","type":"text"},{"type":"text","text":"make an equatable-friendly version of "},{"type":"codeVoice","code":"Result"},{"type":"text","text":" for when the error produced was "},{"code":"any Error","type":"codeVoice"},{"text":", which is","type":"text"},{"type":"text","text":" "},{"type":"text","text":"not equatable. And the reason to want an equatable-friendly result is so that the "},{"code":"Action","type":"codeVoice"},{"type":"text","text":" type in"},{"text":" ","type":"text"},{"type":"text","text":"reducers can be equatable, and the reason for "},{"type":"emphasis","inlineContent":[{"type":"text","text":"that"}]},{"text":" is to make it possible to test actions","type":"text"},{"type":"text","text":" "},{"text":"emitted by effects.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Typically in tests, when one wants to assert that the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"text":" received an action you must","type":"text"},{"type":"text","text":" "},{"type":"text","text":"specify a concrete action:"}]},{"syntax":"swift","type":"codeListing","code":["store.receive(.response(.success(\"Hello!\"))) {","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" uses the equatable conformance of "},{"type":"codeVoice","code":"Action"},{"text":" to confirm that you are asserting that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the store received the correct action."}]},{"type":"paragraph","inlineContent":[{"text":"However, this becomes verbose when testing deeply nested features, which is common in integration","type":"text"},{"type":"text","text":" "},{"text":"tests:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["store.receive(.child(.response(.success(\"Hello!\")))) {","  \/\/ ...","}"]},{"inlineContent":[{"text":"However, with the introduction of ","type":"text"},{"overridingTitleInlineContent":[{"text":"case key paths","type":"text"}],"isActive":true,"overridingTitle":"case key paths","type":"reference","identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths"},{"type":"text","text":" we greatly improved the"},{"type":"text","text":" "},{"type":"text","text":"ergonomics of referring to deeply nested enums. You can now use key path syntax to describe the"},{"type":"text","text":" "},{"type":"text","text":"case of the enum you expect to receive, and you can even omit the associated data from the action"},{"text":" ","type":"text"},{"text":"since typically that is covered in the state assertion:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["store.receive(\\.child.response.success) {","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"text":"And this syntax does not require the ","type":"text"},{"code":"Action","type":"codeVoice"},{"text":" enum to be equatable since we are only asserting that","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the case of the action was received. We are not testing the data in the action."}]},{"inlineContent":[{"type":"text","text":"We feel that with this better syntax there is less of a reason to have "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult"},{"text":" and so we","type":"text"},{"type":"text","text":" "},{"text":"do plan on removing it eventually. If you have an important use case for ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","type":"reference","isActive":true},{"type":"text","text":" that you"},{"type":"text","text":" "},{"type":"text","text":"think merits it being in the library, please "},{"overridingTitle":"open a discussion","overridingTitleInlineContent":[{"type":"text","text":"open a discussion"}],"type":"reference","isActive":true,"identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions"},{"text":".","type":"text"}],"type":"paragraph"},{"text":"Identified actions","anchor":"Identified-actions","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"In version 1.4 of the library we introduced the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction","isActive":true},{"type":"text","text":" type which makes it more"},{"type":"text","text":" "},{"text":"ergonomic to bundle the data needed for actions in collections of data. Previously you would","type":"text"},{"text":" ","type":"text"},{"text":"have a case in your ","type":"text"},{"type":"codeVoice","code":"Action"},{"type":"text","text":" enum for a particular row that holds the ID of the state being acted"},{"text":" ","type":"text"},{"text":"upon as well as the action:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["enum Action {","  \/\/ ...","  case row(id: State.ID, action: Action)","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can be updated to hold onto "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction","isActive":true,"type":"reference"},{"type":"text","text":" instead of those piece of data directly in the"},{"text":" ","type":"text"},{"type":"text","text":"case:"}]},{"syntax":"swift","code":["enum Action {","  \/\/ ...","  case rows(IdentifiedActionOf<Nested>)","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And in the reducer, instead of invoking"},{"type":"text","text":" "},{"type":"codeVoice","code":"Reducer\/forEach(_:action:element:fileID:filePath:line:column:)-3dw7i"},{"type":"text","text":" with a case path using the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"\/"},{"type":"text","text":" prefix operator:"}]},{"syntax":"swift","type":"codeListing","code":["Reduce { state, action in ","  \/\/ ...","}",".forEach(\\.rows, action: \/Action.row(id:action:)) {","  RowFeature()","}"]},{"inlineContent":[{"text":"…you will instead use key path syntax to determine which case of the ","type":"text"},{"code":"Action","type":"codeVoice"},{"text":" enum holds the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"identified action:"}],"type":"paragraph"},{"type":"codeListing","code":["Reduce { state, action in ","  \/\/ ...","}",".forEach(\\.rows, action: \\.rows) {","  RowFeature()","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This syntax is shorter, more familiar, and can better leverage Xcode autocomplete and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"type-inference."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"One last change you will need to make is anywhere you are destructuring the old-style action you"},{"text":" ","type":"text"},{"text":"will need to insert a ","type":"text"},{"code":".element","type":"codeVoice"},{"type":"text","text":" layer:"}]},{"code":["-case let .row(id: id, action: .buttonTapped):","+case let .rows(.element(id: id, action: .buttonTapped)):"],"type":"codeListing","syntax":"diff"}]}],"abstract":[{"type":"text","text":"Update your code to make use of the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true,"type":"reference"},{"type":"text","text":" macro, and learn how to better leverage case key"},{"type":"text","text":" "},{"type":"text","text":"paths in your features."}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared":{"type":"topic","navigatorTitle":[{"text":"Shared","kind":"identifier"}],"kind":"symbol","title":"Shared","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Shared","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/shared","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","abstract":[{"text":"A property wrapper type that shares a value with multiple parts of an application.","type":"text"}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.12":{"title":"Migrating to 1.12","kind":"article","url":"\/documentation\/composablearchitecture\/migratingto1.12","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","abstract":[{"text":"Take advantage of custom decoding and encoding logic for the shared file storage persistence","type":"text"},{"text":" ","type":"text"},{"text":"strategy, as well as beta support for Swift’s native Testing framework.","type":"text"}],"type":"topic","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"PresentationAction","kind":"identifier"}],"type":"topic","url":"\/documentation\/composablearchitecture\/presentationaction","title":"PresentationAction","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","navigatorTitle":[{"text":"PresentationAction","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"A wrapper type for actions that can be presented."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.14":{"type":"topic","abstract":[{"text":"The ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true,"type":"reference"},{"text":" type is now officially ","type":"text"},{"type":"codeVoice","code":"@MainActor"},{"type":"text","text":" isolated."}],"kind":"article","role":"article","title":"Migrating to 1.14","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","url":"\/documentation\/composablearchitecture\/migratingto1.14"},"#Identified-actions":{"identifier":"#Identified-actions","title":"Identified actions","titleInlineContent":[{"type":"text","text":"Identified actions"}],"url":"#Identified-actions","type":"link"},"http://github.com/pointfreeco/swift-case-paths":{"identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths","title":"CasePaths","titleInlineContent":[{"type":"text","text":"CasePaths"}],"url":"http:\/\/github.com\/pointfreeco\/swift-case-paths","type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackAction":{"title":"StackAction","kind":"symbol","navigatorTitle":[{"text":"StackAction","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/stackaction","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackAction","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"StackAction"}],"abstract":[{"type":"text","text":"A wrapper type for actions that can be presented in a navigation stack."}],"type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer#Gotchas":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer#Gotchas","title":"Gotchas","url":"\/documentation\/composablearchitecture\/reducer#Gotchas","abstract":[],"kind":"section","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"abstract":[{"text":"A Composable Architecture-friendly wrapper around ","type":"text"},{"type":"codeVoice","code":"ForEach"},{"type":"text","text":" that simplifies working with"},{"type":"text","text":" "},{"type":"text","text":"collections of state."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ForEachStore"}],"navigatorTitle":[{"kind":"identifier","text":"ForEachStore"}],"title":"ForEachStore","deprecated":true,"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","url":"\/documentation\/composablearchitecture\/foreachstore","role":"symbol","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigrationGuides":{"title":"Migration guides","kind":"article","url":"\/documentation\/composablearchitecture\/migrationguides","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides","abstract":[{"type":"text","text":"Learn how to upgrade your application to the newest version of the Composable Architecture."}],"type":"topic","role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"navigatorTitle":[{"kind":"identifier","text":"IfLetStore"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IfLetStore"}],"role":"symbol","deprecated":true,"kind":"symbol","title":"IfLetStore","abstract":[{"type":"text","text":"A view that safely unwraps a store of optional state in order to show one of two views."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","type":"topic","url":"\/documentation\/composablearchitecture\/ifletstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedAction/AllCasePaths-swift.struct/subscript(id:)":{"abstract":[],"type":"topic","kind":"symbol","title":"subscript(id:)","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction\/AllCasePaths-swift.struct\/subscript(id:)","url":"\/documentation\/composablearchitecture\/identifiedaction\/allcasepaths-swift.struct\/subscript(id:)","fragments":[{"kind":"keyword","text":"subscript"},{"text":"(","kind":"text"},{"text":"id","kind":"externalParam"},{"kind":"text","text":" _: "},{"text":"ID","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"AnyCasePath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths03AnyA4PathV"},{"kind":"text","text":"<"},{"text":"IdentifiedAction","preciseIdentifier":"s:22ComposableArchitecture16IdentifiedActionO","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"ID","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Action","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":">"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.7":{"title":"Migrating to 1.7","type":"topic","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.7","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","abstract":[{"type":"text","text":"Update your code to make use of the new observation tools in the library and get rid of legacy"},{"text":" ","type":"text"},{"text":"APIs such as ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"text":", ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","isActive":true,"type":"reference"},{"text":", ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","type":"reference"},{"type":"text","text":", and more."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/dependency(_:)":{"title":"dependency(_:)","kind":"symbol","url":"\/documentation\/composablearchitecture\/reducer\/dependency(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"dependency","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_DependencyKeyWritingReducer"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"type":"text","text":"Places a value in the reducer’s dependencies."}],"type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.10":{"title":"Migrating to 1.10","type":"topic","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.10","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","abstract":[{"type":"text","text":"Update your code to make use of the new state sharing tools in the library, such as the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared"},{"text":" ","type":"text"},{"type":"text","text":"property wrapper, and the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AppStorageKey"},{"type":"text","text":" and "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/FileStorageKey","isActive":true,"type":"reference"},{"text":" persistence strategies.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.9":{"title":"Migrating to 1.9","kind":"article","url":"\/documentation\/composablearchitecture\/migratingto1.9","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","abstract":[{"text":"Update your code to make use of the new ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8877x","isActive":true,"type":"reference"},{"type":"text","text":""},{"text":" ","type":"text"},{"type":"text","text":"method on "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference"},{"text":" which gives a succinct syntax for sending actions with case key paths, and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","isActive":true},{"text":" method for overriding dependencies.","type":"text"}],"type":"topic","role":"article"},"#Using-case-key-paths":{"type":"link","title":"Using case key paths","titleInlineContent":[{"text":"Using case key paths","type":"text"}],"url":"#Using-case-key-paths","identifier":"#Using-case-key-paths"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.8":{"title":"Migrating to 1.8","kind":"article","url":"\/documentation\/composablearchitecture\/migratingto1.8","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","abstract":[{"text":"Update your code to make use of the new capabilities of the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true,"type":"reference"},{"type":"text","text":" macro, including automatic"},{"type":"text","text":" "},{"text":"fulfillment of requirements for destination reducers and path reducers.","type":"text"}],"type":"topic","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"url":"\/documentation\/composablearchitecture\/store","title":"Store","navigatorTitle":[{"kind":"identifier","text":"Store"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"title":"Effect","navigatorTitle":[{"kind":"identifier","text":"Effect"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","abstract":[],"kind":"symbol","url":"\/documentation\/composablearchitecture\/effect","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Effect"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/FileStorageKey":{"title":"FileStorageKey","navigatorTitle":[{"kind":"identifier","text":"FileStorageKey"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/FileStorageKey","url":"\/documentation\/composablearchitecture\/filestoragekey","kind":"symbol","abstract":[{"type":"text","text":"A type defining a file persistence strategy"}],"role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FileStorageKey"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x":{"title":"receive(_:_:timeout:assert:fileID:file:line:column:)","type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/receive(_:_:timeout:assert:fileid:file:line:column:)-9jd7x","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"receive","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"_SendableCaseKeyPath","preciseIdentifier":"s:22ComposableArchitecture20_SendableCaseKeyPatha"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Value","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"timeout"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s8DurationV","text":"Duration","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"assert","kind":"externalParam"},{"kind":"text","text":": (("},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"text":")?, ","kind":"text"},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"abstract":[{"text":"Asserts an action was received matching a case path with a specific payload, and asserts how","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the state changes."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.4#Identified-actions":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4#Identified-actions","title":"Identified actions","url":"\/documentation\/composablearchitecture\/migratingto1.4#Identified-actions","abstract":[],"kind":"section","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","kind":"symbol","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"title":"WithViewStore","url":"\/documentation\/composablearchitecture\/withviewstore","navigatorTitle":[{"text":"WithViewStore","kind":"identifier"}],"type":"topic","deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"WithViewStore","kind":"identifier"}],"abstract":[{"type":"text","text":"A view helper that transforms a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"type":"text","text":" into a "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true,"type":"reference"},{"type":"text","text":" so that its state can be observed"},{"text":" ","type":"text"},{"type":"text","text":"by a view builder."}],"kind":"symbol"},"http://github.com/pointfreeco/swift-composable-architecture/discussions":{"identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","title":"discussion","titleInlineContent":[{"type":"text","text":"discussion"}],"url":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedAction":{"url":"\/documentation\/composablearchitecture\/identifiedaction","abstract":[{"type":"text","text":"A wrapper type for actions that can be presented in a list."}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"IdentifiedAction"}],"fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"IdentifiedAction","kind":"identifier"}],"role":"symbol","title":"IdentifiedAction","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"title":"TestStore","url":"\/documentation\/composablearchitecture\/teststore","abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TestStore"}],"navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.15":{"title":"Migrating to 1.15","type":"topic","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.15","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","abstract":[{"text":"The library has been completely updated for Swift 6 language mode, and now compiles in strict","type":"text"},{"type":"text","text":" "},{"text":"concurrency with no warnings or errors.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.13":{"title":"Migrating to 1.13","url":"\/documentation\/composablearchitecture\/migratingto1.13","abstract":[{"text":"The Composable Architecture now provides first class tools for building features in UIKit,","type":"text"},{"type":"text","text":" "},{"text":"including minimal state observation, presentation and stack navigation.","type":"text"}],"role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","kind":"article","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.5":{"title":"Migrating to 1.5","type":"topic","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.5","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","abstract":[{"text":"Update your code to make use of the new ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255"},{"text":" operation on ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" "},{"text":"in order to improve the performance of your features and simplify the usage of navigation APIs.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AppStorageKey":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AppStorageKey"}],"kind":"symbol","title":"AppStorageKey","abstract":[{"text":"A type defining a user defaults persistence strategy.","type":"text"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AppStorageKey"}],"url":"\/documentation\/composablearchitecture\/appstoragekey","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AppStorageKey"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/presented(_:)":{"title":"PresentationAction.presented(_:)","url":"\/documentation\/composablearchitecture\/presentationaction\/presented(_:)","abstract":[{"text":"An action sent to the associated, non-","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" presentation state."}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)","kind":"symbol","fragments":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"presented"},{"kind":"text","text":"("},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":")"}],"type":"topic"},"#Moving-off-of-TaskResult":{"type":"link","title":"Moving off of TaskResult","titleInlineContent":[{"type":"text","text":"Moving off of "},{"code":"TaskResult","type":"codeVoice"}],"url":"#Moving-off-of-TaskResult","identifier":"#Moving-off-of-TaskResult"},"#Using-the-Reducer-macro":{"type":"link","title":"Using the @Reducer macro","titleInlineContent":[{"type":"text","text":"Using the @Reducer macro"}],"url":"#Using-the-Reducer-macro","identifier":"#Using-the-Reducer-macro"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TaskResult":{"deprecated":true,"url":"\/documentation\/composablearchitecture\/taskresult","type":"topic","abstract":[{"type":"text","text":"A value that represents either a success or a failure. This type differs from Swift’s "},{"code":"Result","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"type in that it uses only one generic for the success case, leaving the failure case as an"},{"type":"text","text":" "},{"type":"text","text":"untyped "},{"type":"codeVoice","code":"Error"},{"type":"text","text":"."}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"TaskResult","kind":"identifier"}],"navigatorTitle":[{"text":"TaskResult","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TaskResult","kind":"symbol","role":"symbol","title":"TaskResult"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"type":"topic","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"text":"s should be executed later by the store, if any.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"url":"\/documentation\/composablearchitecture\/reducer","title":"Reducer","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Reducer","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/send(_:assert:fileID:file:line:column:)-8877x":{"title":"send(_:assert:fileID:file:line:column:)","type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/send(_:assert:fileid:file:line:column:)-8877x","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8877x","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":">, "},{"text":"assert","kind":"externalParam"},{"kind":"text","text":": (("},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"text":")?, ","kind":"text"},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"file","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"column"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"TestStoreTask","preciseIdentifier":"s:22ComposableArchitecture13TestStoreTaskV","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"Sends an action to the store and asserts when state changes."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared/withLock(_:)":{"title":"withLock(_:)","url":"\/documentation\/composablearchitecture\/shared\/withlock(_:)","abstract":[{"type":"text","text":"Perform an operation on shared state with isolated access to the underlying value."}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"withLock","kind":"identifier"},{"text":"<","kind":"text"},{"text":"R","kind":"genericParameter"},{"kind":"text","text":">(("},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"R","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"R","kind":"typeIdentifier"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"title":"Reducer()","type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/reducer()","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Reducer"},{"text":"()","kind":"text"}],"abstract":[{"type":"text","text":"Helps implement the conformance to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for a type."}]},"#Receiving-test-store-actions":{"identifier":"#Receiving-test-store-actions","title":"Receiving test store actions","titleInlineContent":[{"text":"Receiving test store actions","type":"text"}],"url":"#Receiving-test-store-actions","type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-90255":{"title":"scope(state:action:)","type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-90255","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"scope","kind":"identifier"},{"kind":"text","text":"<"},{"text":"ChildState","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ChildAction"},{"text":">(","kind":"text"},{"text":"state","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC","text":"KeyPath"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"text":">, ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ChildAction"},{"text":">) -> ","kind":"text"},{"text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":", "},{"text":"ChildAction","kind":"typeIdentifier"},{"kind":"text","text":">"}],"abstract":[{"text":"Scopes the store to one that exposes child state and actions.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.11":{"title":"Migrating to 1.11","url":"\/documentation\/composablearchitecture\/migratingto1.11","abstract":[{"text":"Update your code to use the new ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)","isActive":true,"type":"reference"},{"type":"text","text":" method for mutating shared state from"},{"type":"text","text":" "},{"type":"text","text":"asynchronous contexts, rather than mutating the underlying wrapped value directly."}],"role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","kind":"article","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.6":{"title":"Migrating to 1.6","type":"topic","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.6","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","abstract":[{"type":"text","text":"Update your code to make use of the new"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x","isActive":true},{"text":" method when you need to","type":"text"},{"text":" ","type":"text"},{"text":"assert on the payload inside an action received.","type":"text"}]}}}