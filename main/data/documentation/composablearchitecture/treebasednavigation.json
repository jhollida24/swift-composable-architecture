{"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation"]]},"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation","interfaceLanguage":"swift"},"kind":"article","primaryContentSections":[{"kind":"content","content":[{"anchor":"Overview","type":"heading","text":"Overview","level":2},{"inlineContent":[{"type":"text","text":"Tree-based navigation is the process of modeling navigation using optional and enum state. This"},{"type":"text","text":" "},{"text":"style of navigation allows you to deep-link into any state of your application by simply","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"constructing a deeply nested piece of state, handing it off to SwiftUI, and letting it take care of"},{"type":"text","text":" "},{"text":"the rest.","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Basics","isActive":true,"type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Enum-state","isActive":true,"type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#Integration","isActive":true}]}]},{"content":[{"inlineContent":[{"identifier":"#Dismissal","isActive":true,"type":"reference"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#Testing","isActive":true}]}]}]},{"text":"Basics","type":"heading","anchor":"Basics","level":2},{"type":"paragraph","inlineContent":[{"text":"The tools for this style of navigation include the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()"},{"type":"text","text":" macro,"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","type":"reference","isActive":true},{"text":", the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q","isActive":true,"type":"reference"},{"type":"text","text":" operator,"},{"type":"text","text":" "},{"text":"and that is all. Once your feature is properly integrated with those tools you can use all of","type":"text"},{"text":" ","type":"text"},{"text":"SwiftUI’s normal navigation view modifiers, such as ","type":"text"},{"code":"sheet(item:)","type":"codeVoice"},{"text":", ","type":"text"},{"code":"popover(item:)","type":"codeVoice"},{"type":"text","text":", etc."}]},{"inlineContent":[{"type":"text","text":"The process of integrating two features together for navigation largely consists of 2 steps:"},{"type":"text","text":" "},{"text":"integrating the features’ domains together and integrating the features’ views together. One","type":"text"},{"type":"text","text":" "},{"type":"text","text":"typically starts by integrating the features’ domains together. This consists of adding the child’s"},{"text":" ","type":"text"},{"type":"text","text":"state and actions to the parent, and then utilizing a reducer operator to compose the child reducer"},{"type":"text","text":" "},{"type":"text","text":"into the parent."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For example, suppose you have a list of items and you want to be able to show a sheet to display a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"form for adding a new item. We can integrate state and actions together by utilizing the"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","type":"reference","isActive":true},{"text":" macro and ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","isActive":true},{"text":" type:","type":"text"}]},{"code":["@Reducer","struct InventoryFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var addItem: ItemFormFeature.State?","    var items: IdentifiedArrayOf<Item> = []","    \/\/ ...","  }","","  enum Action {","    case addItem(PresentationAction<ItemFormFeature.Action>)","    \/\/ ...","  }","","  \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"name":"Note","style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"addItem"},{"type":"text","text":" state is held as an optional. A non-"},{"type":"codeVoice","code":"nil"},{"text":" value represents that feature is","type":"text"},{"text":" ","type":"text"},{"text":"being presented, and ","type":"text"},{"code":"nil","type":"codeVoice"},{"text":" presents the feature is dismissed.","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"text":"Next you can integrate the reducers of the parent and child features by using the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q","isActive":true},{"text":" reducer operator, as well as having an","type":"text"},{"type":"text","text":" "},{"text":"action in the parent domain for populating the child’s state to drive navigation:","type":"text"}]},{"type":"codeListing","code":["@Reducer","struct InventoryFeature {","  @ObservableState","  struct State: Equatable { \/* ... *\/ }","  enum Action { \/* ... *\/ }","  ","  var body: some ReducerOf<Self> {","    Reduce { state, action in ","      switch action {","      case .addButtonTapped:","        \/\/ Populating this state performs the navigation","        state.addItem = ItemFormFeature.State()","        return .none","","      \/\/ ...","      }","    }","    .ifLet(\\.$addItem, action: \\.addItem) {","      ItemFormFeature()","    }","  }","}"],"syntax":"swift"},{"content":[{"inlineContent":[{"text":"The key path used with ","type":"text"},{"code":"ifLet","type":"codeVoice"},{"text":" focuses on the ","type":"text"},{"type":"codeVoice","code":"@PresentationState"},{"text":" projected value since it","type":"text"},{"type":"text","text":" "},{"type":"text","text":"uses the "},{"type":"codeVoice","code":"$"},{"text":" syntax. Also note that the action uses a","type":"text"},{"type":"text","text":" "},{"identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths","isActive":true,"type":"reference"},{"type":"text","text":", which is analogous to key paths but"},{"type":"text","text":" "},{"type":"text","text":"tuned for enums."}],"type":"paragraph"}],"name":"Note","style":"note","type":"aside"},{"inlineContent":[{"text":"That’s all that it takes to integrate the domains and logic of the parent and child features. Next","type":"text"},{"type":"text","text":" "},{"type":"text","text":"we need to integrate the features’ views. This is done by passing a binding of a store to one"},{"text":" ","type":"text"},{"type":"text","text":"of SwiftUI’s view modifiers."}],"type":"paragraph"},{"inlineContent":[{"text":"For example, to show a sheet from the ","type":"text"},{"type":"codeVoice","code":"addItem"},{"type":"text","text":" state in the "},{"code":"InventoryFeature","type":"codeVoice"},{"type":"text","text":", we can hand"},{"type":"text","text":" "},{"text":"the ","type":"text"},{"type":"codeVoice","code":"sheet(item:)"},{"type":"text","text":" modifier a binding of a "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"text":" as an argument that is focused on presentation","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"state and actions:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct InventoryView: View {","  @Bindable var store: StoreOf<InventoryFeature>","","  var body: some View {","    List {","      \/\/ ...","    }","    .sheet(","      item: $store.scope(state: \\.addItem, action: \\.addItem)","    ) { store in","      ItemFormView(store: store)","    }","  }","}"]},{"style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We use SwiftUI’s "},{"code":"@Bindable","type":"codeVoice"},{"text":" property wrapper to produce a binding to a store, which can be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"further scoped using "},{"code":"SwiftUI\/Binding\/scope(state:action:fileID:filePath:line:column:)","type":"codeVoice"},{"text":".","type":"text"}]}],"type":"aside"},{"type":"paragraph","inlineContent":[{"text":"With those few steps completed the domains and views of the parent and child features are now","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"integrated together, and when the "},{"type":"codeVoice","code":"addItem"},{"type":"text","text":" state flips to a non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" value the sheet will be"},{"type":"text","text":" "},{"text":"presented, and when it is ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":"’d out it will be dismissed.","type":"text"}]},{"inlineContent":[{"type":"text","text":"In this example we are using the "},{"code":".sheet","type":"codeVoice"},{"type":"text","text":" view modifier, but every view modifier SwiftUI ships can"},{"text":" ","type":"text"},{"type":"text","text":"be handed a store in this fashion, including "},{"type":"codeVoice","code":"popover(item:)"},{"type":"text","text":", "},{"type":"codeVoice","code":"fullScreenCover(item:), "},{"text":"navigationDestination(item:)`, and more. This should make it possible to use optional state to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"drive any kind of navigation in a SwiftUI application."}],"type":"paragraph"},{"type":"heading","level":2,"text":"Enum state","anchor":"Enum-state"},{"inlineContent":[{"text":"While driving navigation with optional state can be powerful, it can also lead to less-than-ideal","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"modeled domains. In particular, if a feature can navigate to multiple screens then you may be"},{"text":" ","type":"text"},{"type":"text","text":"tempted to model that with multiple optional values:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@ObservableState","struct State {","  @Presents var detailItem: DetailFeature.State?","  @Presents var editItem: EditFeature.State?","  @Presents var addItem: AddFeature.State?","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, this can lead to invalid states, such as 2 or more states being non-nil at the same time,"},{"type":"text","text":" "},{"text":"and that can cause a lot of problems. First of all, SwiftUI does not support presenting multiple","type":"text"},{"text":" ","type":"text"},{"text":"views at the same time from a single view, and so by allowing this in our state we run the risk of","type":"text"},{"text":" ","type":"text"},{"text":"putting our application into an inconsistent state with respect to SwiftUI.","type":"text"}]},{"inlineContent":[{"type":"text","text":"Second, it becomes more difficult for us to determine what feature is actually being presented. We"},{"text":" ","type":"text"},{"text":"must check multiple optionals to figure out which one is non-","type":"text"},{"type":"codeVoice","code":"nil"},{"text":", and then we must figure out how","type":"text"},{"type":"text","text":" "},{"text":"to interpret when multiple pieces of state are non-","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" at the same time.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"And the number of invalid states increases exponentially with respect to the number of features that"},{"text":" ","type":"text"},{"text":"can be navigated to. For example, 3 optionals leads to 4 invalid states, 4 optionals leads to 11","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"invalid states, and 5 optionals leads to 26 invalid states."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For these reasons, and more, it can be better to model multiple destinations in a feature as a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"single enum rather than multiple optionals. So the example of above, with 3 optionals, can be"},{"type":"text","text":" "},{"text":"refactored as an enum:","type":"text"}]},{"syntax":"swift","code":["enum State {","  case addItem(AddFeature.State)","  case detailItem(DetailFeature.State)","  case editItem(EditFeature.State)","  \/\/ ...","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"This gives us compile-time proof that only one single destination can be active at a time."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"In order to utilize this style of domain modeling you must take a few extra steps. First you model a","type":"text"},{"type":"text","text":" "},{"type":"text","text":"“destination” reducer that encapsulates the domains and behavior of all of the features that you can"},{"type":"text","text":" "},{"text":"navigate to. Typically it’s best to nest this reducer inside the feature that can perform the","type":"text"},{"text":" ","type":"text"},{"text":"navigation, and the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference"},{"type":"text","text":" macro can do most of the heavy lifting for us by implementing the"},{"type":"text","text":" "},{"type":"text","text":"entire reducer from a simple description of the features that can be navigated to:"}]},{"syntax":"swift","code":["@Reducer","struct InventoryFeature {","  \/\/ ...","","  @Reducer","  enum Destination {","    case addItem(AddFeature)","    case detailItem(DetailFeature)","    case editItem(EditFeature)","  }","}"],"type":"codeListing"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference"},{"type":"text","text":" macro takes this simple enum description of destination features and"},{"text":" ","type":"text"},{"text":"expands it into a fully composed feature that operates on enum state with a case for each","type":"text"},{"text":" ","type":"text"},{"text":"feature’s state. You can expand the macro code in Xcode to see everything that is written for you.","type":"text"}]}],"name":"Note","style":"note","type":"aside"},{"inlineContent":[{"text":"With that done we can now hold onto a ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"single","type":"text"}]},{"text":" piece of optional state in our feature, using the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","isActive":true},{"type":"text","text":" macro, and we hold onto the destination actions using the"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","isActive":true},{"type":"text","text":" type:"}],"type":"paragraph"},{"code":["@Reducer","struct InventoryFeature {","  @ObservableState","  struct State { ","    @Presents var destination: Destination.State?","    \/\/ ...","  }","  enum Action {","    case destination(PresentationAction<Destination.Action>)","    \/\/ ...","  }","","  \/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And then we must make use of the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q","isActive":true},{"text":" operator","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to integrate the domain of the destination with the domain of the parent feature:"}]},{"syntax":"swift","code":["@Reducer","struct InventoryFeature {","  \/\/ ...","","  var body: some ReducerOf<Self> {","    Reduce { state, action in ","      \/\/ ...","    }","    .ifLet(\\.$destination, action: \\.destination) ","  }","}"],"type":"codeListing"},{"name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It’s not necessary to specify "},{"type":"codeVoice","code":"Destination"},{"text":" in a trialing closure of ","type":"text"},{"type":"codeVoice","code":"ifLet"},{"text":" because it can","type":"text"},{"text":" ","type":"text"},{"text":"automatically be inferred due to how the ","type":"text"},{"code":"Destination","type":"codeVoice"},{"text":" enum was defined with the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference","isActive":true},{"type":"text","text":" "},{"type":"text","text":"macro."}]}],"style":"note"},{"type":"paragraph","inlineContent":[{"type":"text","text":"That completes the steps for integrating the child and parent features together."}]},{"type":"paragraph","inlineContent":[{"text":"Now when we want to present a particular feature we can simply populate the ","type":"text"},{"code":"destination","type":"codeVoice"},{"type":"text","text":" state"},{"text":" ","type":"text"},{"type":"text","text":"with a case of the enum:"}]},{"syntax":"swift","code":["case addButtonTapped:","  state.destination = .addItem(AddFeature.State())","  return .none"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"And at any time we can figure out exactly what feature is being presented by switching or otherwise","type":"text"},{"type":"text","text":" "},{"text":"destructuring the single piece of ","type":"text"},{"type":"codeVoice","code":"destination"},{"type":"text","text":" state rather than checking multiple optional values."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The final step is to make use of the library’s scoping powers to focus in on the "},{"type":"codeVoice","code":"Destination"},{"text":" ","type":"text"},{"type":"text","text":"domain and further isolate a particular case of the state and action enums via dot-chaining."}]},{"inlineContent":[{"type":"text","text":"For example, suppose the “add” screen is presented as a sheet, the “edit” screen is presented"},{"text":" ","type":"text"},{"type":"text","text":"by a popover, and the “detail” screen is presented in a drill-down. Then we can use the"},{"text":" ","type":"text"},{"code":".sheet(item:)","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":".popover(item:)"},{"type":"text","text":", and "},{"code":".navigationDestination(item:)","type":"codeVoice"},{"type":"text","text":" view modifiers that come"},{"type":"text","text":" "},{"type":"text","text":"from SwiftUI to have each of those styles of presentation powered by the respective case of the"},{"text":" ","type":"text"},{"text":"destination enum.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"To do this you must first hold onto the store in a bindable manner by using the ","type":"text"},{"type":"codeVoice","code":"@Bindable"},{"text":" property","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"wrapper:"}]},{"type":"codeListing","syntax":"swift","code":["struct InventoryView: View {","  @Bindable var store: StoreOf<InventoryFeature>","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"text":"And then in the ","type":"text"},{"type":"codeVoice","code":"body"},{"type":"text","text":" of the view you can use the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"SwiftUI\/Binding\/scope(state:action:fileID:filePath:line:column:)"},{"text":" operator to derive bindings from ","type":"text"},{"type":"codeVoice","code":"$store"},{"type":"text","text":":"}]},{"syntax":"swift","type":"codeListing","code":["var body: some View {","  List {","    \/\/ ...","  }","  .sheet(","    item: $store.scope(","      state: \\.destination?.addItem,","      action: \\.destination.addItem","    )","  ) { store in ","    AddFeatureView(store: store)","  }","  .popover(","    item: $store.scope(","      state: \\.destination?.editItem,","      action: \\.destination.editItem","    )","  ) { store in ","    EditFeatureView(store: store)","  }","  .navigationDestination(","    item: $store.scope(","      state: \\.destination?.detailItem,","      action: \\.destination.detailItem","    )","  ) { store in ","    DetailFeatureView(store: store)","  }","}"]},{"inlineContent":[{"type":"text","text":"With those steps completed you can be sure that your domains are modeled as concisely as possible."},{"text":" ","type":"text"},{"text":"If the “add” item sheet was presented, and you decided to mutate the ","type":"text"},{"code":"destination","type":"codeVoice"},{"type":"text","text":" state to point"},{"type":"text","text":" "},{"text":"to the ","type":"text"},{"type":"codeVoice","code":".detailItem"},{"text":" case, then you can be certain that the sheet will be dismissed and the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"drill-down will occur immediately."}],"type":"paragraph"},{"level":3,"anchor":"API-Unification","text":"API Unification","type":"heading"},{"inlineContent":[{"type":"text","text":"One of the best features of tree-based navigation is that it unifies all forms of navigation with a"},{"type":"text","text":" "},{"text":"single style of API. First of all, regardless of the type of navigation you plan on performing,","type":"text"},{"text":" ","type":"text"},{"text":"integrating the parent and child features together can be done with the single","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q"},{"text":" operator. This one single API services","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"all forms of optional-driven navigation."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"And then in the view, whether you are wanting to perform a drill-down, show a sheet, display"},{"type":"text","text":" "},{"type":"text","text":"an alert, or even show a custom navigation component, all you need to do is invoke an API that"},{"text":" ","type":"text"},{"type":"text","text":"is provided a store focused on some "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","type":"reference","isActive":true},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","isActive":true},{"text":". If you do","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"that, then the API can handle the rest, making sure to present the child view when the state"},{"text":" ","type":"text"},{"text":"becomes non-","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" and dismissing when it goes back to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This means that theoretically you could have a single view that needs to be able to show a sheet,","type":"text"},{"type":"text","text":" "},{"text":"popover, drill-down, alert ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"and","type":"text"}]},{"text":" confirmation dialog, and all of the work to display the various","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"forms of navigation could be as simple as this:"}]},{"syntax":"swift","code":[".sheet(","  item: $store.scope(state: \\.addItem, action: \\.addItem)",") { store in ","  AddFeatureView(store: store)","}",".popover(","  item: $store.scope(state: \\.editItem, action: \\.editItem)",") { store in ","  EditFeatureView(store: store)","}",".navigationDestination(","  item: $store.scope(state: \\.detailItem, action: \\.detailItem)",") { store in ","  DetailFeatureView(store: store)","}",".alert(","  $store.scope(state: \\.alert, action: \\.alert)",")",".confirmationDialog(","  $store.scope(state: \\.confirmationDialog, action: \\.confirmationDialog)",")"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In each case we provide a store scoped to the presentation domain, and a view that will be presented"},{"text":" ","type":"text"},{"type":"text","text":"when its corresponding state flips to non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":". It is incredibly powerful to see that so many"},{"type":"text","text":" "},{"text":"seemingly disparate forms of navigation can be unified under a single style of API.","type":"text"}]},{"level":4,"type":"heading","text":"Backwards compatible availability","anchor":"Backwards-compatible-availability"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Depending on your deployment target, certain APIs may be unavailable. For example, if you target "},{"type":"text","text":"\n"},{"type":"text","text":"platforms earlier than iOS 16, macOS 13, tvOS 16 and watchOS 9, then you cannot use"},{"type":"text","text":" "},{"type":"codeVoice","code":"navigationDestination"},{"type":"text","text":". Instead you can use "},{"code":"NavigationLink","type":"codeVoice"},{"text":", but you must define helper for","type":"text"},{"type":"text","text":" "},{"type":"text","text":"driving navigation off of a binding of data rather than just a simple boolean. Just paste"},{"text":" ","type":"text"},{"type":"text","text":"the following into your project:"}]},{"type":"codeListing","syntax":"swift","code":["@available(iOS, introduced: 13, deprecated: 16)","@available(macOS, introduced: 10.15, deprecated: 13)","@available(tvOS, introduced: 13, deprecated: 16)","@available(watchOS, introduced: 6, deprecated: 9)","extension NavigationLink {","  public init<D, C: View>(","    item: Binding<D?>,","    onNavigate: @escaping (_ isActive: Bool) -> Void,","    @ViewBuilder destination: (D) -> C,","    @ViewBuilder label: () -> Label","  ) where Destination == C? {","    self.init(","      destination: item.wrappedValue.map(destination),","      isActive: Binding(","        get: { item.wrappedValue != nil },","        set: { isActive, transaction in","          onNavigate(isActive)","          if !isActive {","            item.transaction(transaction).wrappedValue = nil","          }","        }","      ),","      label: label","    )","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"That gives you the ability to drive a ","type":"text"},{"code":"NavigationLink","type":"codeVoice"},{"type":"text","text":" from state. When the link is tapped the"},{"type":"text","text":" "},{"type":"codeVoice","code":"onNavigate"},{"text":" closure will be invoked, giving you the ability to populate state. And when the","type":"text"},{"type":"text","text":" "},{"text":"feature is dismissed, the state will be ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":"’d out."}]},{"type":"heading","level":2,"text":"Integration","anchor":"Integration"},{"type":"paragraph","inlineContent":[{"text":"Once your features are integrated together using the steps above, your parent feature gets instant","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"access to everything happening inside the child feature. You can use this as a means to integrate"},{"type":"text","text":" "},{"type":"text","text":"the logic of child and parent features. For example, if you want to detect when the “Save” button"},{"text":" ","type":"text"},{"type":"text","text":"inside the edit feature is tapped, you can simply destructure on that action. This consists of"},{"text":" ","type":"text"},{"type":"text","text":"pattern matching on the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","isActive":true},{"type":"text","text":", then the "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)","type":"reference"},{"text":" case,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"then the feature you are interested in, and finally the action you are interested in:"}]},{"syntax":"swift","code":["case .destination(.presented(.editItem(.saveButtonTapped))):","  \/\/ ..."],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Once inside that case you can then try extracting out the feature state so that you can perform"},{"type":"text","text":" "},{"text":"additional logic, such as closing the “edit” feature and saving the edited item to the database:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["case .destination(.presented(.editItem(.saveButtonTapped))):","  guard case let .editItem(editItemState) = state.destination","  else { return .none }","","  state.destination = nil","  return .run { _ in","    self.database.save(editItemState.item)","  }"]},{"type":"heading","text":"Dismissal","anchor":"Dismissal","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"Dismissing a presented feature is as simple as "},{"type":"codeVoice","code":"nil"},{"text":"-ing out the state that represents the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"presented feature:"}]},{"type":"codeListing","code":["case .closeButtonTapped:","  state.destination = nil","  return .none"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In order to "},{"type":"codeVoice","code":"nil"},{"type":"text","text":" out the presenting state you must have access to that state, and usually only the"},{"text":" ","type":"text"},{"type":"text","text":"parent has access, but often we would like to encapsulate the logic of dismissing a feature to be"},{"type":"text","text":" "},{"text":"inside the child feature without needing explicit communication with the parent.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"SwiftUI provides a wonderful tool for allowing child "},{"type":"emphasis","inlineContent":[{"type":"text","text":"views"}]},{"text":" to dismiss themselves from the parent,","type":"text"},{"type":"text","text":" "},{"text":"all without any explicit communication with the parent. It’s an environment value called ","type":"text"},{"type":"codeVoice","code":"dismiss"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"and it can be used like so:","type":"text"}]},{"type":"codeListing","code":["struct ChildView: View {","  @Environment(\\.dismiss) var dismiss","  var body: some View {","    Button(\"Close\") { self.dismiss() }","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"When "},{"type":"codeVoice","code":"self.dismiss()"},{"type":"text","text":" is invoked, SwiftUI finds the closest parent view with a presentation, and"},{"text":" ","type":"text"},{"text":"causes it to dismiss by writing ","type":"text"},{"type":"codeVoice","code":"false"},{"text":" or ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" to the binding that drives the presentation. This","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can be incredibly useful, but it is also relegated to the view layer. It is not possible to use"},{"type":"text","text":" "},{"type":"codeVoice","code":"dismiss"},{"type":"text","text":" elsewhere, like in an observable object, which would allow you to have nuanced logic"},{"type":"text","text":" "},{"type":"text","text":"for dismissal such as validation or async work."}]},{"inlineContent":[{"type":"text","text":"The Composable Architecture has a similar tool, except it is appropriate to use from a reducer,"},{"type":"text","text":" "},{"type":"text","text":"where the rest of your feature’s logic and behavior resides. It is accessed via the library’s"},{"type":"text","text":" "},{"type":"text","text":"dependency management system (see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement"},{"text":") using ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","isActive":true},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["@Reducer","struct Feature {","  @ObservableState","  struct State { \/* ... *\/ }","  enum Action { ","    case closeButtonTapped","    \/\/ ...","  }","  @Dependency(\\.dismiss) var dismiss","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case .closeButtonTapped:","        return .run { _ in await self.dismiss() }","      }","    }","  }","}"],"type":"codeListing"},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect"},{"type":"text","text":" function is async which means it cannot be invoked directly inside a"},{"type":"text","text":" "},{"type":"text","text":"reducer. Instead it must be called from "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)"},{"type":"text","text":"."}],"type":"paragraph"}],"name":"Note","type":"aside","style":"note"},{"inlineContent":[{"type":"text","text":"When "},{"code":"self.dismiss()","type":"codeVoice"},{"text":" is invoked it will ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" out the state responsible for presenting the feature","type":"text"},{"type":"text","text":" "},{"text":"by sending a ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss","isActive":true},{"text":" action back into the system, causing the feature to be","type":"text"},{"text":" ","type":"text"},{"text":"dismissed. This allows you to encapsulate the logic for dismissing a child feature entirely inside","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the child domain without explicitly communicating with the parent."}],"type":"paragraph"},{"name":"Note","style":"note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Because dismissal is handled by sending an action, it is not valid to ever send an action"},{"type":"text","text":" "},{"type":"text","text":"after invoking "},{"type":"codeVoice","code":"dismiss()"},{"type":"text","text":":"}]},{"syntax":"swift","code":["return .run { send in ","  await self.dismiss()","  await send(.tick)  \/\/ ⚠️","}"],"type":"codeListing"},{"inlineContent":[{"text":"To do so would be to send an action for a feature while its state is ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":", and that will cause"},{"type":"text","text":" "},{"type":"text","text":"a runtime warning in Xcode and a test failure when running tests."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"SwiftUI’s environment value "},{"type":"codeVoice","code":"@Environment(\\.dismiss)"},{"type":"text","text":" and the Composable Architecture’s"},{"text":" ","type":"text"},{"text":"dependency value ","type":"text"},{"type":"codeVoice","code":"@Dependency(\\.dismiss)"},{"text":" serve similar purposes, but are completely different","type":"text"},{"text":" ","type":"text"},{"text":"types. SwiftUI’s environment value can only be used in SwiftUI views, and this library’s","type":"text"},{"type":"text","text":" "},{"text":"dependency value can only be used inside reducers.","type":"text"}],"type":"paragraph"}],"style":"warning","name":"Warning","type":"aside"},{"type":"heading","level":2,"text":"Testing","anchor":"Testing"},{"inlineContent":[{"type":"text","text":"A huge benefit of properly modeling your domains for navigation is that testing becomes quite easy."},{"type":"text","text":" "},{"type":"text","text":"Further, using “non-exhaustive testing” (see "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Non-exhaustive-testing","isActive":true},{"text":") can be very","type":"text"},{"text":" ","type":"text"},{"text":"useful for testing navigation since you often only want to assert on a few high level details and","type":"text"},{"text":" ","type":"text"},{"text":"not all state mutations and effects.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"As an example, consider the following simple counter feature that wants to dismiss itself if its"},{"text":" ","type":"text"},{"type":"text","text":"count is greater than or equal to 5:"}],"type":"paragraph"},{"syntax":"swift","code":["@Reducer","struct CounterFeature {","  @ObservableState","  struct State: Equatable {","    var count = 0","  }","  enum Action {","    case decrementButtonTapped","    case incrementButtonTapped","  }","","  @Dependency(\\.dismiss) var dismiss","","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case .decrementButtonTapped:","        state.count -= 1","        return .none","","      case .incrementButtonTapped:","        state.count += 1","        return state.count >= 5","          ? .run { _ in await self.dismiss() }","          : .none","      }","    }","  }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"And then let’s embed that feature into a parent feature using the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","isActive":true},{"type":"text","text":" macro,"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","type":"reference","isActive":true},{"text":" type and ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q"},{"type":"text","text":" "},{"text":"operator:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["@Reducer","struct Feature {","  @ObservableState","  struct State: Equatable {","    @Presents var counter: CounterFeature.State?","  }","  enum Action {","    case counter(PresentationAction<CounterFeature.Action>)","  }","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      \/\/ Logic and behavior for core feature.","    }","    .ifLet(\\.$counter, action: \\.counter) {","      CounterFeature()","    }","  }","}"],"type":"codeListing"},{"inlineContent":[{"text":"Now let’s try to write a test on the ","type":"text"},{"type":"codeVoice","code":"Feature"},{"text":" reducer that proves that when the child counter","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"feature’s count is incremented above 5 it will dismiss itself. To do this we will construct a"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true,"type":"reference"},{"text":" for ","type":"text"},{"type":"codeVoice","code":"Feature"},{"type":"text","text":" that starts in a state with the count already set to 3:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@Test","func dismissal() {","  let store = TestStore(","    initialState: Feature.State(","      counter: CounterFeature.State(count: 3)","    )","  ) {","    CounterFeature()","  }","}"]},{"inlineContent":[{"text":"Then we can send the ","type":"text"},{"code":".incrementButtonTapped","type":"codeVoice"},{"type":"text","text":" action in the counter child feature to confirm"},{"text":" ","type":"text"},{"type":"text","text":"that the count goes up by one:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["await store.send(\\.counter.incrementButtonTapped) {","  $0.counter?.count = 4","}"]},{"type":"paragraph","inlineContent":[{"text":"And then we can send it one more time to see that the count goes up to 5:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["await store.send(\\.counter.incrementButtonTapped) {","  $0.counter?.count = 5","}"]},{"type":"paragraph","inlineContent":[{"text":"And then we finally expect that the child dismisses itself, which manifests itself as the","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss","isActive":true},{"type":"text","text":" action being sent to "},{"type":"codeVoice","code":"nil"},{"text":" out the ","type":"text"},{"code":"counter","type":"codeVoice"},{"type":"text","text":" state, which we can"},{"type":"text","text":" "},{"type":"text","text":"assert using the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-53wic","isActive":true},{"text":" method on ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference","isActive":true},{"type":"text","text":":"}]},{"syntax":"swift","type":"codeListing","code":["await store.receive(\\.counter.dismiss) {","  $0.counter = nil","}"]},{"inlineContent":[{"text":"This shows how we can write very nuanced tests on how parent and child features interact with each","type":"text"},{"type":"text","text":" "},{"text":"other.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, the more complex the features become, the more cumbersome testing their integration can be."},{"text":" ","type":"text"},{"type":"text","text":"By default, "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" requires us to be exhaustive in our assertions. We must assert on how"},{"text":" ","type":"text"},{"type":"text","text":"every piece of state changes, how every effect feeds data back into the system, and we must make"},{"type":"text","text":" "},{"text":"sure that all effects finish by the end of the test (see ","type":"text"},{"type":"text","text":"doc:Testing"},{"type":"text","text":" for more info)."}]},{"inlineContent":[{"type":"text","text":"But "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true},{"type":"text","text":" also supports a form of testing known as “non-exhaustive testing” that allows you"},{"text":" ","type":"text"},{"type":"text","text":"to assert on only the parts of the features that you actually care about (see"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Non-exhaustive-testing"},{"text":" for more info).","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, if we turn off exhaustivity on the test store (see "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","type":"reference","isActive":true},{"text":") then we","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"can assert at a high level that when the increment button is tapped twice that eventually we receive"},{"type":"text","text":" "},{"text":"a dismiss action:","type":"text"}]},{"syntax":"swift","code":["@Test","func dismissal() {","  let store = TestStore(","    initialState: Feature.State(","      counter: CounterFeature.State(count: 3)","    )","  ) {","    CounterFeature()","  }","  store.exhaustivity = .off","","  await store.send(\\.counter.incrementButtonTapped)","  await store.send(\\.counter.incrementButtonTapped)","  await store.receive(\\.counter.dismiss) ","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"This essentially proves the same thing that the previous test proves, but it does so in much fewer","type":"text"},{"type":"text","text":" "},{"text":"lines and is more resilient to future changes in the features that we don’t necessarily care about.","type":"text"}]},{"inlineContent":[{"type":"text","text":"That is the basics of testing, but things get a little more complicated when you leverage the"},{"text":" ","type":"text"},{"type":"text","text":"concepts outlined in "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation#Enum-state"},{"text":" in which you model multiple destinations","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as an enum instead of multiple optionals. In order to assert on state changes when using enum"},{"type":"text","text":" "},{"type":"text","text":"state you must chain into the particular case to make a mutation:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["await store.send(\\.destination.counter.incrementButtonTapped) {","  $0.destination?.counter?.count = 4","}"]}]}],"abstract":[{"text":"Learn about tree-based navigation, that is navigation modeled with optionals and enums, including","type":"text"},{"type":"text","text":" "},{"text":"how to model your domains, how to integrate features, how to test your features, and more.","type":"text"}],"seeAlsoSections":[{"generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q"],"title":"Tree-based navigation","anchor":"Tree-based-navigation"}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/treebasednavigation"]}],"sections":[],"schemaVersion":{"major":0,"patch":0,"minor":3},"metadata":{"modules":[{"name":"ComposableArchitecture"}],"role":"article","title":"Tree-based navigation","roleHeading":"Article"},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:timeout:assert:fileID:file:line:column:)-53wic":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:timeout:assert:fileID:file:line:column:)-53wic","title":"receive(_:timeout:assert:fileID:file:line:column:)","role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"receive","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"text":"timeout","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Duration","kind":"typeIdentifier","preciseIdentifier":"s:s8DurationV"},{"kind":"text","text":", "},{"text":"assert","kind":"externalParam"},{"text":": ((","kind":"text"},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"kind":"text","text":")?, "},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"file"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"column"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"}],"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"State","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}]},"type":"topic","abstract":[{"text":"Asserts an action was received matching a case path and asserts how the state changes.","type":"text"}],"url":"\/documentation\/composablearchitecture\/teststore\/receive(_:timeout:assert:fileid:file:line:column:)-53wic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q":{"title":"ifLet(_:action:destination:fileID:filePath:line:column:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q","type":"topic","url":"\/documentation\/composablearchitecture\/reducer\/iflet(_:action:destination:fileid:filepath:line:column:)-4ub6q","kind":"symbol","abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain that works on an optional property of parent state."}],"role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"ifLet","kind":"identifier"},{"text":"<","kind":"text"},{"text":"DestinationState","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"DestinationAction","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"Destination","kind":"genericParameter"},{"kind":"text","text":">("},{"preciseIdentifier":"s:s15WritableKeyPathC","text":"WritableKeyPath","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture17PresentationStateV","text":"PresentationState"},{"kind":"text","text":"<"},{"text":"DestinationState","kind":"typeIdentifier"},{"text":">>, ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"PresentationAction","preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO"},{"text":"<","kind":"text"},{"text":"DestinationAction","kind":"typeIdentifier"},{"text":">>, ","kind":"text"},{"kind":"externalParam","text":"destination"},{"kind":"text","text":": () -> "},{"text":"Destination","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"filePath"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"column"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":") -> ","kind":"text"},{"kind":"keyword","text":"some"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"Reducer","preciseIdentifier":"s:22ComposableArchitecture7ReducerP"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","kind":"typeIdentifier","text":"State"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"text":">\n","kind":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/exhaustivity":{"type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/exhaustivity","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/exhaustivity","abstract":[{"text":"The current exhaustivity level of the test store.","type":"text"}],"title":"exhaustivity","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"exhaustivity","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Exhaustivity","preciseIdentifier":"s:22ComposableArchitecture12ExhaustivityO"}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Navigation":{"url":"\/documentation\/composablearchitecture\/navigation","abstract":[{"text":"Learn how to use the navigation tools in the library, including how to best model your domains, how","type":"text"},{"type":"text","text":" "},{"text":"to integrate features in the reducer and view layers, and how to write tests.","type":"text"}],"role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation","title":"Navigation","kind":"article","type":"topic"},"http://github.com/pointfreeco/swift-case-paths":{"url":"http:\/\/github.com\/pointfreeco\/swift-case-paths","titleInlineContent":[{"text":"case path","type":"text"}],"type":"link","title":"case path","identifier":"http:\/\/github.com\/pointfreeco\/swift-case-paths"},"#Basics":{"url":"#Basics","titleInlineContent":[{"text":"Basics","type":"text"}],"type":"link","title":"Basics","identifier":"#Basics"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DependencyManagement":{"title":"Dependencies","abstract":[{"text":"Learn how to register dependencies with the library so that they can be immediately accessible from","type":"text"},{"type":"text","text":" "},{"text":"any reducer.","type":"text"}],"role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","type":"topic","url":"\/documentation\/composablearchitecture\/dependencymanagement","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"title":"Effect","navigatorTitle":[{"kind":"identifier","text":"Effect"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","abstract":[],"kind":"symbol","url":"\/documentation\/composablearchitecture\/effect","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Effect"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"PresentationAction","kind":"identifier"}],"type":"topic","url":"\/documentation\/composablearchitecture\/presentationaction","title":"PresentationAction","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","navigatorTitle":[{"text":"PresentationAction","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"A wrapper type for actions that can be presented."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/dismiss":{"role":"symbol","fragments":[{"text":"case","kind":"keyword"},{"text":" ","kind":"text"},{"text":"dismiss","kind":"identifier"}],"type":"topic","url":"\/documentation\/composablearchitecture\/presentationaction\/dismiss","title":"PresentationAction.dismiss","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss","kind":"symbol","abstract":[{"text":"An action sent to ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" out the associated presentation state."}]},"#Dismissal":{"url":"#Dismissal","titleInlineContent":[{"text":"Dismissal","type":"text"}],"type":"link","title":"Dismissal","identifier":"#Dismissal"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationState":{"abstract":[{"text":"A property wrapper for state that can be presented.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"PresentationState"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","url":"\/documentation\/composablearchitecture\/presentationstate","title":"PresentationState","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"PresentationState","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"url":"\/documentation\/composablearchitecture\/store","title":"Store","navigatorTitle":[{"kind":"identifier","text":"Store"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:fileID:filePath:line:column:)":{"kind":"symbol","title":"run(priority:operation:catch:fileID:filePath:line:column:)","type":"topic","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"run","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"priority"},{"kind":"text","text":": "},{"text":"TaskPriority","kind":"typeIdentifier","preciseIdentifier":"s:ScP"},{"kind":"text","text":"?, "},{"text":"operation","kind":"externalParam"},{"kind":"text","text":": ("},{"preciseIdentifier":"s:22ComposableArchitecture4SendV","text":"Send","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"catch","kind":"externalParam"},{"text":": ((any ","kind":"text"},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture4SendV","kind":"typeIdentifier","text":"Send"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":")?, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":", "},{"text":"filePath","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture6EffectV","text":"Effect","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">"}],"role":"symbol","abstract":[{"type":"text","text":"Wraps an asynchronous unit of work that can emit actions any number of times in an effect."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:fileid:filepath:line:column:)"},"#Integration":{"url":"#Integration","titleInlineContent":[{"text":"Integration","type":"text"}],"type":"link","title":"Integration","identifier":"#Integration"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"title":"Reducer()","type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/reducer()","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Reducer"},{"text":"()","kind":"text"}],"abstract":[{"type":"text","text":"Helps implement the conformance to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for a type."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Testing#Non-exhaustive-testing":{"kind":"section","abstract":[],"type":"topic","url":"\/documentation\/composablearchitecture\/testing#Non-exhaustive-testing","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Non-exhaustive-testing","title":"Non-exhaustive testing"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Presents()":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","url":"\/documentation\/composablearchitecture\/presents()","type":"topic","abstract":[{"text":"Wraps a property with ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","isActive":true,"type":"reference"},{"text":" and observes it.","type":"text"}],"title":"Presents()","role":"symbol","fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Presents"},{"text":"()","kind":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TreeBasedNavigation#Enum-state":{"abstract":[],"kind":"section","url":"\/documentation\/composablearchitecture\/treebasednavigation#Enum-state","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation#Enum-state","title":"Enum state","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"type":"topic","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"text":"s should be executed later by the store, if any.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"url":"\/documentation\/composablearchitecture\/reducer","title":"Reducer","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Reducer","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"title":"TestStore","url":"\/documentation\/composablearchitecture\/teststore","abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TestStore"}],"navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"type":"topic"},"#Enum-state":{"url":"#Enum-state","titleInlineContent":[{"text":"Enum state","type":"text"}],"type":"link","title":"Enum state","identifier":"#Enum-state"},"#Testing":{"url":"#Testing","titleInlineContent":[{"text":"Testing","type":"text"}],"type":"link","title":"Testing","identifier":"#Testing"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DismissEffect":{"type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/dismisseffect","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","abstract":[{"text":"An effect that dismisses the current presentation.","type":"text"}],"title":"DismissEffect","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"DismissEffect"}],"navigatorTitle":[{"kind":"identifier","text":"DismissEffect"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/presented(_:)":{"title":"PresentationAction.presented(_:)","url":"\/documentation\/composablearchitecture\/presentationaction\/presented(_:)","abstract":[{"text":"An action sent to the associated, non-","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" presentation state."}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)","kind":"symbol","fragments":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"presented"},{"kind":"text","text":"("},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":")"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","kind":"symbol","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","type":"topic"}}}