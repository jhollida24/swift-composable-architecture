{"seeAlsoSections":[{"generated":true,"title":"Integrations","anchor":"Integrations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","interfaceLanguage":"swift"},"kind":"article","primaryContentSections":[{"content":[{"type":"heading","text":"Overview","level":2,"anchor":"overview"},{"inlineContent":[{"type":"text","text":"As of version 5.6, Swift can provide many warnings for situations in which you might be using types"},{"type":"text","text":" "},{"type":"text","text":"and functions that are not thread-safe in concurrent contexts. Many of these warnings can be ignored"},{"text":" ","type":"text"},{"type":"text","text":"for the time being, but in Swift 6 most (if not all) of these warnings will become errors, and so"},{"text":" ","type":"text"},{"text":"you will need to know how to prove to the compiler that your types are safe to use concurrently.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There primary way to create an "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"text":" in the library is via","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","isActive":true,"type":"reference"},{"type":"text","text":". It takes a "},{"code":"@Sendable","type":"codeVoice"},{"type":"text","text":", asynchronous closure,"},{"text":" ","type":"text"},{"text":"which restricts the types of closures you can use for your effects. In particular, the closure can","type":"text"},{"type":"text","text":" "},{"text":"only capture ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"text":" variables that are bound with ","type":"text"},{"type":"codeVoice","code":"let"},{"text":". Mutable variables and non-","type":"text"},{"code":"Sendable","type":"codeVoice"},{"text":" ","type":"text"},{"type":"text","text":"types are simply not allowed to be passed to "},{"type":"codeVoice","code":"@Sendable"},{"type":"text","text":" closures."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are two primary ways you will run into this restriction when building a feature in the"},{"type":"text","text":" "},{"text":"Composable Architecture: accessing state from within an effect, and accessing a dependency from","type":"text"},{"type":"text","text":" "},{"type":"text","text":"within an effect."}]},{"type":"heading","level":3,"anchor":"Accessing-state-in-an-effect","text":"Accessing state in an effect"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Reducers are executed with a mutable, "},{"code":"inout","type":"codeVoice"},{"type":"text","text":" state variable, and such variables cannot be accessed"},{"type":"text","text":" "},{"text":"from within ","type":"text"},{"code":"@Sendable","type":"codeVoice"},{"type":"text","text":" closures:"}]},{"syntax":"swift","code":["@Reducer","struct Feature {","  @ObservableState","  struct State { \/* ... *\/ }","  enum Action { \/* ... *\/ }","","  var body: some Reducer<State, Action> {","    Reduce { state, action in","      switch action {","      case .buttonTapped:","        return .run { send in","          try await Task.sleep(for: .seconds(1))","          await send(.delayed(state.count))","          \/\/ 🛑 Mutable capture of 'inout' parameter 'state' is","          \/\/    not allowed in concurrently-executing code","        }","","        \/\/ ...","      }","    }","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To work around this you must explicitly capture the state as an immutable value for the scope of the"},{"type":"text","text":" "},{"type":"text","text":"closure:"}]},{"code":["return .run { [state] send in","  try await Task.sleep(for: .seconds(1))","  await send(.delayed(state.count))  \/\/ ✅","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"You can also capture just the minimal parts of the state you need for the effect by binding a new"},{"text":" ","type":"text"},{"type":"text","text":"variable name for the capture:"}]},{"type":"codeListing","syntax":"swift","code":["return .run { [count = state.count] send in","  try await Task.sleep(for: .seconds(1))","  await send(.delayed(count))  \/\/ ✅","}"]},{"anchor":"Accessing-dependencies-in-an-effect","text":"Accessing dependencies in an effect","type":"heading","level":3},{"type":"paragraph","inlineContent":[{"text":"In the Composable Architecture, one provides dependencies to a reducer so that it can interact with","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the outside world in a deterministic and controlled manner. Those dependencies can be used from"},{"text":" ","type":"text"},{"type":"text","text":"asynchronous and concurrent contexts, and so must be "},{"code":"Sendable","type":"codeVoice"},{"text":".","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"If your dependency is not sendable, you will be notified at the time of registering it with the"},{"text":" ","type":"text"},{"text":"library. In particular, when extending ","type":"text"},{"type":"codeVoice","code":"DependencyValues"},{"text":" to provide the computed property:","type":"text"}]},{"syntax":"swift","code":["extension DependencyValues {","  var factClient: FactClient {","    get { self[FactClient.self] }","    set { self[FactClient.self] = newValue }","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If "},{"type":"codeVoice","code":"FactClient"},{"text":" is not ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":", for whatever reason, you will get a warning in the "},{"type":"codeVoice","code":"get"},{"text":" ","type":"text"},{"type":"text","text":"and "},{"type":"codeVoice","code":"set"},{"text":" lines:","type":"text"}]},{"type":"codeListing","code":["⚠️ Type 'FactClient' does not conform to the 'Sendable' protocol"],"syntax":null},{"type":"paragraph","inlineContent":[{"text":"To fix this you need to make each dependency ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":". This usually just means making sure"},{"text":" ","type":"text"},{"type":"text","text":"that the interface type only holds onto "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":" data, and in particular, any closure-based"},{"text":" ","type":"text"},{"text":"endpoints should be annotated as ","type":"text"},{"code":"@Sendable","type":"codeVoice"},{"text":":","type":"text"}]},{"code":["struct FactClient {","  var fetch: @Sendable (Int) async throws -> String","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"This will restrict the kinds of closures that can be used when constructing "},{"type":"codeVoice","code":"FactClient"},{"text":" values, thus","type":"text"},{"type":"text","text":" "},{"type":"text","text":"making the entire "},{"code":"FactClient","type":"codeVoice"},{"text":" sendable itself.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"sections":[],"metadata":{"role":"article","title":"Adopting Swift concurrency","roleHeading":"Article","modules":[{"name":"ComposableArchitecture"}]},"variants":[{"paths":["\/documentation\/composablearchitecture\/swiftconcurrency"],"traits":[{"interfaceLanguage":"swift"}]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"schemaVersion":{"major":0,"patch":0,"minor":3},"abstract":[{"text":"Learn how to write safe, concurrent effects using Swift’s structured concurrency.","type":"text"}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"abstract":[{"type":"text","text":"Integrating the Composable Architecture into a SwiftUI application."}],"type":"topic","title":"SwiftUI Integration","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/swiftuiintegration","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservationBackport":{"abstract":[{"text":"Learn how the Observation framework from Swift 5.9 was backported to support iOS 16 and earlier,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as well as the caveats of using the backported tools."}],"title":"Observation backport","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport","url":"\/documentation\/composablearchitecture\/observationbackport","role":"article","kind":"article","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"title":"Effect","navigatorTitle":[{"kind":"identifier","text":"Effect"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","abstract":[],"kind":"symbol","url":"\/documentation\/composablearchitecture\/effect","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Effect"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect/run(priority:operation:catch:fileID:filePath:line:column:)":{"kind":"symbol","title":"run(priority:operation:catch:fileID:filePath:line:column:)","type":"topic","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"run","kind":"identifier"},{"kind":"text","text":"("},{"kind":"externalParam","text":"priority"},{"kind":"text","text":": "},{"text":"TaskPriority","kind":"typeIdentifier","preciseIdentifier":"s:ScP"},{"kind":"text","text":"?, "},{"text":"operation","kind":"externalParam"},{"kind":"text","text":": ("},{"preciseIdentifier":"s:22ComposableArchitecture4SendV","text":"Send","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">) "},{"kind":"keyword","text":"async"},{"kind":"text","text":" "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"catch","kind":"externalParam"},{"text":": ((any ","kind":"text"},{"text":"Error","kind":"typeIdentifier","preciseIdentifier":"s:s5ErrorP"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture4SendV","kind":"typeIdentifier","text":"Send"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"text":">) ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":")?, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":", "},{"text":"filePath","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"StaticString","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture6EffectV","text":"Effect","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">"}],"role":"symbol","abstract":[{"type":"text","text":"Wraps an asynchronous unit of work that can emit actions any number of times in an effect."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect\/run(priority:operation:catch:fileID:filePath:line:column:)","url":"\/documentation\/composablearchitecture\/effect\/run(priority:operation:catch:fileid:filepath:line:column:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIKit":{"abstract":[{"type":"text","text":"Integrating the Composable Architecture into a UIKit application."}],"kind":"article","url":"\/documentation\/composablearchitecture\/uikit","type":"topic","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit","title":"UIKit Integration"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","kind":"symbol","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","type":"topic"}}}