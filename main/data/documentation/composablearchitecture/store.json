{"metadata":{"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}],"modules":[{"name":"ComposableArchitecture"}],"title":"Store","navigatorTitle":[{"kind":"identifier","text":"Store"}],"roleHeading":"Class","symbolKind":"class","role":"symbol","externalID":"s:22ComposableArchitecture5StoreC"},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"text":"@","kind":"attribute"},{"kind":"attribute","preciseIdentifier":"s:ScM","text":"MainActor"},{"kind":"text","text":" "},{"text":"@dynamicMemberLookup","kind":"attribute"},{"text":" ","kind":"text"},{"kind":"attribute","text":"@preconcurrency"},{"kind":"text","text":" "},{"kind":"keyword","text":"final"},{"text":" ","kind":"text"},{"kind":"keyword","text":"class"},{"kind":"text","text":" "},{"text":"Store","kind":"identifier"},{"kind":"text","text":"<"},{"text":"State","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Action","kind":"genericParameter"},{"kind":"text","text":">"}]}]},{"kind":"content","content":[{"level":2,"text":"Overview","anchor":"overview","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"You will typically construct a single one of these at the root of your application:","type":"text"}]},{"syntax":"swift","code":["@main","struct MyApp: App {","  var body: some Scene {","    WindowGroup {","      RootView(","        store: Store(initialState: AppFeature.State()) {","          AppFeature()","        }","      )","    }","  }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"…and then use the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","type":"reference","isActive":true},{"type":"text","text":" method to derive more focused stores that can be"},{"type":"text","text":" "},{"type":"text","text":"passed to subviews."}],"type":"paragraph"},{"level":3,"text":"Scoping","type":"heading","anchor":"Scoping"},{"type":"paragraph","inlineContent":[{"text":"The most important operation defined on ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" is the "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","type":"reference"},{"text":" method,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which allows you to transform a store into one that deals with child state and actions. This is"},{"text":" ","type":"text"},{"text":"necessary for passing stores to subviews that only care about a small portion of the entire","type":"text"},{"type":"text","text":" "},{"type":"text","text":"application’s domain."}]},{"inlineContent":[{"type":"text","text":"For example, if an application has a tab view at its root with tabs for activity, search, and"},{"text":" ","type":"text"},{"text":"profile, then we can model the domain like this:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@Reducer","struct AppFeature {","  struct State {","    var activity: Activity.State","    var profile: Profile.State","    var search: Search.State","  }","","  enum Action {","    case activity(Activity.Action)","    case profile(Profile.Action)","    case search(Search.Action)","  }","","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"text":"We can construct a view for each of these domains by applying ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","isActive":true},{"type":"text","text":" to"},{"type":"text","text":" "},{"text":"a store that holds onto the full app domain in order to transform it into a store for each","type":"text"},{"type":"text","text":" "},{"text":"subdomain:","type":"text"}]},{"code":["struct AppView: View {","  let store: StoreOf<AppFeature>","","  var body: some View {","    TabView {","      ActivityView(","        store: store.scope(state: \\.activity, action: \\.activity)","      )","      .tabItem { Text(\"Activity\") }","","      SearchView(","        store: store.scope(state: \\.search, action: \\.search)","      )","      .tabItem { Text(\"Search\") }","","      ProfileView(","        store: store.scope(state: \\.profile, action: \\.profile)","      )","      .tabItem { Text(\"Profile\") }","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"level":3,"text":"Thread safety","type":"heading","anchor":"Thread-safety"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Store"},{"type":"text","text":" class is not thread-safe, and so all interactions with an instance of "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"(including all of its child stores) must be done on the same thread the store was created on."},{"text":" ","type":"text"},{"type":"text","text":"Further, if the store is powering a SwiftUI or UIKit view, as is customary, then all"},{"type":"text","text":" "},{"text":"interactions must be done on the ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"main"}]},{"type":"text","text":" thread."}]},{"inlineContent":[{"type":"text","text":"The reason stores are not thread-safe is due to the fact that when an action is sent to a store,"},{"type":"text","text":" "},{"text":"a reducer is run on the current state, and this process cannot be done from multiple threads.","type":"text"},{"type":"text","text":" "},{"text":"It is possible to make this process thread-safe by introducing locks or queues, but this","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"introduces new complications:"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"If done simply with "},{"type":"codeVoice","code":"DispatchQueue.main.async"},{"text":" you will incur a thread hop even when you are","type":"text"},{"text":" ","type":"text"},{"text":"already on the main thread. This can lead to unexpected behavior in UIKit and SwiftUI, where","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"sometimes you are required to do work synchronously, such as in animation blocks."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"It is possible to create a scheduler that performs its work immediately when on the main"},{"type":"text","text":" "},{"type":"text","text":"thread and otherwise uses "},{"type":"codeVoice","code":"DispatchQueue.main.async"},{"text":" (","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"e.g."}]},{"type":"text","text":", see Combine Schedulers’"},{"type":"text","text":" "},{"identifier":"https:\/\/github.com\/pointfreeco\/combine-schedulers\/blob\/main\/Sources\/CombineSchedulers\/UIScheduler.swift","isActive":true,"type":"reference"},{"type":"text","text":")."}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This introduces a lot more complexity, and should probably not be adopted without having a very"},{"type":"text","text":" "},{"type":"text","text":"good reason."}]},{"type":"paragraph","inlineContent":[{"text":"This is why we require all actions be sent from the same thread. This requirement is in the same","type":"text"},{"type":"text","text":" "},{"text":"spirit of how ","type":"text"},{"code":"URLSession","type":"codeVoice"},{"type":"text","text":" and other Apple APIs are designed. Those APIs tend to deliver their"},{"type":"text","text":" "},{"type":"text","text":"outputs on whatever thread is most convenient for them, and then it is your responsibility to"},{"type":"text","text":" "},{"type":"text","text":"dispatch back to the main queue if that’s what you need. The Composable Architecture makes you"},{"text":" ","type":"text"},{"type":"text","text":"responsible for making sure to send actions on the main thread. If you are using an effect that"},{"text":" ","type":"text"},{"type":"text","text":"may deliver its output on a non-main thread, you must explicitly perform "},{"type":"codeVoice","code":".receive(on:)"},{"type":"text","text":" in"},{"text":" ","type":"text"},{"text":"order to force it back on the main thread.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This approach makes the fewest number of assumptions about how effects are created and"},{"type":"text","text":" "},{"type":"text","text":"transformed, and prevents unnecessary thread hops and re-dispatching. It also provides some"},{"type":"text","text":" "},{"type":"text","text":"testing benefits. If your effects are not responsible for their own scheduling, then in tests"},{"type":"text","text":" "},{"text":"all of the effects would run synchronously and immediately. You would not be able to test how","type":"text"},{"type":"text","text":" "},{"type":"text","text":"multiple in-flight effects interleave with each other and affect the state of your application."},{"text":" ","type":"text"},{"type":"text","text":"However, by leaving scheduling out of the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference","isActive":true},{"text":" we get to test these aspects of our effects","type":"text"},{"type":"text","text":" "},{"type":"text","text":"if we so desire, or we can ignore if we prefer. We have that flexibility."}]},{"anchor":"Thread-safety-checks","level":4,"type":"heading","text":"Thread safety checks"},{"inlineContent":[{"text":"The store performs some basic thread safety checks in order to help catch mistakes. Stores","type":"text"},{"type":"text","text":" "},{"type":"text","text":"constructed via the initializer "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/init(initialState:reducer:withDependencies:)","type":"reference","isActive":true},{"text":" are assumed","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to run only on the main thread, and so a check is executed immediately to make sure that is the"},{"type":"text","text":" "},{"type":"text","text":"case. Further, all actions sent to the store and all scopes (see "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","isActive":true},{"type":"text","text":")"},{"type":"text","text":" "},{"text":"of the store are also checked to make sure that work is performed on the main thread.","type":"text"}],"type":"paragraph"}]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"topicSections":[{"anchor":"Creating-a-store","title":"Creating a store","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/init(initialState:reducer:withDependencies:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StoreOf"]},{"title":"Accessing state","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/state-1qxwl","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/subscript(dynamicMember:)-655ef","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/withState(_:)"],"anchor":"Accessing-state"},{"anchor":"Sending-actions","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:animation:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:transaction:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StoreTask"],"title":"Sending actions"},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:fileID:filePath:line:column:)-3yvuf","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:fileID:filePath:line:column:)-2ym6k","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/case"],"anchor":"Scoping-stores","title":"Scoping stores"},{"anchor":"Combine-integration","title":"Combine integration","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StorePublisher"]},{"anchor":"Deprecated-interfaces","title":"Deprecated interfaces","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StoreDeprecations"]},{"title":"Instance Properties","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/state-20w4g","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/state-2wgiw"],"generated":true,"anchor":"Instance-Properties"},{"generated":true,"title":"Default Implementations","anchor":"Default-Implementations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/CustomDebugStringConvertible-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/Equatable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/Hashable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/Identifiable-Implementations"]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","interfaceLanguage":"swift"},"kind":"symbol","abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"text":" ","type":"text"},{"type":"text","text":"around to views that need to interact with the application."}],"sections":[],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/store"]}],"schemaVersion":{"minor":3,"major":0,"patch":0},"relationshipsSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/11Observation10ObservableP","doc:\/\/ComposableArchitecture\/10Perception11PerceptibleP","doc:\/\/ComposableArchitecture\/s8CopyableP","doc:\/\/ComposableArchitecture\/s28CustomDebugStringConvertibleP","doc:\/\/ComposableArchitecture\/SQ","doc:\/\/ComposableArchitecture\/SH","doc:\/\/ComposableArchitecture\/s12IdentifiableP","doc:\/\/ComposableArchitecture\/s8SendableP"],"title":"Conforms To","kind":"relationships","type":"conformsTo"}],"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState"],"anchor":"State-management","generated":true,"title":"State management"}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/StoreOf":{"title":"StoreOf","fragments":[{"text":"typealias","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StoreOf","kind":"identifier"}],"abstract":[{"text":"A convenience type alias for referring to a store of a given reducer’s domain.","type":"text"}],"kind":"symbol","role":"symbol","url":"\/documentation\/composablearchitecture\/storeof","navigatorTitle":[{"kind":"identifier","text":"StoreOf"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StoreOf","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/subscript(dynamicMember:)-655ef":{"title":"subscript(dynamicMember:)","role":"symbol","fragments":[{"text":"subscript","kind":"keyword"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"text":">(","kind":"text"},{"text":"dynamicMember","kind":"externalParam"},{"text":" _: ","kind":"text"},{"text":"KeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"text":"Value","kind":"typeIdentifier"},{"text":">) -> ","kind":"text"},{"kind":"typeIdentifier","text":"Value"}],"type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture\/store\/subscript(dynamicmember:)-655ef","abstract":[],"conformance":{"constraints":[{"code":"State","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"ObservableState","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/subscript(dynamicMember:)-655ef"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/send(_:animation:)":{"kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"animation"},{"text":": ","kind":"text"},{"text":"Animation","kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI9AnimationV"},{"text":"?) -> ","kind":"text"},{"text":"StoreTask","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture9StoreTaskV"}],"url":"\/documentation\/composablearchitecture\/store\/send(_:animation:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:animation:)","type":"topic","role":"symbol","title":"send(_:animation:)","abstract":[{"type":"text","text":"Sends an action to the store with a given animation."}]},"doc://ComposableArchitecture/10Perception11PerceptibleP":{"type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/10Perception11PerceptibleP","title":"Perception.Perceptible"},"https://github.com/pointfreeco/combine-schedulers/blob/main/Sources/CombineSchedulers/UIScheduler.swift":{"title":"UIScheduler","url":"https:\/\/github.com\/pointfreeco\/combine-schedulers\/blob\/main\/Sources\/CombineSchedulers\/UIScheduler.swift","type":"link","identifier":"https:\/\/github.com\/pointfreeco\/combine-schedulers\/blob\/main\/Sources\/CombineSchedulers\/UIScheduler.swift","titleInlineContent":[{"text":"UIScheduler","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"title":"Effect","navigatorTitle":[{"kind":"identifier","text":"Effect"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","abstract":[],"kind":"symbol","url":"\/documentation\/composablearchitecture\/effect","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Effect"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/state-1qxwl":{"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"state","kind":"identifier"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"State"}],"url":"\/documentation\/composablearchitecture\/store\/state-1qxwl","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/state-1qxwl","role":"symbol","title":"state","type":"topic","abstract":[{"text":"Direct access to state in the store when ","type":"text"},{"code":"State","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState","isActive":true,"type":"reference"},{"text":".","type":"text"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"State"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"ObservableState"},{"text":".","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:fileID:filePath:line:column:)-3yvuf":{"abstract":[{"type":"text","text":"Scopes the store to optional child state and actions."}],"title":"scope(state:action:fileID:filePath:line:column:)","conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"State"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"ObservableState"},{"type":"text","text":"."}]},"url":"\/documentation\/composablearchitecture\/store\/scope(state:action:fileid:filepath:line:column:)-3yvuf","kind":"symbol","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"scope"},{"text":"<","kind":"text"},{"text":"ChildState","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"ChildAction"},{"text":">(","kind":"text"},{"text":"state","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s7KeyPathC","text":"KeyPath","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"ChildState","kind":"typeIdentifier"},{"text":"?>, ","kind":"text"},{"kind":"externalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"text":", ","kind":"text"},{"text":"ChildAction","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"filePath","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"text":"UInt","preciseIdentifier":"s:Su","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC","kind":"typeIdentifier","text":"Store"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ChildState"},{"text":", ","kind":"text"},{"text":"ChildAction","kind":"typeIdentifier"},{"text":">?","kind":"text"}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:fileID:filePath:line:column:)-3yvuf"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"type":"topic","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"text":"s should be executed later by the store, if any.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"url":"\/documentation\/composablearchitecture\/reducer","title":"Reducer","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Reducer","kind":"identifier"}]},"doc://ComposableArchitecture/s8SendableP":{"title":"Swift.Sendable","identifier":"doc:\/\/ComposableArchitecture\/s8SendableP","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/case":{"url":"\/documentation\/composablearchitecture\/store\/case","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"code":"State","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"CaseReducerState","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"Action"},{"type":"text","text":" is "},{"type":"codeVoice","code":"State.StateReducer.Action"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]},"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"`case`"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"State"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture16CaseReducerStateP0eD0Qa","text":"StateReducer","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"CaseScope","preciseIdentifier":"s:22ComposableArchitecture11CaseReducerP0C5ScopeQa","kind":"typeIdentifier"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/case","type":"topic","abstract":[{"text":"A destructurable view of a store on a collection of cases.","type":"text"}],"role":"symbol","title":"case"},"doc://ComposableArchitecture/SH":{"title":"Swift.Hashable","identifier":"doc:\/\/ComposableArchitecture\/SH","type":"unresolvable"},"doc://ComposableArchitecture/SQ":{"title":"Swift.Equatable","identifier":"doc:\/\/ComposableArchitecture\/SQ","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/Identifiable-Implementations":{"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/Identifiable-Implementations","type":"topic","kind":"article","url":"\/documentation\/composablearchitecture\/store\/identifiable-implementations","role":"collectionGroup","title":"Identifiable Implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/CustomDebugStringConvertible-Implementations":{"url":"\/documentation\/composablearchitecture\/store\/customdebugstringconvertible-implementations","abstract":[],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/CustomDebugStringConvertible-Implementations","kind":"article","title":"CustomDebugStringConvertible Implementations","role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/send(_:transaction:)":{"url":"\/documentation\/composablearchitecture\/store\/send(_:transaction:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"send","kind":"identifier"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"text":"transaction","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Transaction","preciseIdentifier":"s:7SwiftUI11TransactionV"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture9StoreTaskV","kind":"typeIdentifier","text":"StoreTask"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:transaction:)","kind":"symbol","abstract":[{"type":"text","text":"Sends an action to the store with a given transaction."}],"title":"send(_:transaction:)","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/state-20w4g":{"conformance":{"constraints":[{"type":"codeVoice","code":"State"},{"type":"text","text":" conforms to "},{"code":"ObservableState","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"State"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":", "},{"type":"codeVoice","code":"State"},{"type":"text","text":" conforms to "},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"State"},{"text":" is ","type":"text"},{"code":"Action.ViewAction.State","type":"codeVoice"},{"type":"text","text":", "},{"code":"Action","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"ViewAction","type":"codeVoice"},{"text":", and ","type":"text"},{"type":"codeVoice","code":"Action.ViewAction"},{"text":" conforms to ","type":"text"},{"code":"BindableAction","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"state","kind":"identifier"},{"text":": ","kind":"text"},{"text":"State","kind":"typeIdentifier"}],"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/state-20w4g","type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture\/store\/state-20w4g","role":"symbol","title":"state"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:fileID:filePath:line:column:)-2ym6k":{"type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"scope"},{"text":"<","kind":"text"},{"text":"ElementID","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"ElementState"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"ElementAction"},{"kind":"text","text":">("},{"text":"state","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s7KeyPathC","text":"KeyPath","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"text":", ","kind":"text"},{"text":"IdentifiedArray","kind":"typeIdentifier","preciseIdentifier":"s:21IdentifiedCollections0A5ArrayV"},{"kind":"text","text":"<"},{"text":"ElementID","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ElementState"},{"text":">>, ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"CaseKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture16IdentifiedActionO","text":"IdentifiedAction"},{"kind":"text","text":"<"},{"text":"ElementID","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ElementAction"},{"text":">>, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"filePath","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"RandomAccessCollection","preciseIdentifier":"s:Sk"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ElementState"},{"text":", ","kind":"text"},{"text":"ElementAction","kind":"typeIdentifier"},{"text":">>\n","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:fileID:filePath:line:column:)-2ym6k","abstract":[{"text":"Scopes the store of an identified collection to a collection of stores.","type":"text"}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"code":"State","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"ObservableState"},{"type":"text","text":"."}]},"role":"symbol","title":"scope(state:action:fileID:filePath:line:column:)","kind":"symbol","url":"\/documentation\/composablearchitecture\/store\/scope(state:action:fileid:filepath:line:column:)-2ym6k"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StoreDeprecations":{"title":"Deprecations","abstract":[{"type":"text","text":"Review unsupported store APIs and their replacements."}],"kind":"article","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/storedeprecations","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StoreDeprecations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/Equatable-Implementations":{"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/Equatable-Implementations","type":"topic","kind":"article","url":"\/documentation\/composablearchitecture\/store\/equatable-implementations","role":"collectionGroup","title":"Equatable Implementations"},"doc://ComposableArchitecture/s12IdentifiableP":{"identifier":"doc:\/\/ComposableArchitecture\/s12IdentifiableP","type":"unresolvable","title":"Swift.Identifiable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharingState":{"type":"topic","kind":"article","title":"Sharing state","url":"\/documentation\/composablearchitecture\/sharingstate","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState","abstract":[{"text":"Learn techniques for sharing state throughout many parts of your application, and how to persist","type":"text"},{"text":" ","type":"text"},{"text":"data to user defaults, the file system, and other external mediums.","type":"text"}],"role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/send(_:)":{"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:)","type":"topic","abstract":[{"text":"Sends an action to the store.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:22ComposableArchitecture9StoreTaskV","text":"StoreTask","kind":"typeIdentifier"}],"role":"symbol","title":"send(_:)","url":"\/documentation\/composablearchitecture\/store\/send(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-90255":{"title":"scope(state:action:)","type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-90255","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"scope","kind":"identifier"},{"kind":"text","text":"<"},{"text":"ChildState","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ChildAction"},{"text":">(","kind":"text"},{"text":"state","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC","text":"KeyPath"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"text":">, ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ChildAction"},{"text":">) -> ","kind":"text"},{"text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":", "},{"text":"ChildAction","kind":"typeIdentifier"},{"kind":"text","text":">"}],"abstract":[{"text":"Scopes the store to one that exposes child state and actions.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/init(initialState:reducer:withDependencies:)":{"abstract":[{"type":"text","text":"Initializes a store from an initial state and a reducer."}],"role":"symbol","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/init(initialState:reducer:withDependencies:)","type":"topic","title":"init(initialState:reducer:withDependencies:)","url":"\/documentation\/composablearchitecture\/store\/init(initialstate:reducer:withdependencies:)","fragments":[{"kind":"keyword","text":"convenience"},{"text":" ","kind":"text"},{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"R"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"initialState"},{"text":": ","kind":"text"},{"text":"@autoclosure ","kind":"attribute"},{"kind":"text","text":"() -> "},{"kind":"typeIdentifier","text":"R"},{"text":".","kind":"text"},{"text":"State","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"reducer"},{"text":": () -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"withDependencies"},{"text":": ((","kind":"text"},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"preciseIdentifier":"s:12Dependencies16DependencyValuesV","text":"DependencyValues","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Void","preciseIdentifier":"s:s4Voida"},{"text":")?)","kind":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StorePublisher":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StorePublisher","type":"topic","abstract":[{"type":"text","text":"A publisher of store state."}],"title":"StorePublisher","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"StorePublisher","kind":"identifier"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/storepublisher","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"StorePublisher"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/withState(_:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withState","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"R"},{"text":">((","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"text":") -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"R"}],"abstract":[{"type":"text","text":"Calls the given closure with a snapshot of the current state of the store."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/withState(_:)","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/store\/withstate(_:)","role":"symbol","title":"withState(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservableState":{"role":"symbol","abstract":[],"url":"\/documentation\/composablearchitecture\/observablestate","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ObservableState"}],"navigatorTitle":[{"text":"ObservableState","kind":"identifier"}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState","title":"ObservableState","type":"topic"},"doc://ComposableArchitecture/s8CopyableP":{"identifier":"doc:\/\/ComposableArchitecture\/s8CopyableP","type":"unresolvable","title":"Swift.Copyable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","kind":"symbol","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"url":"\/documentation\/composablearchitecture\/store","title":"Store","navigatorTitle":[{"kind":"identifier","text":"Store"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"kind":"symbol"},"doc://ComposableArchitecture/11Observation10ObservableP":{"identifier":"doc:\/\/ComposableArchitecture\/11Observation10ObservableP","type":"unresolvable","title":"Observation.Observable"},"doc://ComposableArchitecture/s28CustomDebugStringConvertibleP":{"identifier":"doc:\/\/ComposableArchitecture\/s28CustomDebugStringConvertibleP","type":"unresolvable","title":"Swift.CustomDebugStringConvertible"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StoreTask":{"type":"topic","kind":"symbol","title":"StoreTask","role":"symbol","url":"\/documentation\/composablearchitecture\/storetask","abstract":[{"text":"The type returned from ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:)"},{"text":" that represents the lifecycle of the effect","type":"text"},{"type":"text","text":" "},{"type":"text","text":"started from sending an action."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StoreTask","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"StoreTask"}],"navigatorTitle":[{"text":"StoreTask","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/state-2wgiw":{"conformance":{"constraints":[{"code":"State","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"ObservableState","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"State"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":", "},{"type":"codeVoice","code":"State"},{"text":" conforms to ","type":"text"},{"code":"Sendable","type":"codeVoice"},{"type":"text","text":", "},{"type":"codeVoice","code":"State"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"Action.State"},{"text":", and ","type":"text"},{"code":"Action","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"BindableAction","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"state"},{"text":": ","kind":"text"},{"text":"State","kind":"typeIdentifier"}],"abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/state-2wgiw","kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/store\/state-2wgiw","role":"symbol","title":"state"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/Hashable-Implementations":{"url":"\/documentation\/composablearchitecture\/store\/hashable-implementations","kind":"article","role":"collectionGroup","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/Hashable-Implementations","abstract":[],"title":"Hashable Implementations"}}}