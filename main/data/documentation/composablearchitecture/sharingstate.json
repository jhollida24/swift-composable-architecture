{"schemaVersion":{"patch":0,"minor":3,"major":0},"topicSections":[{"title":"Essentials","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared"],"anchor":"Essentials"},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AppStorageKey","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/FileStorageKey","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/InMemoryKey"],"anchor":"Persistence-strategies","title":"Persistence strategies"},{"anchor":"Custom-persistence","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceKey"],"title":"Custom persistence"},{"anchor":"Read-only-persistence","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharedReader","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey"],"title":"Read-only persistence"},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceKeyDefault"],"anchor":"Default-values","title":"Default values"}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"]]},"variants":[{"paths":["\/documentation\/composablearchitecture\/sharingstate"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState","interfaceLanguage":"swift"},"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"Overview","type":"heading","anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"Sharing state is the process of letting many features have access to the same data so that when any","type":"text"},{"type":"text","text":" "},{"type":"text","text":"feature makes a change to this data it is instantly visible to every other feature. Such sharing can"},{"text":" ","type":"text"},{"text":"be really handy, but also does not play nicely with value types, which are copied rather than","type":"text"},{"type":"text","text":" "},{"type":"text","text":"shared. Because the Composable Architecture highly prefers modeling domains with value types rather"},{"type":"text","text":" "},{"text":"than reference types, sharing state can be tricky.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is why the library comes with a few tools for sharing state with many parts of your"},{"type":"text","text":" "},{"type":"text","text":"application. There are two main kinds of shared state in the library: explicitly passed state and"},{"type":"text","text":" "},{"text":"persisted state. And there are 3 persistence strategies shipped with the library:","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"overridingTitle":"in-memory","overridingTitleInlineContent":[{"type":"text","text":"in-memory"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/inMemory(_:)"},{"type":"text","text":","},{"type":"text","text":" "},{"overridingTitleInlineContent":[{"type":"text","text":"user defaults"}],"overridingTitle":"user defaults","type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/appStorage(_:)-4l5b","isActive":true},{"text":", and","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:decoder:encoder:)","overridingTitleInlineContent":[{"type":"text","text":"file storage"}],"isActive":true,"type":"reference","overridingTitle":"file storage"},{"text":". You can also implement","type":"text"},{"type":"text","text":" "},{"type":"text","text":"your own persistence strategy if you want to use something other than user defaults or the file"},{"text":" ","type":"text"},{"type":"text","text":"system, such as SQLite."}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"#Source-of-truth"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Explicit-shared-state"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Persisted-shared-state","isActive":true,"type":"reference"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"#In-memory"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"#User-defaults","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"#File-storage","type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#Custom-persistence","isActive":true}]}]}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"#Observing-changes-to-shared-state"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"#Initialization-rules"}]}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"#Deriving-shared-state","type":"reference"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"#Testing"}]},{"items":[{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"#Testing-when-using-persistence"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Testing-when-using-custom-persistence-strategies","isActive":true,"type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#Overriding-shared-state-in-tests","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#UI-Testing","type":"reference","isActive":true}]}]},{"content":[{"inlineContent":[{"isActive":true,"identifier":"#Testing-tips","type":"reference"}],"type":"paragraph"}]}],"type":"unorderedList"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Read-only-shared-state"}]}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"#Type-safe-keys"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"#Concurrent-mutations-to-shared-state"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"#Shared-state-in-pre-observation-apps"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#Gotchas-of-Shared","isActive":true}]}]}]},{"type":"heading","text":"“Source of truth”","level":2,"anchor":"Source-of-truth"},{"type":"paragraph","inlineContent":[{"type":"text","text":"First a quick discussion on defining exactly what “shared state” is. A common concept thrown around"},{"type":"text","text":" "},{"text":"in architectural discussions is “single source of truth.” This is the idea that the complete state","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of an application, even its navigation, can be driven off a single piece of data. It’s a great idea,"},{"type":"text","text":" "},{"text":"in theory, but in practice it can be quite difficult to completely embrace.","type":"text"}]},{"inlineContent":[{"text":"First of all, a ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"single"}]},{"text":" piece of data to drive ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"all","type":"text"}]},{"type":"text","text":" of application state is just not feasible."},{"text":" ","type":"text"},{"text":"There is a lot of state in an application that is fine to be local to a view and does not need","type":"text"},{"type":"text","text":" "},{"type":"text","text":"global representation. For example, the state of whether a button is being pressed is probably fine"},{"type":"text","text":" "},{"type":"text","text":"to reside privately inside the button."}],"type":"paragraph"},{"inlineContent":[{"text":"And second, applications typically do not have a ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"single","type":"text"}]},{"type":"text","text":" source of truth. That is far too"},{"type":"text","text":" "},{"text":"simplistic. If your application loads data from an API, or from disk, or from user defaults, then","type":"text"},{"type":"text","text":" "},{"text":"the “truth” for that data does not lie in your application. It lies externally.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In reality, there are "},{"type":"emphasis","inlineContent":[{"type":"text","text":"two"}]},{"type":"text","text":" sources of “truth” in any application. There is the state the"},{"type":"text","text":" "},{"type":"text","text":"application needs to execute its logic and behavior. This is the kind of state that determines if a"},{"type":"text","text":" "},{"text":"button is enabled or disabled, drives navigation such as sheets and drill-downs, and handles","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"validation of forms. Such state only makes sense for the application."}]},{"type":"paragraph","inlineContent":[{"text":"Then there is a second source of “truth” in an application, which is the data that lies in some","type":"text"},{"type":"text","text":" "},{"text":"external system and needs to be loaded into the application. Such state is best modeled as a","type":"text"},{"type":"text","text":" "},{"text":"dependency or using the shared state tools discussed in this article.","type":"text"}]},{"anchor":"Explicit-shared-state","text":"Explicit shared state","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"This is the simplest kind of shared state to get started with. It allows you to share state amongst"},{"type":"text","text":" "},{"text":"many features without any persistence. The data is only held in memory, and will be cleared out the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"next time the application is run."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"To share data in this style, use the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","type":"reference","overridingTitle":"@Shared","overridingTitleInlineContent":[{"code":"@Shared","type":"codeVoice"}]},{"text":" property wrapper with no arguments.","type":"text"},{"text":" ","type":"text"},{"text":"For example, suppose you have a feature that holds a count and you want to be able to hand a shared","type":"text"},{"type":"text","text":" "},{"type":"text","text":"reference to that count to other features. You can do so by holding onto a "},{"code":"@Shared","type":"codeVoice"},{"text":" property in","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the feature’s state:"}]},{"type":"codeListing","code":["@Reducer","struct ParentFeature {","  @ObservableState","  struct State {","    @Shared var count: Int","    \/\/ Other properties","  }","  \/\/ ...","}"],"syntax":"swift"},{"style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It is not possible to provide a default to a "},{"type":"codeVoice","code":"@Shared"},{"text":" value. It must be passed to the","type":"text"},{"text":" ","type":"text"},{"text":"feature’s state from the outside. See ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState#Initialization-rules","isActive":true,"type":"reference"},{"type":"text","text":" for more"},{"type":"text","text":" "},{"type":"text","text":"information about how to initialize types that use "},{"type":"codeVoice","code":"@Shared"},{"text":".","type":"text"}]}],"name":"Important","type":"aside"},{"inlineContent":[{"type":"text","text":"Then suppose that this feature can present a child feature that wants access to this shared "},{"code":"count","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"value. It too would hold onto a "},{"type":"codeVoice","code":"@Shared"},{"text":" property to a count:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct ChildFeature {","  @ObservableState","  struct State {","    @Shared var count: Int","    \/\/ Other properties","  }","  \/\/ ...","}"]},{"inlineContent":[{"text":"When the parent features creates the child feature’s state, it can pass a ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"reference"}]},{"text":" to the shared","type":"text"},{"type":"text","text":" "},{"text":"count rather than the actual count value by using the ","type":"text"},{"code":"$count","type":"codeVoice"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/projectedValue"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["case .presentButtonTapped:","  state.child = ChildFeature.State(count: state.$count)","  \/\/ ..."],"type":"codeListing"},{"inlineContent":[{"text":"Now any mutation the ","type":"text"},{"code":"ChildFeature","type":"codeVoice"},{"type":"text","text":" makes to its "},{"type":"codeVoice","code":"count"},{"text":" will be instantly made to the","type":"text"},{"type":"text","text":" "},{"code":"ParentFeature","type":"codeVoice"},{"type":"text","text":"’s count too."}],"type":"paragraph"},{"anchor":"Persisted-shared-state","level":2,"type":"heading","text":"Persisted shared state"},{"inlineContent":[{"type":"text","text":"Explicitly shared state discussed above is a nice, lightweight way to share a piece of data with"},{"type":"text","text":" "},{"type":"text","text":"many parts of your application. However, sometimes you want to share state with the entire"},{"type":"text","text":" "},{"text":"application without having to pass it around explicitly. One can do this by passing a","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceKey","isActive":true},{"type":"text","text":" to the "},{"code":"@Shared","type":"codeVoice"},{"text":" property wrapper, and the library comes with three persistence","type":"text"},{"type":"text","text":" "},{"type":"text","text":"strategies, as well as the ability to create custom persistence strategies."}],"type":"paragraph"},{"anchor":"In-memory","level":4,"type":"heading","text":"In-memory"},{"type":"paragraph","inlineContent":[{"text":"This is the simplest persistence strategy in that it doesn’t actually persist at all. It keeps","type":"text"},{"type":"text","text":" "},{"text":"the data in memory and makes it available to every part of the application, but when the app is","type":"text"},{"type":"text","text":" "},{"type":"text","text":"relaunched the data will be reset back to its default."}]},{"inlineContent":[{"type":"text","text":"It can be used by passing "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/inMemory(_:)"},{"text":" to the ","type":"text"},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" property wrapper."},{"type":"text","text":" "},{"text":"For example, suppose you want to share an integer count value with the entire application so that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"any feature can read from and write to the integer. This can be done like so:"}],"type":"paragraph"},{"type":"codeListing","code":["@Reducer","struct ChildFeature {","  @ObservableState","  struct State {","    @Shared(.inMemory(\"count\")) var count = 0","    \/\/ Other properties","  }","  \/\/ ...","}"],"syntax":"swift"},{"name":"Note","type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":"When using a persistence strategy with "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" you must provide a default value, which is"},{"type":"text","text":" "},{"text":"used for the first access of the shared state.","type":"text"}],"type":"paragraph"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Now any part of the application can read from and write to this state, and features will never"},{"type":"text","text":" "},{"text":"get out of sync.","type":"text"}]},{"anchor":"User-defaults","level":4,"text":"User defaults","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"If you would like to persist your shared value across application launches, then you can use the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/appStorage(_:)-4l5b","isActive":true},{"text":" strategy with ","type":"text"},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":" in order to automatically"},{"text":" ","type":"text"},{"text":"persist any changes to the value to user defaults. It works similarly to in-memory sharing discussed","type":"text"},{"type":"text","text":" "},{"text":"above. It requires a key to store the value in user defaults, as well as a default value that will","type":"text"},{"type":"text","text":" "},{"text":"be used when there is no value in the user defaults:","type":"text"}]},{"syntax":"swift","code":["@Shared(.appStorage(\"count\")) var count = 0"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"That small change will guarantee that all changes to ","type":"text"},{"type":"codeVoice","code":"count"},{"text":" are persisted and will be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"automatically loaded the next time the application launches."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This form of persistence only works for simple data types because that is what works best with"},{"type":"text","text":" "},{"type":"codeVoice","code":"UserDefaults"},{"text":". This includes strings, booleans, integers, doubles, URLs, data, and more. If you","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"need to store more complex data, such as custom data types serialized to JSON, then you will want"},{"text":" ","type":"text"},{"type":"text","text":"to use the "},{"overridingTitle":".fileStorage","isActive":true,"overridingTitleInlineContent":[{"type":"codeVoice","code":".fileStorage"}],"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState#File-storage"},{"text":" strategy or a","type":"text"},{"text":" ","type":"text"},{"isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"custom persistence"}],"overridingTitle":"custom persistence","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState#Custom-persistence","type":"reference"},{"type":"text","text":" strategy."}]},{"type":"heading","anchor":"File-storage","text":"File storage","level":4},{"inlineContent":[{"text":"If you would like to persist your shared value across application launches, and your value is","type":"text"},{"type":"text","text":" "},{"type":"text","text":"complex (such as a custom data type), then you can use the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:decoder:encoder:)","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"strategy with "},{"code":"@Shared","type":"codeVoice"},{"text":". It automatically persists any changes to the file system.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"It works similarly to the in-memory sharing discussed above, but it requires a URL to store the data","type":"text"},{"type":"text","text":" "},{"type":"text","text":"on disk, as well as a default value that will be used when there is no data in the file system:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@Shared(.fileStorage(URL(\/* ... *\/)) var users: [User] = []"]},{"inlineContent":[{"type":"text","text":"This strategy works by serializing your value to JSON to save to disk, and then deserializing JSON"},{"text":" ","type":"text"},{"type":"text","text":"when loading from disk. For this reason the value held in "},{"type":"codeVoice","code":"@Shared(.fileStorage(…))"},{"type":"text","text":" must conform to"},{"type":"text","text":" "},{"type":"codeVoice","code":"Codable"},{"text":".","type":"text"}],"type":"paragraph"},{"level":4,"type":"heading","anchor":"Custom-persistence","text":"Custom persistence"},{"type":"paragraph","inlineContent":[{"text":"It is possible to define all new persistence strategies for the times that user defaults or JSON","type":"text"},{"type":"text","text":" "},{"type":"text","text":"files are not sufficient. To do so, define a type that conforms to the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceKey"},{"type":"text","text":" protocol:"}]},{"code":["public final class CustomPersistenceKey: PersistenceKey {","  \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"And then define a static function on the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceKey","isActive":true},{"type":"text","text":" protocol for creating your new"},{"type":"text","text":" "},{"type":"text","text":"persistence strategy:"}],"type":"paragraph"},{"code":["extension PersistenceReaderKey {","  public static func custom<Value>(\/*...*\/) -> Self","  where Self == CustomPersistence<Value> {","    CustomPersistence(\/* ... *\/)","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"With those steps done you can make use of the strategy in the same way one does for"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/appStorage(_:)-4l5b","isActive":true},{"type":"text","text":" and "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:decoder:encoder:)","isActive":true},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["@Shared(.custom(\/* ... *\/)) var myValue: Value"],"type":"codeListing"},{"inlineContent":[{"text":"The ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceKey","type":"reference","isActive":true},{"type":"text","text":" protocol represents loading from "},{"type":"emphasis","inlineContent":[{"text":"and","type":"text"}]},{"type":"text","text":" saving to some external storage,"},{"type":"text","text":" "},{"text":"such as the file system or user defaults. Sometimes saving is not a valid operation for the external","type":"text"},{"type":"text","text":" "},{"type":"text","text":"system, such as if your server holds onto a remote configuration file that your app uses to"},{"type":"text","text":" "},{"text":"customize its appearance or behavior. In those situations you can conform to the","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey","isActive":true},{"type":"text","text":" protocol. See "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState#Read-only-shared-state","type":"reference","isActive":true},{"text":" for more","type":"text"},{"type":"text","text":" "},{"text":"information.","type":"text"}],"type":"paragraph"},{"level":2,"type":"heading","text":"Observing changes to shared state","anchor":"Observing-changes-to-shared-state"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","isActive":true,"type":"reference"},{"text":" property wrapper exposes a ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/publisher","type":"reference"},{"text":" property so that you can observe","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"changes to the reference from any part of your application. For example, if some feature in your"},{"type":"text","text":" "},{"type":"text","text":"app wants to listen for changes to some shared "},{"code":"count","type":"codeVoice"},{"type":"text","text":" value, then it can introduce an "},{"code":"onAppear","type":"codeVoice"},{"type":"text","text":" "},{"text":"action that kicks off a long-living effect that subscribes to changes of ","type":"text"},{"type":"codeVoice","code":"count"},{"type":"text","text":":"}]},{"code":["case .onAppear:","  return .publisher {","    state.$count.publisher","      .map(Action.countUpdated)","  }","","case .countUpdated(let count):","  \/\/ Do something with count","  return .none"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that you will have to be careful for features that both hold onto shared state and subscribe"},{"type":"text","text":" "},{"text":"to changes to that state. It is possible to introduce an infinite loop if you do something like","type":"text"},{"type":"text","text":" "},{"type":"text","text":"this:"}]},{"type":"codeListing","syntax":"swift","code":["case .onAppear:","  return .publisher {","    state.$count.publisher","      .map(Action.countUpdated)","  }","","case .countUpdated(let count):","  state.count = count + 1","  return .none"]},{"inlineContent":[{"text":"If ","type":"text"},{"code":"count","type":"codeVoice"},{"type":"text","text":" changes, then "},{"type":"codeVoice","code":"$count.publisher"},{"text":" emits, causing the ","type":"text"},{"code":"countUpdated","type":"codeVoice"},{"type":"text","text":" action to be sent,"},{"text":" ","type":"text"},{"type":"text","text":"causing the shared "},{"code":"count","type":"codeVoice"},{"type":"text","text":" to be mutated, causing "},{"code":"$count.publisher","type":"codeVoice"},{"type":"text","text":" to emit, and so on."}],"type":"paragraph"},{"level":2,"anchor":"Initialization-rules","text":"Initialization rules","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Because the state sharing tools use property wrappers there are special rules that must be followed"},{"text":" ","type":"text"},{"text":"when writing custom initializers for your types. These rules apply to ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"any","type":"text"}]},{"type":"text","text":" kind of property"},{"text":" ","type":"text"},{"text":"wrapper, including those that ship with vanilla SwiftUI (e.g. ","type":"text"},{"type":"codeVoice","code":"@State"},{"type":"text","text":", "},{"code":"@StateObject","type":"codeVoice"},{"text":", etc.),","type":"text"},{"text":" ","type":"text"},{"text":"but the rules can be quite confusing and so below we describe the various ways to initialize","type":"text"},{"type":"text","text":" "},{"type":"text","text":"shared state."}]},{"inlineContent":[{"type":"text","text":"It is common to need to provide a custom initializer to your feature’s"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","isActive":true},{"text":" type, especially when modularizing. When using","type":"text"},{"text":" ","type":"text"},{"overridingTitle":"@Shared","overridingTitleInlineContent":[{"code":"@Shared","type":"codeVoice"}],"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared"},{"text":" in your ","type":"text"},{"type":"codeVoice","code":"State"},{"type":"text","text":" that can become complicated."},{"text":" ","type":"text"},{"type":"text","text":"Depending on your exact situation you can do one of the following:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You are using non-persisted shared state (i.e. no argument is passed to "},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":"), and the"},{"text":" ","type":"text"},{"type":"text","text":"“source of truth” of the state lives with the parent feature. Then the initializer should take a"},{"type":"text","text":" "},{"code":"Shared","type":"codeVoice"},{"type":"text","text":" value and you can assign through the underscored property:"}]},{"code":["public struct State {","  @Shared public var count: Int","  \/\/ other fields","","  public init(count: Shared<Int>, \/* other fields *\/) {","    self._count = count","    \/\/ other assignments","  }","}"],"syntax":"swift","type":"codeListing"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You are using non-persisted shared state ("},{"type":"emphasis","inlineContent":[{"text":"i.e.","type":"text"}]},{"type":"text","text":" no argument is passed to "},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":"), and the"},{"type":"text","text":" "},{"type":"text","text":"“source of truth” of the state lives within the feature you are initializing. Then the initializer"},{"type":"text","text":" "},{"type":"text","text":"should take a plain, non-"},{"code":"Shared","type":"codeVoice"},{"text":" value and you construct the ","type":"text"},{"type":"codeVoice","code":"Shared"},{"text":" value in the initializer:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["public struct State {","  @Shared public var count: Int","  \/\/ other fields","","  public init(count: Int, \/* other fields *\/) {","    self._count = Shared(count)","    \/\/ other assignments","  }","}"]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You are using a persistence strategy with shared state ("},{"inlineContent":[{"type":"text","text":"e.g."}],"type":"emphasis"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/appStorage(_:)-4l5b","isActive":true},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:decoder:encoder:)"},{"type":"text","text":", "},{"type":"emphasis","inlineContent":[{"text":"etc.","type":"text"}]},{"type":"text","text":"),"},{"type":"text","text":" "},{"text":"then the initializer should take a plain, non-","type":"text"},{"type":"codeVoice","code":"Shared"},{"text":" value and you construct the ","type":"text"},{"type":"codeVoice","code":"Shared"},{"type":"text","text":" value in"},{"text":" ","type":"text"},{"type":"text","text":"the initializer using "},{"code":"Shared\/init(wrappedValue:_:fileID:line:)-512rh","type":"codeVoice"},{"type":"text","text":" which takes a"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceKey","type":"reference","isActive":true},{"type":"text","text":" as the second argument:"}]},{"type":"codeListing","syntax":"swift","code":["public struct State {","  @Shared public var count: Int","  \/\/ other fields","","  public init(count: Int, \/* other fields *\/) {","    self._count = Shared(wrappedValue: count, .appStorage(\"count\"))","    \/\/ other assignments","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The declaration of "},{"type":"codeVoice","code":"count"},{"type":"text","text":" can use "},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":" without an argument because the persistence"},{"text":" ","type":"text"},{"type":"text","text":"strategy is specified in the initializer."}]},{"style":"important","type":"aside","name":"Important","content":[{"inlineContent":[{"type":"text","text":"The value passed to this initializer is only used if the external storage does not"},{"type":"text","text":" "},{"type":"text","text":"already have a value. If a value exists in the storage then it is not used. In fact, the"},{"type":"text","text":" "},{"type":"codeVoice","code":"wrappedValue"},{"type":"text","text":" argument of "},{"type":"codeVoice","code":"Shared\/init(wrappedValue:_:fileID:line:)-512rh"},{"type":"text","text":" is an"},{"text":" ","type":"text"},{"type":"codeVoice","code":"@autoclosure"},{"type":"text","text":" so that it is not even evaluated if not used. For that reason you"},{"text":" ","type":"text"},{"type":"text","text":"may prefer to make the argument to the initializer an "},{"type":"codeVoice","code":"@autoclosure"},{"type":"text","text":" so that it too is evaluated"},{"text":" ","type":"text"},{"text":"only if actually used:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["public struct State {","  @Shared public var count: Int","  \/\/ other fields","","  public init(count: @autoclosure () -> Int, \/* other fields *\/) {","    self._count = Shared(wrappedValue: count(), .appStorage(\"count\"))","    \/\/ other assignments","  }","}"]}]}]}],"type":"unorderedList"},{"anchor":"Deriving-shared-state","level":2,"text":"Deriving shared state","type":"heading"},{"inlineContent":[{"text":"It is possible to derive shared state for sub-parts of an existing piece of shared state. For","type":"text"},{"type":"text","text":" "},{"type":"text","text":"example, suppose you have a multi-step signup flow that uses "},{"type":"codeVoice","code":"Shared<SignUpData>"},{"type":"text","text":" in order to share"},{"text":" ","type":"text"},{"text":"data between each screen. However, some screens may not need all of ","type":"text"},{"code":"SignUpData","type":"codeVoice"},{"text":", but instead just a","type":"text"},{"type":"text","text":" "},{"text":"small part. The phone number confirmation screen may only need access to ","type":"text"},{"type":"codeVoice","code":"signUpData.phoneNumber"},{"type":"text","text":","},{"type":"text","text":" "},{"text":"and so that feature can hold onto just ","type":"text"},{"code":"Shared<String>","type":"codeVoice"},{"type":"text","text":" to express this fact:"}],"type":"paragraph"},{"code":["@Reducer ","struct PhoneNumberFeature { ","  struct State {","    @Shared var phoneNumber: String","  }","  \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Then, when the parent feature constructs the ","type":"text"},{"code":"PhoneNumberFeature","type":"codeVoice"},{"text":" it can derive a small piece of","type":"text"},{"text":" ","type":"text"},{"text":"shared state from ","type":"text"},{"type":"codeVoice","code":"Shared<SignUpData>"},{"type":"text","text":" to pass along:"}],"type":"paragraph"},{"code":["case .nextButtonTapped:","  state.path.append(","    PhoneNumberFeature.State(phoneNumber: state.$signUpData.phoneNumber)","  )"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Here we are using the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/projectedValue","isActive":true},{"type":"text","text":" value using "},{"type":"codeVoice","code":"$"},{"text":" syntax, ","type":"text"},{"type":"codeVoice","code":"$signUpData"},{"text":", and then","type":"text"},{"type":"text","text":" "},{"text":"further dot-chaining onto that projection to derive a ","type":"text"},{"type":"codeVoice","code":"Shared<String>"},{"type":"text","text":". This can be a powerful way"},{"text":" ","type":"text"},{"text":"for features to hold onto only the bare minimum of shared state it needs to do its job.","type":"text"}]},{"inlineContent":[{"text":"It can be instructive to think of ","type":"text"},{"type":"codeVoice","code":"@Shared"},{"text":" as the Composable Architecture analogue of ","type":"text"},{"code":"@Bindable","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"in vanilla SwiftUI. You use it to express that the actual “source of truth” of the value lies"},{"type":"text","text":" "},{"text":"elsewhere, but you want to be able to read its most current value and write to it.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This also works for persistence strategies. If a parent feature holds onto a "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" piece of"},{"text":" ","type":"text"},{"text":"state with a persistence strategy:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct ParentFeature {","  struct State {","    @Shared(.fileStorage(.currentUser)) var currentUser","  }","  \/\/ ...","}"]},{"inlineContent":[{"type":"text","text":"…and a child feature wants access to just a shared "},{"inlineContent":[{"text":"piece","type":"text"}],"type":"emphasis"},{"type":"text","text":" of "},{"type":"codeVoice","code":"currentUser"},{"text":", such as their name,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"then they can do so by holding onto a simple, unadorned "},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@Reducer","struct ChildFeature {","  struct State {","    @Shared var currentUserName: String","  }","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"text":"And then the parent can pass along ","type":"text"},{"code":"$currentUser.name","type":"codeVoice"},{"type":"text","text":" to the child feature when constructing its"},{"text":" ","type":"text"},{"type":"text","text":"state:"}]},{"syntax":"swift","type":"codeListing","code":["case .editNameButtonTapped:","  state.destination = .editName(","    EditNameFeature(name: state.$currentUser.name)","  )"]},{"type":"paragraph","inlineContent":[{"text":"Any changes the child feature makes to its shared ","type":"text"},{"type":"codeVoice","code":"name"},{"type":"text","text":" will be automatically made to the parent’s"},{"type":"text","text":" "},{"type":"text","text":"shared "},{"code":"currentUser","type":"codeVoice"},{"text":", and further those changes will be automatically persisted thanks to the","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":".fileStorage"},{"type":"text","text":" persistence strategy used. This means the child feature gets to describe that it"},{"text":" ","type":"text"},{"type":"text","text":"needs access to shared state without describing the persistence strategy, and the parent can be"},{"type":"text","text":" "},{"text":"responsible for persisting and deriving shared state to pass to the child.","type":"text"}]},{"inlineContent":[{"type":"text","text":"If your shared state is a collection, and in particular an "},{"type":"codeVoice","code":"IdentifiedArray"},{"type":"text","text":", then we have another"},{"text":" ","type":"text"},{"text":"tool for deriving shared state to a particular element of the array. You can subscript into a","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","type":"reference","isActive":true},{"text":" collection with the ","type":"text"},{"type":"codeVoice","code":"[id:]"},{"type":"text","text":" subscript, and that will give a piece of optional shared"},{"text":" ","type":"text"},{"type":"text","text":"state (thanks to a dynamic member overload "},{"code":"Shared\/subscript(dynamicMember:)-7ibhr","type":"codeVoice"},{"type":"text","text":"), which you"},{"type":"text","text":" "},{"type":"text","text":"can then unwrap to turn into honest shared state:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["@Shared(.fileStorage(.todos)) var todos: IdentifiedArrayOf<Todo> = []","","guard let todo = $todos[id: todoID]","else { return }","todo \/\/ Shared<Todo>"]},{"inlineContent":[{"text":"There is another tool for deriving shared state, and it is the computed property ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/elements","isActive":true},{"type":"text","text":" "},{"type":"text","text":"that is defined on shared collections. It derives a collection of shared elements so that you can"},{"type":"text","text":" "},{"type":"text","text":"get access to a shared reference of just one particular element in a collection."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, it is only appropriate to use this in conjunction with "},{"type":"codeVoice","code":"ForEach"},{"text":" in order to derive a","type":"text"},{"text":" ","type":"text"},{"text":"shared reference for each element of a collection:","type":"text"}]},{"type":"codeListing","code":["struct State {","  @Shared(.fileStorage(.todos)) var todos: IdentifiedArrayOf<Todo> = []","  \/\/ ...","}","","\/\/ ...","","ForEach(store.$todos.elements) { $todo in","  NavigationLink(","    \/\/ $todo: Shared<Todo>","    \/\/  todo: Todo","    state: Path.State.todo(TodoFeature.State(todo: $todo))","  ) {","    Text(todo.title)","  }","}"],"syntax":"swift"},{"name":"Important","style":"important","content":[{"inlineContent":[{"type":"text","text":"We do not recommend using "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/elements","isActive":true},{"text":" outside of using it with ","type":"text"},{"type":"codeVoice","code":"ForEach"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"codeVoice","code":"List"},{"text":", and other SwiftUI views that take collections.","type":"text"}],"type":"paragraph"}],"type":"aside"},{"type":"heading","text":"Testing","anchor":"Testing","level":2},{"inlineContent":[{"type":"text","text":"Shared state behaves quite a bit different from the regular state held in Composable Architecture"},{"text":" ","type":"text"},{"type":"text","text":"features. It is capable of being changed by any part of the application, not just when an action is"},{"type":"text","text":" "},{"type":"text","text":"sent to the store, and it has reference semantics rather than value semantics. Typically references"},{"type":"text","text":" "},{"text":"cause serious problems with testing, especially exhaustive testing that the library prefers (see","type":"text"},{"text":" ","type":"text"},{"text":"doc:Testing","type":"text"},{"text":"), because references cannot be copied and so one cannot inspect the changes before and","type":"text"},{"type":"text","text":" "},{"text":"after an action is sent.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For this reason, the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","isActive":true},{"text":" property wrapper does extra work during testing to preserve a","type":"text"},{"type":"text","text":" "},{"text":"previous snapshot of the state so that one can still exhaustively assert on shared state, even","type":"text"},{"type":"text","text":" "},{"text":"though it is a reference.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For the most part, shared state can be tested just like any regular state held in your features. For"},{"type":"text","text":" "},{"type":"text","text":"example, consider the following simple counter feature that uses in-memory shared state for the"},{"type":"text","text":" "},{"type":"text","text":"count:"}]},{"syntax":"swift","type":"codeListing","code":["@Reducer ","struct Feature {","  struct State: Equatable {","    @Shared var count: Int","  }","  enum Action {","    case incrementButtonTapped","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .incrementButtonTapped:","        state.count += 1","        return .none","      }","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This feature can be tested in exactly the same way as when you are using non-shared state:"}]},{"type":"codeListing","syntax":"swift","code":["@Test","func increment() async {","  let store = TestStore(initialState: Feature.State(count: Shared(0))) {","    Feature()","  }","","  await store.send(.incrementButtonTapped) {","    $0.count = 1","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This test passes because we have described how the state changes. But even better, if we mutate the"},{"text":" ","type":"text"},{"code":"count","type":"codeVoice"},{"type":"text","text":" incorrectly:"}]},{"code":["@Test","func increment() async {","  let store = TestStore(initialState: Feature.State(count: Shared(0))) {","    Feature()","  }","","  await store.send(.incrementButtonTapped) {","    $0.count = 2","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"…we immediately get a test failure letting us know exactly what went wrong:"}]},{"type":"codeListing","syntax":null,"code":["❌ State was not expected to change, but a change occurred: …","","    − Feature.State(_count: 2)","    + Feature.State(_count: 1)","","(Expected: −, Actual: +)"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This works even though the "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" count is a reference type. The "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"text":" and ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","isActive":true},{"type":"text","text":" "},{"text":"type work in unison to snapshot the state before and after the action is sent, allowing us to still","type":"text"},{"type":"text","text":" "},{"type":"text","text":"assert in an exhaustive manner."}]},{"inlineContent":[{"type":"text","text":"However, exhaustively testing shared state is more complicated than testing non-shared state in"},{"type":"text","text":" "},{"text":"features. Shared state can be captured in effects and mutated directly, without ever sending an","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"action into system. This is in stark contrast to regular state, which can only ever be mutated when"},{"text":" ","type":"text"},{"type":"text","text":"sending an action."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, it is possible to alter the "},{"code":"incrementButtonTapped","type":"codeVoice"},{"text":" action so that it captures the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"shared state in an effect, and then increments from the effect:"}]},{"syntax":"swift","type":"codeListing","code":["case .incrementButtonTapped:","  return .run { [sharedCount = state.$count] _ in","    await sharedCount.withLock { $0 += 1 }","  }"]},{"inlineContent":[{"text":"The only reason this is possible is because ","type":"text"},{"code":"@Shared","type":"codeVoice"},{"text":" state is reference-like, and hence can","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"technically be mutated from anywhere."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"However, how does this affect testing? Since the ","type":"text"},{"type":"codeVoice","code":"count"},{"text":" is no longer incremented directly in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the reducer we can drop the trailing closure from the test store assertion:"}]},{"syntax":"swift","code":["@Test","func increment() async {","  let store = TestStore(initialState: SimpleFeature.State(count: Shared(0))) {","    SimpleFeature()","  }","  await store.send(.incrementButtonTapped)","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is technically correct, but we aren’t testing the behavior of the effect at all."}]},{"inlineContent":[{"text":"Luckily the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"},{"type":"text","text":" has our back. If you run this test you will immediately get a failure"},{"text":" ","type":"text"},{"text":"letting you know that the shared count was mutated but we did not assert on the changes:","type":"text"}],"type":"paragraph"},{"syntax":null,"code":["❌ Tracked changes to 'Shared<Int>@MyAppTests\/FeatureTests.swift:10' but failed to assert: …","","  − 0","  + 1","","(Before: −, After: +)","","Call 'Shared<Int>.assert' to exhaustively test these changes, or call 'skipChanges' to ignore them."],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"In order to get this test passing we have to explicitly assert on the shared counter state at","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the end of the test, which we can do using the "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/assert(_:fileID:file:line:column:)","type":"reference"},{"type":"text","text":" method:"}]},{"syntax":"swift","code":["@Test","func increment() async {","  let store = TestStore(initialState: SimpleFeature.State(count: Shared(0))) {","    SimpleFeature()","  }","  await store.send(.incrementButtonTapped)","  store.state.$count.assert {","    $0 = 1","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Now the test passes.","type":"text"}]},{"inlineContent":[{"type":"text","text":"So, even though the "},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":" type opens our application up to a little bit more uncertainty due"},{"text":" ","type":"text"},{"text":"to its reference semantics, it is still possible to get exhaustive test coverage on its changes.","type":"text"}],"type":"paragraph"},{"level":4,"type":"heading","anchor":"Testing-when-using-persistence","text":"Testing when using persistence"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is also possible to test when using one of the persistence strategies provided by the library,"},{"type":"text","text":" "},{"type":"text","text":"which are "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/appStorage(_:)-4l5b"},{"type":"text","text":" and"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:decoder:encoder:)"},{"text":". Typically persistence is difficult to test because the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"persisted data bleeds over from test to test, making it difficult to exhaustively prove how each"},{"text":" ","type":"text"},{"text":"test behaves in isolation.","type":"text"}]},{"inlineContent":[{"text":"But the ","type":"text"},{"type":"codeVoice","code":".appStorage"},{"type":"text","text":" and "},{"type":"codeVoice","code":".fileStorage"},{"text":" strategies do extra work to make sure that happens. By","type":"text"},{"text":" ","type":"text"},{"text":"default the ","type":"text"},{"type":"codeVoice","code":".appStorage"},{"type":"text","text":" strategy uses a non-persisting user defaults so that changes are not"},{"text":" ","type":"text"},{"type":"text","text":"actually persisted across test runs. And the "},{"type":"codeVoice","code":".fileStorage"},{"text":" strategy uses a mock file system so that","type":"text"},{"type":"text","text":" "},{"text":"changes to state are not actually persisted to the file system.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This means that if we altered the "},{"type":"codeVoice","code":"SimpleFeature"},{"text":" of the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState#Testing","isActive":true,"type":"reference"},{"text":" section above to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"use app storage:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["struct State: Equatable {","  @Shared(.appStorage(\"count\")) var count: Int","}"]},{"inlineContent":[{"text":"…then the test for this feature can be written in the same way as before and will still pass.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Testing when using custom persistence strategies","level":4,"anchor":"Testing-when-using-custom-persistence-strategies"},{"type":"paragraph","inlineContent":[{"text":"When creating your own custom persistence strategies you must careful to do so in a style that","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is amenable to testing. For example, the "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/appStorage(_:)-4l5b"},{"type":"text","text":" persistence"},{"type":"text","text":" "},{"type":"text","text":"strategy that comes with the library injects a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Dependencies\/DependencyValues\/defaultAppStorage","isActive":true},{"type":"text","text":" "},{"text":"dependency so that one can inject a custom ","type":"text"},{"code":"UserDefaults","type":"codeVoice"},{"type":"text","text":" in order to execute in a controlled"},{"text":" ","type":"text"},{"text":"environment. By default ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Dependencies\/DependencyValues\/defaultAppStorage"},{"type":"text","text":" uses a non-persisting"},{"text":" ","type":"text"},{"type":"text","text":"user defaults, but you can also customize it to use any kind of defaults."}]},{"inlineContent":[{"text":"Similarly the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:decoder:encoder:)","isActive":true,"type":"reference"},{"type":"text","text":" persistence strategy uses an internal"},{"type":"text","text":" "},{"text":"dependency for changing how files are written to the disk and loaded from disk. In tests the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"dependency will forgo any interaction with the file system and instead write data to a "},{"code":"[URL: Data]","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"dictionary, and load data from that dictionary. That emulates how the file system works, but without"},{"text":" ","type":"text"},{"type":"text","text":"persisting any data to the global file system, which can bleed over into other tests."}],"type":"paragraph"},{"anchor":"Overriding-shared-state-in-tests","type":"heading","level":4,"text":"Overriding shared state in tests"},{"inlineContent":[{"type":"text","text":"When testing features that use "},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":" with a persistence strategy you may want to set the initial"},{"text":" ","type":"text"},{"text":"value of that state for the test. Typically this can be done by declaring the shared state at","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the beginning of the test so that its default value can be specified:"}],"type":"paragraph"},{"code":["@Test","func basics() {","  @Shared(.appStorage(\"count\")) var count = 42","","  \/\/ Shared state will be 42 for all features using it.","  let store = TestStore(…)","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"However, if your test suite is a part of an app target, then the entry point of the app will execute"},{"text":" ","type":"text"},{"type":"text","text":"and potentially cause an early access of "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":", thus capturing a different default value than"},{"text":" ","type":"text"},{"text":"what is specified above. This quirk of tests in app targets is documented in","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Testing-gotchas","isActive":true,"type":"reference"},{"type":"text","text":" of the "},{"type":"text","text":"doc:Testing"},{"text":" article, and a similar quirk exists for Xcode","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"previews and is discussed below in "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState#Gotchas-of-Shared","type":"reference"},{"text":".","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"The most robust workaround to this issue is to simply not execute your app’s entry point when tests","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"are running, which we detail in "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Testing-host-application","type":"reference","isActive":true},{"type":"text","text":". This makes it so that you"},{"type":"text","text":" "},{"type":"text","text":"are not accidentally execute network requests, tracking analytics, etc. while running tests."}]},{"inlineContent":[{"type":"text","text":"You can also work around this issue by simply setting the shared state again after initializing"},{"text":" ","type":"text"},{"type":"text","text":"it:"}],"type":"paragraph"},{"code":["@Test","func basics() {","  @Shared(.appStorage(\"count\")) var count = 42","  count = 42  \/\/ NB: Set again to override any value set by the app target.","","  \/\/ Shared state will be 42 for all features using it.","  let store = TestStore(…)","}"],"syntax":"swift","type":"codeListing"},{"level":4,"text":"UI Testing","type":"heading","anchor":"UI-Testing"},{"inlineContent":[{"text":"When UI testing your app you must take extra care so that shared state is not persisted across","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"app runs because that can cause one test to bleed over into another test, making it difficult to"},{"type":"text","text":" "},{"type":"text","text":"write deterministic tests that always pass. To fix this, you can set an environment value from"},{"type":"text","text":" "},{"type":"text","text":"your UI test target, and then if that value is present in the app target you can override the"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Dependencies\/DependencyValues\/defaultAppStorage"},{"text":" and","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Dependencies\/DependencyValues\/defaultFileStorage","type":"reference"},{"text":" dependencies so that they use in-memory","type":"text"},{"type":"text","text":" "},{"type":"text","text":"storage, i.e. they do not persist ever:"}],"type":"paragraph"},{"type":"codeListing","code":["@main","struct EntryPoint: App {","  let store = Store(initialState: AppFeature.State()) {","    AppFeature()","  } withDependencies: {","    if ProcessInfo.processInfo.environment[\"UITesting\"] == \"true\" {","      $0.defaultAppStorage = UserDefaults(","        suiteName:\"\\(NSTemporaryDirectory())\\(UUID().uuidString)\"","      )!","      $0.defaultFileStorage = .inMemory","    }","  }","}"],"syntax":"swift"},{"text":"Testing tips","level":4,"type":"heading","anchor":"Testing-tips"},{"inlineContent":[{"text":"There is something you can do to make testing features with shared state more robust and catch","type":"text"},{"type":"text","text":" "},{"type":"text","text":"more potential future problems when you refactor your code. Right now suppose you have two features"},{"type":"text","text":" "},{"text":"using ","type":"text"},{"type":"codeVoice","code":"@Shared(.appStorage(\"count\"))"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","code":["@Reducer","struct Feature1 {","  struct State {","    @Shared(.appStorage(\"count\")) var count = 0","  }","  \/\/ ...","}","","@Reducer","struct Feature2 {","  struct State {","    @Shared(.appStorage(\"count\")) var count = 0","  }","  \/\/ ...","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"And suppose you wrote a test that proves one of these counts is incremented when a button is tapped:","type":"text"}]},{"code":["await store.send(.feature1(.buttonTapped)) {","  $0.feature1.count = 1","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"Because both features are using ","type":"text"},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":" you can be sure that both counts are kept in sync, and"},{"type":"text","text":" "},{"text":"so you do not need to assert on ","type":"text"},{"code":"feature2.count","type":"codeVoice"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"However, if someday during a long, complex refactor you accidentally removed ","type":"text"},{"code":"@Shared","type":"codeVoice"},{"text":" from","type":"text"},{"type":"text","text":" "},{"text":"the second feature:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["@Reducer","struct Feature2 {","  struct State {","    var count = 0","  }","  \/\/ ...","}"]},{"inlineContent":[{"type":"text","text":"…then all of your code would continue compiling, and the test would still pass, but you may have"},{"text":" ","type":"text"},{"text":"introduced a bug by not having these two pieces of state in sync anymore.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"You could also fix this by forcing yourself to assert on all shared state in your features, even","type":"text"},{"type":"text","text":" "},{"type":"text","text":"though technically it’s not necessary:"}]},{"type":"codeListing","syntax":"swift","code":["await store.send(.feature1(.buttonTapped)) {","  $0.feature1.count = 1","  $0.feature2.count = 1","}"]},{"type":"paragraph","inlineContent":[{"text":"If you are worried about these kinds of bugs you can make your tests more robust by not asserting","type":"text"},{"type":"text","text":" "},{"text":"on the shared state in the argument handed to the trailing closure of ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference","isActive":true},{"text":"’s ","type":"text"},{"code":"send","type":"codeVoice"},{"text":", and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"instead capture a reference to the shared state in the test and mutate it in the trailing"},{"type":"text","text":" "},{"text":"closure:","type":"text"}]},{"code":["@Test","func increment() async {","  @Shared(.appStorage(\"count\")) var count = 0","  let store = TestStore(initialState: ParentFeature.State()) {","    ParentFeature()","  }","","  await store.send(.feature1(.buttonTapped)) {","    \/\/ Mutate $0 to expected value.","    count = 1","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This will fail if you accidentally remove a "},{"code":"@Shared","type":"codeVoice"},{"text":" from one of your features.","type":"text"}]},{"inlineContent":[{"text":"Further, you can enforce this pattern in your codebase by making all ","type":"text"},{"code":"@Shared","type":"codeVoice"},{"text":" properties","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"fileprivate"},{"text":" so that they can never be mutated outside their file scope:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct State {","  @Shared(.appStorage(\"count\")) fileprivate var count = 0","}"]},{"level":2,"anchor":"Read-only-shared-state","type":"heading","text":"Read-only shared state"},{"inlineContent":[{"type":"text","text":"The "},{"overridingTitleInlineContent":[{"type":"codeVoice","code":"@Shared"}],"overridingTitle":"@Shared","type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","isActive":true},{"text":" property wrapper described above gives you access to a piece of shared","type":"text"},{"type":"text","text":" "},{"type":"text","text":"state that is both readable and writable. That is by far the most common use case when it comes to"},{"text":" ","type":"text"},{"type":"text","text":"shared state, but there are times when one wants to express access to shared state for which you"},{"type":"text","text":" "},{"type":"text","text":"are not allowed to write to it, or possibly it doesn’t even make sense to write to it."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For those times there is the ","type":"text"},{"overridingTitle":"@SharedReader","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharedReader","type":"reference","isActive":true,"overridingTitleInlineContent":[{"type":"codeVoice","code":"@SharedReader"}]},{"type":"text","text":" property wrapper. It represents"},{"text":" ","type":"text"},{"text":"a reference to some piece of state shared with multiple parts of the application, but you are not","type":"text"},{"type":"text","text":" "},{"text":"allowed to write to it. Every persistence strategy discussed above works with ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharedReader","isActive":true,"type":"reference"},{"type":"text","text":","},{"type":"text","text":" "},{"type":"text","text":"however if you try to mutate the state you will get a compiler error:"}]},{"type":"codeListing","syntax":"swift","code":["@SharedReader(.appStorage(\"isOn\")) var isOn = false","isOn = true  \/\/ 🛑"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"It is also possible to make custom persistence strategies that only have the notion of loading and"},{"text":" ","type":"text"},{"text":"subscribing, but cannot write. To do this you will conform only to the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey"},{"text":" ","type":"text"},{"type":"text","text":"protocol instead of the full "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceKey","isActive":true},{"type":"text","text":" protocol."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, you could create a "},{"code":".remoteConfig","type":"codeVoice"},{"text":" strategy that loads (and subscribes to) a remote","type":"text"},{"type":"text","text":" "},{"text":"configuration file held on your server so that it is kept automatically in sync:","type":"text"}]},{"syntax":"swift","code":["@SharedReader(.remoteConfig) var remoteConfig"],"type":"codeListing"},{"text":"Type-safe keys","level":2,"anchor":"Type-safe-keys","type":"heading"},{"type":"paragraph","inlineContent":[{"text":"Due to the nature of persisting data to external systems, you lose some type safety when shuffling","type":"text"},{"type":"text","text":" "},{"type":"text","text":"data from your app to the persistence storage and back. For example, if you are using the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:decoder:encoder:)"},{"type":"text","text":" strategy to save an array of users to disk you might do so"},{"text":" ","type":"text"},{"type":"text","text":"like this:"}]},{"code":["extension URL {","  static let users = URL(\/* ... *\/))","}","","@Shared(.fileStorage(.users)) var users: [User] = []"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"And say you have used this file storage users in multiple places throughout your application."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But then, someday in the future you may decide to refactor this data to be an identified array"},{"type":"text","text":" "},{"type":"text","text":"instead of a plain array:"}]},{"type":"codeListing","syntax":"swift","code":["\/\/ Somewhere else in the application","@Shared(.fileStorage(.users)) var users: IdentifiedArrayOf<User> = []"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"But if you forget to convert "},{"type":"emphasis","inlineContent":[{"type":"text","text":"all"}]},{"type":"text","text":" shared user arrays to the new identified array your application"},{"text":" ","type":"text"},{"text":"will still compile, but it will be broken. The two types of storage will not share state.","type":"text"}]},{"inlineContent":[{"text":"To add some type-safety and reusability to this process you can extend the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey","isActive":true},{"text":" ","type":"text"},{"text":"protocol to add a static variable for describing the details of your persistence:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["extension PersistenceReaderKey where Self == FileStorageKey<IdentifiedArrayOf<User>> {","  static var users: Self {","    fileStorage(.users)","  }","}"]},{"inlineContent":[{"text":"Then when using ","type":"text"},{"isActive":true,"type":"reference","overridingTitleInlineContent":[{"type":"codeVoice","code":"@Shared"}],"overridingTitle":"@Shared","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared"},{"type":"text","text":" you can specify this key directly without "},{"type":"codeVoice","code":".fileStorage"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["@Shared(.users) var users: IdentifiedArrayOf<User> = []"]},{"inlineContent":[{"text":"And now that the type is baked into the key you cannot accidentally use the wrong type because you","type":"text"},{"type":"text","text":" "},{"type":"text","text":"will get an immediate compiler error:"}],"type":"paragraph"},{"type":"codeListing","code":["@Shared(.users) var users = [User]()"],"syntax":"swift"},{"style":"note","type":"aside","name":"🛑 Error","content":[{"type":"paragraph","inlineContent":[{"text":"Cannot convert value of type ‘[User]’ to expected argument type ‘IdentifiedArrayOf","type":"text"},{"text":"’","type":"text"}]}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This technique works for all types of persistence strategies. For example, a type-safe "},{"code":".inMemory","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"key can be constructed like so:"}]},{"syntax":"swift","type":"codeListing","code":["extension PersistenceReaderKey where Self == InMemoryKey<IdentifiedArrayOf<User>> {","  static var users: Self {","    inMemory(\"users\")","  }","}"]},{"inlineContent":[{"type":"text","text":"And a type-safe "},{"type":"codeVoice","code":".appStorage"},{"type":"text","text":" key can be constructed like so:"}],"type":"paragraph"},{"code":["extension PersistenceReaderKey where Self == AppStorageKey<Int> {","  static var count: Self {","    appStorage(\"count\")","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"And this technique also works on "},{"overridingTitleInlineContent":[{"type":"text","text":"custom persistence"}],"isActive":true,"overridingTitle":"custom persistence","type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState#Custom-persistence"},{"text":" ","type":"text"},{"type":"text","text":"strategies."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Further, you can use the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceKeyDefault"},{"text":" type to also provide a default that is used","type":"text"},{"type":"text","text":" "},{"type":"text","text":"with the persistence strategy. For example, to use a default value of "},{"code":"[]","type":"codeVoice"},{"text":" with the ","type":"text"},{"type":"codeVoice","code":".users"},{"text":" ","type":"text"},{"text":"persistence strategy described above, we can do the following:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["extension PersistenceReaderKey ","where Self == PersistenceKeyDefault<FileStorageKey<IdentifiedArrayOf<User>>>","{","  static var users: Self {","    PersistenceKeyDefault(.fileStorage(.users), [])","  }","}"]},{"inlineContent":[{"text":"And now anytime you reference the shared users state you can leave off the default value, and","type":"text"},{"type":"text","text":" "},{"text":"you can even leave off the type annotation:","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["@Shared(.users) var users"],"type":"codeListing"},{"level":2,"text":"Shared state in pre-observation apps","type":"heading","anchor":"Shared-state-in-pre-observation-apps"},{"inlineContent":[{"type":"text","text":"It is possible to use "},{"type":"reference","overridingTitleInlineContent":[{"code":"@Shared","type":"codeVoice"}],"isActive":true,"overridingTitle":"@Shared","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared"},{"type":"text","text":" in features that have not yet been updated with"},{"text":" ","type":"text"},{"type":"text","text":"the observation tools released in 1.7, such as the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","isActive":true,"type":"reference"},{"type":"text","text":" macro. In the reducer"},{"type":"text","text":" "},{"type":"text","text":"you can use "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" regardless of your use of the observation tools."}],"type":"paragraph"},{"inlineContent":[{"text":"However, if you are deploying to iOS 16 or earlier, then you must use ","type":"text"},{"type":"codeVoice","code":"WithPerceptionTracking"},{"type":"text","text":" "},{"type":"text","text":"in your views if you are accessing shared state. For example, the following view:"}],"type":"paragraph"},{"code":["struct FeatureView: View {","  let store: StoreOf<Feature>","","  var body: some View {","    Form {","      Text(store.sharedCount.description)","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"…will not update properly when ","type":"text"},{"type":"codeVoice","code":"sharedCount"},{"type":"text","text":" changes. This view will even generate a runtime warning"},{"type":"text","text":" "},{"text":"letting you know something is wrong:","type":"text"}]},{"style":"note","content":[{"inlineContent":[{"text":"Perceptible state was accessed but is not being tracked. Track changes to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"state by wrapping your view in a ‘WithPerceptionTracking’ view."}],"type":"paragraph"}],"type":"aside","name":"🟣 Runtime Warning"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The fix is to wrap the body of the view in "},{"type":"codeVoice","code":"WithPerceptionTracking"},{"type":"text","text":":"}]},{"code":["struct FeatureView: View {","  let store: StoreOf<Feature>","","  var body: some View {","    WithPerceptionTracking {","      Form {","        Text(store.sharedCount.description)","      }","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"anchor":"Concurrent-mutations-to-shared-state","text":"Concurrent mutations to shared state","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"While the "},{"isActive":true,"overridingTitle":"@Shared","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","overridingTitleInlineContent":[{"code":"@Shared","type":"codeVoice"}],"type":"reference"},{"text":" property wrapper makes it possible to treat shared state","type":"text"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"mostly"}]},{"type":"text","text":" like regular state, you do have to perform some extra steps to mutate shared state from"},{"type":"text","text":" "},{"type":"text","text":"an asynchronous context. This is because shared state is technically a reference deep down, even"},{"type":"text","text":" "},{"type":"text","text":"though we take extra steps to make it appear value-like. And this means it’s possible to mutate the"},{"type":"text","text":" "},{"type":"text","text":"same piece of shared state from multiple threads, and hence race conditions are possible."}]},{"inlineContent":[{"text":"To mutate a piece of shared state in an isolated fashion, use the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)","isActive":true},{"text":" method","type":"text"},{"type":"text","text":" "},{"type":"text","text":"defined on the "},{"type":"codeVoice","code":"@Shared"},{"text":" projected value:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["await state.$count.withLock { $0 += 1 }"]},{"type":"paragraph","inlineContent":[{"text":"That locks the entire unit of work of reading the current count, incrementing it, and storing it","type":"text"},{"type":"text","text":" "},{"type":"text","text":"back in the reference."}]},{"type":"paragraph","inlineContent":[{"text":"Technically it is still possible to write code that has race conditions, such as this silly example:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let currentCount = state.count","await state.$count.withLock { $0 = currentCount + 1 }"]},{"inlineContent":[{"text":"But there is no way to 100% prevent race conditions in code. Even actors are susceptible to","type":"text"},{"text":" ","type":"text"},{"text":"problems due to re-entrancy. To avoid problems like the above we recommend wrapping as many","type":"text"},{"type":"text","text":" "},{"type":"text","text":"mutations of the shared state as possible in a single "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)","isActive":true},{"type":"text","text":". That will make"},{"text":" ","type":"text"},{"type":"text","text":"sure that the full unit of work is guarded by a lock."}],"type":"paragraph"},{"type":"aside","name":"Note","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"You may encounter a deprecation warning when simply "},{"type":"emphasis","inlineContent":[{"type":"text","text":"accessing"}]},{"type":"text","text":" shared state from an"},{"type":"text","text":" "},{"type":"text","text":"asynchronous context when you chain into a subscript:"}]},{"code":["return .run { _ in","  @Shared(.posts) var posts","  let post = posts[id: id]  \/\/ ⚠️ Setter is unavailable from asynchronous contexts","  \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This is a ","type":"text"},{"identifier":"https:\/\/github.com\/apple\/swift\/issues\/74203","type":"reference","isActive":true},{"type":"text","text":" in the Swift compiler, but"},{"text":" ","type":"text"},{"type":"text","text":"can be worked around using "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)","type":"reference"},{"text":" to access the underlying value instead:","type":"text"}]},{"type":"codeListing","code":["return .run { _ in","  @Shared(.posts) var posts","  let post = await $posts.withLock { $0[id: id] }","  \/\/ ...","}"],"syntax":"swift"}]},{"type":"heading","level":2,"text":"Gotchas of @Shared","anchor":"Gotchas-of-Shared"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are a few gotchas to be aware of when using shared state in the Composable Architecture."}]},{"type":"heading","level":4,"anchor":"Hashability","text":"Hashability"},{"inlineContent":[{"text":"Because the ","type":"text"},{"code":"@Shared","type":"codeVoice"},{"text":" type is equatable based on its wrapped value, and because the value is held","type":"text"},{"text":" ","type":"text"},{"text":"in a reference and can change over time, it cannot be hashable. This also means that types","type":"text"},{"type":"text","text":" "},{"text":"containing ","type":"text"},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":" properties should not compute their hashes from shared values."}],"type":"paragraph"},{"anchor":"Codability","type":"heading","level":4,"text":"Codability"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The "},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":" type is not conditionally encodable or decodable because the source of truth of the"},{"type":"text","text":" "},{"text":"wrapped value is rarely local: it might be derived from some other shared value, or it might rely on","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"loading the value from a backing persistence strategy."}]},{"inlineContent":[{"text":"When introducing shared state to a data type that is encodable or decodable, you must provide your","type":"text"},{"type":"text","text":" "},{"text":"own implementations of ","type":"text"},{"type":"codeVoice","code":"encode(to:)"},{"type":"text","text":" and "},{"type":"codeVoice","code":"init(from:)"},{"type":"text","text":" that do the appropriate thing."}],"type":"paragraph"},{"inlineContent":[{"text":"For example, if the data type is sharing state with a persistence strategy, you can decode by","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"delegating to the memberwise initializer that implicitly loads the shared value from the property"},{"type":"text","text":" "},{"text":"wrapper’s persistence strategy, or you can explicitly initialize a shared value via","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"Shared\/init(wrappedValue:_:fileID:line:)-512rh"},{"text":". And for encoding you can often skip encoding","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the shared value:"}],"type":"paragraph"},{"code":["struct AppState {","  @Shared(.appStorage(\"launchCount\")) var launchCount = 0","  var todos: [String] = []","}","","extension AppState: Codable {","  enum CodingKeys: String, CodingKey { case todos }","","  init(from decoder: any Decoder) throws {","    let container = try decoder.container(keyedBy: CodingKeys.self)","","    \/\/ Use the property wrapper default via the memberwise initializer:","    try self.init(","      todos: container.decode([String].self, forKey: .todos)","    )","","    \/\/ Or initialize the shared storage manually:","    self._launchCount = Shared(wrappedValue: 0, .appStorage(\"launchCount\"))","    self.todos = try container.decode([String].self, forKey: .todos)","  }","","  func encode(to encoder: any Encoder) throws {","    var container = encoder.container(keyedBy: CodingKeys.self)","    try container.encode(self.todos, forKey: .todos)","    \/\/ Skip encoding the launch count.","  }","}"],"syntax":"swift","type":"codeListing"},{"type":"heading","level":4,"anchor":"Previews","text":"Previews"},{"inlineContent":[{"text":"When a preview is run in an app target, the entry point is also created. This means if your entry","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"point looks something like this:"}],"type":"paragraph"},{"syntax":"swift","code":["@main","struct MainApp: App {","  let store = Store(…)","","  var body: some Scene {","    …","  }","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"…then a store will be created each time you run your preview. This can be problematic with "},{"type":"codeVoice","code":"@Shared"},{"text":" ","type":"text"},{"type":"text","text":"and persistence strategies because the first access of a "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" property will use the default"},{"type":"text","text":" "},{"type":"text","text":"value provided, and that will cause "},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":"’s created later to ignore the default. That will mean"},{"type":"text","text":" "},{"type":"text","text":"you cannot override shared state in previews."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The fix is to delay creation of the store until the entry point’s "},{"type":"codeVoice","code":"body"},{"type":"text","text":" is executed. Further, it"},{"type":"text","text":" "},{"type":"text","text":"can be a good idea to also not run the "},{"type":"codeVoice","code":"body"},{"type":"text","text":" when in tests because that can also interfere with"},{"text":" ","type":"text"},{"type":"text","text":"tests (as documented in "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Testing-gotchas","isActive":true,"type":"reference"},{"type":"text","text":"). Here is one way this can be accomplished:"}]},{"type":"codeListing","code":["import ComposableArchitecture","import SwiftUI","","@main","struct MainApp: App {","  @MainActor","  static let store = Store(…)","","  var body: some Scene {","    WindowGroup {","      if isTesting {","        \/\/ NB: Don't run application in tests to avoid interference ","        \/\/     between the app and the test.","        EmptyView()","      } else {","        AppView(store: Self.store)","      }","    }","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Alternatively you can take an extra step to override shared state in your previews:"}]},{"type":"codeListing","syntax":"swift","code":["#Preview {","  @Shared(.appStorage(\"isOn\")) var isOn = true","  isOn = true","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The second assignment of "},{"type":"codeVoice","code":"isOn"},{"type":"text","text":" will guarantee that it holds a value of "},{"code":"true","type":"codeVoice"},{"text":".","type":"text"}]}]}],"abstract":[{"text":"Learn techniques for sharing state throughout many parts of your application, and how to persist","type":"text"},{"text":" ","type":"text"},{"text":"data to user defaults, the file system, and other external mediums.","type":"text"}],"kind":"article","metadata":{"title":"Sharing state","modules":[{"name":"ComposableArchitecture"}],"role":"collectionGroup","roleHeading":"API Collection"},"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/GettingStarted","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/FAQ"],"anchor":"Essentials","title":"Essentials","generated":true}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared/assert(_:fileID:file:line:column:)":{"title":"assert(_:fileID:file:line:column:)","abstract":[],"kind":"symbol","type":"topic","url":"\/documentation\/composablearchitecture\/shared\/assert(_:fileid:file:line:column:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/assert(_:fileID:file:line:column:)","role":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"assert"},{"kind":"text","text":"(("},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PersistenceKeyDefault":{"title":"PersistenceKeyDefault","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceKeyDefault","url":"\/documentation\/composablearchitecture\/persistencekeydefault","abstract":[{"type":"text","text":"A persistence key that provides a default value to an existing persistence key."}],"kind":"symbol","navigatorTitle":[{"text":"PersistenceKeyDefault","kind":"identifier"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"PersistenceKeyDefault"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"title":"Effect","navigatorTitle":[{"kind":"identifier","text":"Effect"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","abstract":[],"kind":"symbol","url":"\/documentation\/composablearchitecture\/effect","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Effect"}]},"#Gotchas-of-Shared":{"titleInlineContent":[{"type":"text","text":"Gotchas of @Shared"}],"url":"#Gotchas-of-Shared","title":"Gotchas of @Shared","identifier":"#Gotchas-of-Shared","type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharingState#Initialization-rules":{"kind":"section","url":"\/documentation\/composablearchitecture\/sharingstate#Initialization-rules","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState#Initialization-rules","type":"topic","title":"Initialization rules","abstract":[]},"#Type-safe-keys":{"titleInlineContent":[{"type":"text","text":"Type-safe keys"}],"url":"#Type-safe-keys","identifier":"#Type-safe-keys","type":"link","title":"Type-safe keys"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharingState#Read-only-shared-state":{"title":"Read-only shared state","type":"topic","kind":"section","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState#Read-only-shared-state","abstract":[],"url":"\/documentation\/composablearchitecture\/sharingstate#Read-only-shared-state"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared":{"type":"topic","navigatorTitle":[{"text":"Shared","kind":"identifier"}],"kind":"symbol","title":"Shared","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Shared","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/shared","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","abstract":[{"text":"A property wrapper type that shares a value with multiple parts of an application.","type":"text"}],"role":"symbol"},"https://github.com/apple/swift/issues/74203":{"titleInlineContent":[{"type":"text","text":"known issue"}],"url":"https:\/\/github.com\/apple\/swift\/issues\/74203","identifier":"https:\/\/github.com\/apple\/swift\/issues\/74203","type":"link","title":"known issue"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Dependencies/DependencyValues/defaultAppStorage":{"url":"\/documentation\/composablearchitecture\/dependencies\/dependencyvalues\/defaultappstorage","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Dependencies\/DependencyValues\/defaultAppStorage","type":"topic","title":"defaultAppStorage","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"defaultAppStorage","kind":"identifier"},{"text":": ","kind":"text"},{"text":"UserDefaults","preciseIdentifier":"c:objc(cs)NSUserDefaults","kind":"typeIdentifier"}],"kind":"symbol","abstract":[],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Navigation":{"url":"\/documentation\/composablearchitecture\/navigation","abstract":[{"text":"Learn how to use the navigation tools in the library, including how to best model your domains, how","type":"text"},{"type":"text","text":" "},{"text":"to integrate features in the reducer and view layers, and how to write tests.","type":"text"}],"role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation","title":"Navigation","kind":"article","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DependencyManagement":{"title":"Dependencies","abstract":[{"text":"Learn how to register dependencies with the library so that they can be immediately accessible from","type":"text"},{"type":"text","text":" "},{"text":"any reducer.","type":"text"}],"role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DependencyManagement","type":"topic","url":"\/documentation\/composablearchitecture\/dependencymanagement","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Dependencies/DependencyValues/defaultFileStorage":{"url":"\/documentation\/composablearchitecture\/dependencies\/dependencyvalues\/defaultfilestorage","abstract":[{"type":"text","text":"Default file storage used by "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:decoder:encoder:)","isActive":true,"type":"reference"},{"type":"text","text":"."}],"role":"symbol","fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"defaultFileStorage"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture11FileStorageV","kind":"typeIdentifier","text":"FileStorage"}],"type":"topic","title":"defaultFileStorage","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Dependencies\/DependencyValues\/defaultFileStorage","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Testing#Testing-gotchas":{"title":"Testing gotchas","abstract":[],"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Testing-gotchas","url":"\/documentation\/composablearchitecture\/testing#Testing-gotchas","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/FAQ":{"role":"article","abstract":[{"text":"A collection of some of the most common questions and comments people have concerning the library.","type":"text"}],"title":"Frequently asked questions","url":"\/documentation\/composablearchitecture\/faq","type":"topic","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/FAQ"},"#Overriding-shared-state-in-tests":{"title":"Overriding shared state in tests","titleInlineContent":[{"type":"text","text":"Overriding shared state in tests"}],"identifier":"#Overriding-shared-state-in-tests","url":"#Overriding-shared-state-in-tests","type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/FileStorageKey":{"title":"FileStorageKey","navigatorTitle":[{"kind":"identifier","text":"FileStorageKey"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/FileStorageKey","url":"\/documentation\/composablearchitecture\/filestoragekey","kind":"symbol","abstract":[{"type":"text","text":"A type defining a file persistence strategy"}],"role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FileStorageKey"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/GettingStarted":{"role":"article","title":"Getting started","url":"\/documentation\/composablearchitecture\/gettingstarted","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/GettingStarted","kind":"article","type":"topic","abstract":[{"type":"text","text":"Learn how to integrate the Composable Architecture into your project and write your first"},{"type":"text","text":" "},{"type":"text","text":"application."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"title":"TestStore","url":"\/documentation\/composablearchitecture\/teststore","abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TestStore"}],"navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"type":"topic"},"#Persisted-shared-state":{"title":"Persisted shared state","titleInlineContent":[{"type":"text","text":"Persisted shared state"}],"identifier":"#Persisted-shared-state","url":"#Persisted-shared-state","type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharingState#File-storage":{"kind":"section","url":"\/documentation\/composablearchitecture\/sharingstate#File-storage","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState#File-storage","title":"File storage","abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","kind":"symbol","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","type":"topic"},"#Observing-changes-to-shared-state":{"titleInlineContent":[{"type":"text","text":"Observing changes to shared state"}],"url":"#Observing-changes-to-shared-state","type":"link","identifier":"#Observing-changes-to-shared-state","title":"Observing changes to shared state"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/State":{"title":"State","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","type":"topic","abstract":[{"text":"A type that holds the current state of the reducer.","type":"text"}],"url":"\/documentation\/composablearchitecture\/reducer\/state","kind":"symbol","role":"symbol","required":true,"fragments":[{"kind":"keyword","text":"associatedtype"},{"text":" ","kind":"text"},{"kind":"identifier","text":"State"}]},"#Shared-state-in-pre-observation-apps":{"titleInlineContent":[{"type":"text","text":"Shared state in pre-observation apps"}],"url":"#Shared-state-in-pre-observation-apps","identifier":"#Shared-state-in-pre-observation-apps","type":"link","title":"Shared state in pre-observation apps"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PersistenceKey":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceKey","url":"\/documentation\/composablearchitecture\/persistencekey","navigatorTitle":[{"kind":"identifier","text":"PersistenceKey"}],"role":"symbol","type":"topic","kind":"symbol","fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"text":"PersistenceKey","kind":"identifier"}],"abstract":[{"text":"A type that can persist shared state to an external storage.","type":"text"}],"title":"PersistenceKey"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"type":"topic","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"text":"s should be executed later by the store, if any.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"url":"\/documentation\/composablearchitecture\/reducer","title":"Reducer","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Reducer","kind":"identifier"}]},"#Read-only-shared-state":{"titleInlineContent":[{"type":"text","text":"Read-only shared state"}],"url":"#Read-only-shared-state","type":"link","identifier":"#Read-only-shared-state","title":"Read-only shared state"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharingState#Gotchas-of-Shared":{"kind":"section","url":"\/documentation\/composablearchitecture\/sharingstate#Gotchas-of-Shared","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState#Gotchas-of-Shared","type":"topic","title":"Gotchas of @Shared","abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared/elements":{"role":"symbol","kind":"symbol","conformance":{"constraints":[{"code":"Value","type":"codeVoice"},{"text":" conforms to ","type":"text"},{"code":"_MutableIdentifiedCollection","type":"codeVoice"},{"text":", ","type":"text"},{"code":"Value","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":", and "},{"type":"codeVoice","code":"Value.Element"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"url":"\/documentation\/composablearchitecture\/shared\/elements","title":"elements","type":"topic","abstract":[{"type":"text","text":"Allows a "},{"type":"codeVoice","code":"ForEach"},{"type":"text","text":" view to transform a shared collection into shared elements."}],"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"elements","kind":"identifier"},{"text":": ","kind":"text"},{"text":"some","kind":"keyword"},{"kind":"text","text":" "},{"kind":"typeIdentifier","preciseIdentifier":"s:Sk","text":"RandomAccessCollection"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture6SharedV","text":"Shared"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Element","preciseIdentifier":"s:ST7ElementQa"},{"kind":"text","text":">>"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/elements"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/InMemoryKey":{"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"InMemoryKey","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/inmemorykey","title":"InMemoryKey","abstract":[{"text":"A type defining an in-memory persistence strategy","type":"text"}],"type":"topic","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/InMemoryKey","navigatorTitle":[{"text":"InMemoryKey","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared/projectedValue":{"title":"projectedValue","role":"symbol","url":"\/documentation\/composablearchitecture\/shared\/projectedvalue","fragments":[{"text":"var","kind":"keyword"},{"kind":"text","text":" "},{"text":"projectedValue","kind":"identifier"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture6SharedV","text":"Shared","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":">","kind":"text"}],"abstract":[{"text":"A projection of the shared value that returns a shared reference.","type":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/projectedValue","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AppStorageKey":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AppStorageKey"}],"kind":"symbol","title":"AppStorageKey","abstract":[{"text":"A type defining a user defaults persistence strategy.","type":"text"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AppStorageKey"}],"url":"\/documentation\/composablearchitecture\/appstoragekey","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AppStorageKey"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharingState#Custom-persistence":{"abstract":[],"kind":"section","url":"\/documentation\/composablearchitecture\/sharingstate#Custom-persistence","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState#Custom-persistence","title":"Custom persistence","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservableState()":{"title":"ObservableState()","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","type":"topic","abstract":[{"text":"Defines and implements conformance of the Observable protocol.","type":"text"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/observablestate()","role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ObservableState"},{"text":"()","kind":"text"}]},"#In-memory":{"titleInlineContent":[{"type":"text","text":"In-memory"}],"url":"#In-memory","identifier":"#In-memory","title":"In-memory","type":"link"},"#Explicit-shared-state":{"titleInlineContent":[{"type":"text","text":"Explicit shared state"}],"url":"#Explicit-shared-state","identifier":"#Explicit-shared-state","title":"Explicit shared state","type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharedReader":{"title":"SharedReader","abstract":[{"type":"text","text":"A property wrapper type that shares a value with multiple parts of an application."}],"role":"symbol","type":"topic","kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"SharedReader"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharedReader","url":"\/documentation\/composablearchitecture\/sharedreader","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"SharedReader","kind":"identifier"}]},"#Initialization-rules":{"title":"Initialization rules","titleInlineContent":[{"text":"Initialization rules","type":"text"}],"identifier":"#Initialization-rules","url":"#Initialization-rules","type":"link"},"#File-storage":{"title":"File storage","titleInlineContent":[{"type":"text","text":"File storage"}],"identifier":"#File-storage","url":"#File-storage","type":"link"},"#Concurrent-mutations-to-shared-state":{"title":"Concurrent mutations to shared state","titleInlineContent":[{"text":"Concurrent mutations to shared state","type":"text"}],"identifier":"#Concurrent-mutations-to-shared-state","url":"#Concurrent-mutations-to-shared-state","type":"link"},"#Testing":{"title":"Testing","titleInlineContent":[{"type":"text","text":"Testing"}],"identifier":"#Testing","url":"#Testing","type":"link"},"#Testing-tips":{"title":"Testing tips","titleInlineContent":[{"type":"text","text":"Testing tips"}],"identifier":"#Testing-tips","url":"#Testing-tips","type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared/publisher":{"title":"publisher","type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/shared\/publisher","kind":"symbol","fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"publisher"},{"kind":"text","text":": "},{"text":"AnyPublisher","preciseIdentifier":"s:7Combine12AnyPublisherV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Never","kind":"typeIdentifier","preciseIdentifier":"s:s5NeverO"},{"text":">","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/publisher","abstract":[{"text":"Returns a publisher that emits events when the underlying value changes.","type":"text"}]},"#Deriving-shared-state":{"title":"Deriving shared state","titleInlineContent":[{"text":"Deriving shared state","type":"text"}],"identifier":"#Deriving-shared-state","url":"#Deriving-shared-state","type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared/withLock(_:)":{"title":"withLock(_:)","url":"\/documentation\/composablearchitecture\/shared\/withlock(_:)","abstract":[{"type":"text","text":"Perform an operation on shared state with isolated access to the underlying value."}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"withLock","kind":"identifier"},{"text":"<","kind":"text"},{"text":"R","kind":"genericParameter"},{"kind":"text","text":">(("},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"R","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"R","kind":"typeIdentifier"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharingState#Testing":{"title":"Testing","abstract":[],"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState#Testing","url":"\/documentation\/composablearchitecture\/sharingstate#Testing","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PersistenceReaderKey/inMemory(_:)":{"role":"symbol","kind":"symbol","url":"\/documentation\/composablearchitecture\/persistencereaderkey\/inmemory(_:)","title":"inMemory(_:)","abstract":[{"text":"Creates a persistence key for sharing data in-memory for the lifetime of an application.","type":"text"}],"type":"topic","fragments":[{"kind":"keyword","text":"static"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"inMemory"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"preciseIdentifier":"s:SS","text":"String","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/inMemory(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PersistenceReaderKey":{"role":"symbol","kind":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PersistenceReaderKey","kind":"identifier"}],"abstract":[{"type":"text","text":"A type that can load and subscribe to state in an external system."}],"title":"PersistenceReaderKey","type":"topic","navigatorTitle":[{"kind":"identifier","text":"PersistenceReaderKey"}],"url":"\/documentation\/composablearchitecture\/persistencereaderkey","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey"},"#Testing-when-using-custom-persistence-strategies":{"title":"Testing when using custom persistence strategies","titleInlineContent":[{"type":"text","text":"Testing when using custom persistence strategies"}],"identifier":"#Testing-when-using-custom-persistence-strategies","url":"#Testing-when-using-custom-persistence-strategies","type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Performance":{"kind":"article","title":"Performance","role":"article","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance","abstract":[{"text":"Learn how to improve the performance of features built in the Composable Architecture.","type":"text"}],"url":"\/documentation\/composablearchitecture\/performance"},"#Source-of-truth":{"title":"“Source of truth”","titleInlineContent":[{"text":"“Source of truth”","type":"text"}],"identifier":"#Source-of-truth","url":"#Source-of-truth","type":"link"},"#UI-Testing":{"title":"UI Testing","titleInlineContent":[{"type":"text","text":"UI Testing"}],"identifier":"#UI-Testing","url":"#UI-Testing","type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Testing#Testing-host-application":{"title":"Testing host application","abstract":[],"kind":"section","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Testing#Testing-host-application","url":"\/documentation\/composablearchitecture\/testing#Testing-host-application","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PersistenceReaderKey/appStorage(_:)-4l5b":{"url":"\/documentation\/composablearchitecture\/persistencereaderkey\/appstorage(_:)-4l5b","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/appStorage(_:)-4l5b","type":"topic","title":"appStorage(_:)","fragments":[{"text":"static","kind":"keyword"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"appStorage"},{"text":"(","kind":"text"},{"text":"String","kind":"typeIdentifier","preciseIdentifier":"s:SS"},{"text":") -> ","kind":"text"},{"text":"Self","kind":"typeIdentifier"}],"kind":"symbol","abstract":[{"type":"text","text":"Creates a persistence key that can read and write to a boolean user default."}],"role":"symbol"},"#Custom-persistence":{"title":"Custom persistence","titleInlineContent":[{"type":"text","text":"Custom persistence"}],"identifier":"#Custom-persistence","url":"#Custom-persistence","type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PersistenceReaderKey/fileStorage(_:decoder:encoder:)":{"type":"topic","role":"symbol","kind":"symbol","abstract":[{"text":"Creates a persistence key that can read and write to a ","type":"text"},{"code":"Codable","type":"codeVoice"},{"type":"text","text":" value in the file system."}],"url":"\/documentation\/composablearchitecture\/persistencereaderkey\/filestorage(_:decoder:encoder:)","title":"fileStorage(_:decoder:encoder:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PersistenceReaderKey\/fileStorage(_:decoder:encoder:)","fragments":[{"kind":"keyword","text":"static"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"fileStorage"},{"kind":"text","text":"<"},{"text":"Value","kind":"genericParameter"},{"kind":"text","text":">("},{"preciseIdentifier":"s:10Foundation3URLV","kind":"typeIdentifier","text":"URL"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"decoder"},{"text":": ","kind":"text"},{"text":"JSONDecoder","preciseIdentifier":"s:10Foundation11JSONDecoderC","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"encoder"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"JSONEncoder","preciseIdentifier":"s:10Foundation11JSONEncoderC"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Self"}]},"#Testing-when-using-persistence":{"title":"Testing when using persistence","titleInlineContent":[{"text":"Testing when using persistence","type":"text"}],"identifier":"#Testing-when-using-persistence","url":"#Testing-when-using-persistence","type":"link"},"#User-defaults":{"title":"User defaults","titleInlineContent":[{"type":"text","text":"User defaults"}],"identifier":"#User-defaults","url":"#User-defaults","type":"link"}}}