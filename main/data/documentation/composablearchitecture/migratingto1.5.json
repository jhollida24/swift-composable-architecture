{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/migratingto1.5"]}],"primaryContentSections":[{"content":[{"level":2,"anchor":"Overview","type":"heading","text":"Overview"},{"inlineContent":[{"type":"text","text":"The Composable Architecture is under constant development, and we are always looking for ways to"},{"text":" ","type":"text"},{"text":"simplify the library, and make it more powerful. As such, we often need to deprecate certain APIs","type":"text"},{"type":"text","text":" "},{"text":"in favor of newer ones. We recommend people update their code as quickly as possible to the newest","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"APIs, and this article contains some tips for doing so."}],"type":"paragraph"},{"name":"Important","type":"aside","style":"important","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Many APIs have been soft-deprecated in this release and will be hard-deprecated in"},{"text":" ","type":"text"},{"text":"a future minor release. We highly recommend updating your use of deprecated APIs to their newest","type":"text"},{"text":" ","type":"text"},{"text":"version as quickly as possible.","type":"text"}]}]},{"items":[{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"#Store-scoping-with-key-paths"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"#Scoping-performance"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"isActive":true,"type":"reference","identifier":"#Enum-driven-navigation-APIs"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"heading","anchor":"Store-scoping-with-key-paths","level":3,"text":"Store scoping with key paths"},{"type":"paragraph","inlineContent":[{"text":"Prior to version 1.5 of the Composable Architecture, one was allowed to","type":"text"},{"type":"text","text":" "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-9iai9"},{"type":"text","text":" a store with any kind of closures that"},{"text":" ","type":"text"},{"type":"text","text":"transform the parent state to the child state, and child actions into parent actions:"}]},{"code":["store.scope(","  state: (State) -> ChildState,","  action: (ChildAction) -> Action",")"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"In practice you could typically use key paths for the "},{"code":"state","type":"codeVoice"},{"text":" transformation since key path literals","type":"text"},{"type":"text","text":" "},{"type":"text","text":"can be promoted to closures. That means often scoping looked something like this:"}]},{"syntax":"swift","type":"codeListing","code":["\/\/ ⚠️ Deprecated API","ChildView(","  store: store.scope(","    state: \\.child, ","    action: { .child($0) }","  )",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"However, as of version 1.5 of the Composable Architecture, the version of"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-9iai9"},{"type":"text","text":" that takes two closures is"},{"text":" ","type":"text"},{"type":"strong","inlineContent":[{"type":"text","text":"soft-deprecated"}]},{"text":". Instead, you are to use the version of","type":"text"},{"text":" ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255"},{"type":"text","text":" that takes a key path for the "},{"type":"codeVoice","code":"state"},{"type":"text","text":""},{"type":"text","text":" "},{"type":"text","text":"argument, and a case key path for the "},{"type":"codeVoice","code":"action"},{"text":" argument.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"This is easiest to do when you are using the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"type":"text","text":" macro with your"},{"text":" ","type":"text"},{"type":"text","text":"feature because then case key paths are automatically generated for each case of your action enum."},{"type":"text","text":" "},{"type":"text","text":"The above construction of "},{"type":"codeVoice","code":"ChildView"},{"text":" now becomes:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["\/\/ ✅ New API","ChildView(","  store: store.scope(","    state: \\.child, ","    action: \\.child","  )",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The syntax is now shorter and more symmetric, and there is a hidden benefit too. Because key paths"},{"text":" ","type":"text"},{"text":"are ","type":"text"},{"code":"Hashable","type":"codeVoice"},{"type":"text","text":", we are able to cache the store created by "},{"type":"codeVoice","code":"scope"},{"type":"text","text":". This means if the store is scoped"},{"type":"text","text":" "},{"text":"again with the same ","type":"text"},{"type":"codeVoice","code":"state"},{"type":"text","text":" and "},{"code":"action","type":"codeVoice"},{"type":"text","text":" arguments, we can skip creating a new store and instead"},{"text":" ","type":"text"},{"text":"return the previously created one. This provides a lot of benefits, such as better performance, and","type":"text"},{"type":"text","text":" "},{"text":"a stable identity for features.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"There are some times when changing to this new scoping operator may be difficult. For example, if","type":"text"},{"type":"text","text":" "},{"text":"you perform additional work in your scoping closure so that a simple key path does not work:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["ChildView(","  store: store.scope(","    state: { ChildFeature(state: $0.child) }, ","    action: { .child($0) }","  )",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This can be handled by moving the work in the closure to a computed property on your state:"}]},{"type":"codeListing","syntax":"swift","code":["extension State {","  var childFeature: ChildFeature {","    ChildFeature(state: self.child) ","  }","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And now the key path syntax works just fine:"}]},{"syntax":"swift","type":"codeListing","code":["ChildView(","  store: store.scope(","    state: \\.childFeature, ","    action: \\.child","  )",")"]},{"inlineContent":[{"type":"text","text":"Another complication is if you are using data from "},{"inlineContent":[{"type":"text","text":"outside"}],"type":"emphasis"},{"type":"text","text":" the closure, "},{"type":"emphasis","inlineContent":[{"text":"inside","type":"text"}]},{"type":"text","text":" the closure:"}],"type":"paragraph"},{"code":["ChildView(","  store: store.scope(","    state: { ","      ChildFeature(","        settings: viewStore.settings,","        state: $0.child","      ) ","    }, ","    action: { .child($0) }","  )",")"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"In this situation you can add a subscript to your state so that you can pass that data into it:"}],"type":"paragraph"},{"type":"codeListing","code":["extension State {","  subscript(settings settings: Settings) -> ChildFeature {","    ChildFeature(","      settings: settings,","      state: self.child","    )","  }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"Then you can use a subscript key path to perform the scoping:"}],"type":"paragraph"},{"code":["ChildView(","  store: store.scope(","    state: \\.[settings: viewStore.settings], ","    action: \\.child","  )",")"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Another common case you may encounter is when dealing with collections. It is common in the"},{"text":" ","type":"text"},{"type":"text","text":"Composable Architecture to use an "},{"type":"codeVoice","code":"IdentifiedArray"},{"type":"text","text":" in your feature’s state and an"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction","type":"reference"},{"type":"text","text":" in your feature’s actions (see "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4#Identified-actions","isActive":true},{"type":"text","text":" for more"},{"text":" ","type":"text"},{"text":"info on ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction","isActive":true,"type":"reference"},{"type":"text","text":"). If you needed to scope your store down to one specific row of the"},{"type":"text","text":" "},{"text":"identified domain, previously you would have done so like this:","type":"text"}]},{"code":["store.scope(","  state: \\.rows[id: id],","  action: { .rows(.element(id: id, action: $0)) }",")"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"With case key paths it can be done simply like this:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["store.scope(","  state: \\.rows[id: id],","  action: \\.rows[id: id]",")"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"These tricks should be enough for you to rewrite all of your store scopes using key paths, but if"},{"type":"text","text":" "},{"text":"you have any problems feel free to open a","type":"text"},{"type":"text","text":" "},{"identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","type":"reference","isActive":true},{"type":"text","text":" on the repo."}]},{"type":"heading","anchor":"Scoping-performance","level":2,"text":"Scoping performance"},{"type":"paragraph","inlineContent":[{"text":"The performance characteristics for store scoping have changed in this release. The primary (and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"intended) way of scoping is along "},{"inlineContent":[{"text":"stored","type":"text"}],"type":"emphasis"},{"text":" properties of child features. A very basic example of this","type":"text"},{"type":"text","text":" "},{"text":"is the following:","type":"text"}]},{"code":["ChildView(","  store: store.scope(state: \\.child, action: \\.child)",")"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"A less common (and less supported) form of scoping is along ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"computed","type":"text"}]},{"type":"text","text":" properties, for example like"},{"type":"text","text":" "},{"type":"text","text":"this:"}]},{"syntax":"swift","code":["extension ParentFeature.State {","  var computedChild: ChildFeature.State {","    ChildFeature.State(","      \/\/ Heavy computation here...","    )","  }","}","","ChildView(","  store: store.scope(state: \\.computedChild, action: \\.child)",")"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"This style of scoping will incur a bit of a performance cost in 1.5 and moving forward. The cost","type":"text"},{"type":"text","text":" "},{"type":"text","text":"is greater the closer your scoping is to the root of your application. Leaf node features will not"},{"text":" ","type":"text"},{"type":"text","text":"incur as much of a cost."}]},{"type":"paragraph","inlineContent":[{"text":"See the dedicated article ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance#Store-scoping","isActive":true},{"type":"text","text":" for more information."}]},{"type":"heading","level":2,"anchor":"Enum-driven-navigation-APIs","text":"Enum-driven navigation APIs"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Prior to version 1.5 of the library, using enum state with navigation view modifiers, such as"},{"type":"text","text":" "},{"code":"sheet","type":"codeVoice"},{"type":"text","text":", "},{"code":"popover","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"navigationDestination"},{"type":"text","text":", etc, was quite verbose. You first needed to supply a"},{"text":" ","type":"text"},{"type":"text","text":"store scoped to the destination domain, and then further provide transformations for isolating the"},{"text":" ","type":"text"},{"text":"case of the state enum to drive the navigation, as well as a transformation for embedding child","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"actions back into the destination domain:"}]},{"type":"codeListing","code":["\/\/ ⚠️ Deprecated API",".sheet(","  store: store.scope(state: \\.$destination, action: { .destination($0) }),","  state: \\.editForm,","  action: { .editForm($0) }",")"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The navigation view modifiers that take "},{"code":"store","type":"codeVoice"},{"text":", ","type":"text"},{"code":"state","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"action"},{"type":"text","text":" arguments are now deprecated,"},{"type":"text","text":" "},{"type":"text","text":"and instead you can do it all with a single "},{"type":"codeVoice","code":"store"},{"text":" argument:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["\/\/ ✅ New API",".sheet(","  store: store.scope(","    state: \\.$destination.editForm, ","    action: \\.destination.editForm","  )",")"]},{"inlineContent":[{"type":"text","text":"All navigation APIs that take 3 arguments for the "},{"code":"store","type":"codeVoice"},{"text":", ","type":"text"},{"type":"codeVoice","code":"state"},{"type":"text","text":" and "},{"type":"codeVoice","code":"action"},{"type":"text","text":" have been"},{"type":"text","text":" "},{"type":"strong","inlineContent":[{"type":"text","text":"soft-deprecated"}]},{"text":" and instead you should make use of the version of the APIs that take a single","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"store"},{"type":"text","text":" argument. This includes:"}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"code":"alert(store:state:action:)","type":"codeVoice"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"confirmationDialog(store:state:action:)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"fullScreenCover(store:state:action:)"}]}]},{"content":[{"inlineContent":[{"code":"navigationDestination(store:state:action)","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"code":"popover(store:state:action:)","type":"codeVoice"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"codeVoice","code":"sheet(store:state:action:)"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","type":"reference"},{"text":".","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/init(_:state:action:then:)","isActive":true}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","isActive":true},{"type":"text","text":"."},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/init(_:state:action:then:else:)","type":"reference","isActive":true}]}]}],"type":"unorderedList"}],"kind":"content"}],"kind":"article","hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides"]]},"metadata":{"role":"article","roleHeading":"Article","title":"Migrating to 1.5","modules":[{"name":"ComposableArchitecture"}]},"schemaVersion":{"major":0,"minor":3,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5"},"abstract":[{"type":"text","text":"Update your code to make use of the new "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255"},{"text":" operation on ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"text":" ","type":"text"},{"type":"text","text":"in order to improve the performance of your features and simplify the usage of navigation APIs."}],"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4"],"generated":true}],"sections":[],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"abstract":[{"text":"A Composable Architecture-friendly wrapper around ","type":"text"},{"type":"codeVoice","code":"ForEach"},{"type":"text","text":" that simplifies working with"},{"type":"text","text":" "},{"type":"text","text":"collections of state."}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"ForEachStore"}],"navigatorTitle":[{"kind":"identifier","text":"ForEachStore"}],"title":"ForEachStore","deprecated":true,"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","url":"\/documentation\/composablearchitecture\/foreachstore","role":"symbol","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.6":{"title":"Migrating to 1.6","type":"topic","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.6","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","abstract":[{"type":"text","text":"Update your code to make use of the new"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x","isActive":true},{"text":" method when you need to","type":"text"},{"text":" ","type":"text"},{"text":"assert on the payload inside an action received.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.10":{"title":"Migrating to 1.10","type":"topic","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.10","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","abstract":[{"type":"text","text":"Update your code to make use of the new state sharing tools in the library, such as the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared"},{"text":" ","type":"text"},{"type":"text","text":"property wrapper, and the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AppStorageKey"},{"type":"text","text":" and "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/FileStorageKey","isActive":true,"type":"reference"},{"text":" persistence strategies.","type":"text"}]},"#Store-scoping-with-key-paths":{"url":"#Store-scoping-with-key-paths","titleInlineContent":[{"text":"Store scoping with key paths","type":"text"}],"identifier":"#Store-scoping-with-key-paths","title":"Store scoping with key paths","type":"link"},"#Scoping-performance":{"url":"#Scoping-performance","titleInlineContent":[{"text":"Scoping performance","type":"text"}],"identifier":"#Scoping-performance","title":"Scoping performance","type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared/withLock(_:)":{"title":"withLock(_:)","url":"\/documentation\/composablearchitecture\/shared\/withlock(_:)","abstract":[{"type":"text","text":"Perform an operation on shared state with isolated access to the underlying value."}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)","kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"withLock","kind":"identifier"},{"text":"<","kind":"text"},{"text":"R","kind":"genericParameter"},{"kind":"text","text":">(("},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"R","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"rethrows","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"R","kind":"typeIdentifier"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.11":{"title":"Migrating to 1.11","url":"\/documentation\/composablearchitecture\/migratingto1.11","abstract":[{"text":"Update your code to use the new ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared\/withLock(_:)","isActive":true,"type":"reference"},{"type":"text","text":" method for mutating shared state from"},{"type":"text","text":" "},{"type":"text","text":"asynchronous contexts, rather than mutating the underlying wrapped value directly."}],"role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","kind":"article","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-9iai9":{"kind":"symbol","url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-9iai9","title":"scope(state:action:)","abstract":[],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-9iai9","role":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"scope","kind":"identifier"},{"kind":"text","text":"<"},{"text":"ChildState","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"ChildAction","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"state"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":", "},{"text":"action","kind":"externalParam"},{"kind":"text","text":": ("},{"text":"ChildAction","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":", "},{"text":"ChildAction","kind":"typeIdentifier"},{"kind":"text","text":">"}],"deprecated":true},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"title":"Reducer()","type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/reducer()","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Reducer"},{"text":"()","kind":"text"}],"abstract":[{"type":"text","text":"Helps implement the conformance to the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer"},{"type":"text","text":" protocol for a type."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationState":{"abstract":[{"text":"A property wrapper for state that can be presented.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"PresentationState"}],"kind":"symbol","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","url":"\/documentation\/composablearchitecture\/presentationstate","title":"PresentationState","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"PresentationState","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"role":"symbol","fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"text":"PresentationAction","kind":"identifier"}],"type":"topic","url":"\/documentation\/composablearchitecture\/presentationaction","title":"PresentationAction","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","navigatorTitle":[{"text":"PresentationAction","kind":"identifier"}],"kind":"symbol","abstract":[{"type":"text","text":"A wrapper type for actions that can be presented."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.7":{"title":"Migrating to 1.7","type":"topic","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.7","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","abstract":[{"type":"text","text":"Update your code to make use of the new observation tools in the library and get rid of legacy"},{"text":" ","type":"text"},{"text":"APIs such as ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"text":", ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","isActive":true,"type":"reference"},{"text":", ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","type":"reference"},{"type":"text","text":", and more."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.8":{"title":"Migrating to 1.8","kind":"article","url":"\/documentation\/composablearchitecture\/migratingto1.8","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","abstract":[{"text":"Update your code to make use of the new capabilities of the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","isActive":true,"type":"reference"},{"type":"text","text":" macro, including automatic"},{"type":"text","text":" "},{"text":"fulfillment of requirements for destination reducers and path reducers.","type":"text"}],"type":"topic","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.15":{"title":"Migrating to 1.15","type":"topic","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.15","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","abstract":[{"text":"The library has been completely updated for Swift 6 language mode, and now compiles in strict","type":"text"},{"type":"text","text":" "},{"text":"concurrency with no warnings or errors.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.12":{"title":"Migrating to 1.12","kind":"article","url":"\/documentation\/composablearchitecture\/migratingto1.12","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","abstract":[{"text":"Take advantage of custom decoding and encoding logic for the shared file storage persistence","type":"text"},{"text":" ","type":"text"},{"text":"strategy, as well as beta support for Swift’s native Testing framework.","type":"text"}],"type":"topic","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Performance#Store-scoping":{"abstract":[],"kind":"section","url":"\/documentation\/composablearchitecture\/performance#Store-scoping","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance#Store-scoping","title":"Store scoping","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/send(_:assert:fileID:file:line:column:)-8877x":{"title":"send(_:assert:fileID:file:line:column:)","type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/send(_:assert:fileid:file:line:column:)-8877x","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8877x","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"text":"CaseKeyPath","preciseIdentifier":"s:9CasePaths0A7KeyPatha","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":">, "},{"text":"assert","kind":"externalParam"},{"kind":"text","text":": (("},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","kind":"typeIdentifier","text":"Void"},{"text":")?, ","kind":"text"},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"file","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"column"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":") ","kind":"text"},{"text":"async","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"TestStoreTask","preciseIdentifier":"s:22ComposableArchitecture13TestStoreTaskV","kind":"typeIdentifier"}],"abstract":[{"type":"text","text":"Sends an action to the store and asserts when state changes."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.4":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4","abstract":[{"text":"Update your code to make use of the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference"},{"type":"text","text":" macro, and learn how to better leverage case key"},{"type":"text","text":" "},{"text":"paths in your features.","type":"text"}],"url":"\/documentation\/composablearchitecture\/migratingto1.4","kind":"article","type":"topic","title":"Migrating to 1.4","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigrationGuides":{"title":"Migration guides","kind":"article","url":"\/documentation\/composablearchitecture\/migrationguides","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides","abstract":[{"type":"text","text":"Learn how to upgrade your application to the newest version of the Composable Architecture."}],"type":"topic","role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"type":"topic","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"text":"s should be executed later by the store, if any.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"url":"\/documentation\/composablearchitecture\/reducer","title":"Reducer","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Reducer","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/AppStorageKey":{"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"AppStorageKey"}],"kind":"symbol","title":"AppStorageKey","abstract":[{"text":"A type defining a user defaults persistence strategy.","type":"text"}],"role":"symbol","navigatorTitle":[{"kind":"identifier","text":"AppStorageKey"}],"url":"\/documentation\/composablearchitecture\/appstoragekey","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/AppStorageKey"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IdentifiedAction":{"url":"\/documentation\/composablearchitecture\/identifiedaction","abstract":[{"type":"text","text":"A wrapper type for actions that can be presented in a list."}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"IdentifiedAction"}],"fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"IdentifiedAction","kind":"identifier"}],"role":"symbol","title":"IdentifiedAction","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IdentifiedAction"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Shared":{"type":"topic","navigatorTitle":[{"text":"Shared","kind":"identifier"}],"kind":"symbol","title":"Shared","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"Shared","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/shared","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Shared","abstract":[{"text":"A property wrapper type that shares a value with multiple parts of an application.","type":"text"}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"navigatorTitle":[{"kind":"identifier","text":"IfLetStore"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IfLetStore"}],"role":"symbol","deprecated":true,"kind":"symbol","title":"IfLetStore","abstract":[{"type":"text","text":"A view that safely unwraps a store of optional state in order to show one of two views."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","type":"topic","url":"\/documentation\/composablearchitecture\/ifletstore"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/dependency(_:)":{"title":"dependency(_:)","kind":"symbol","url":"\/documentation\/composablearchitecture\/reducer\/dependency(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"dependency","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_DependencyKeyWritingReducer"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"abstract":[{"type":"text","text":"Places a value in the reducer’s dependencies."}],"type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"title":"WithViewStore","url":"\/documentation\/composablearchitecture\/withviewstore","navigatorTitle":[{"text":"WithViewStore","kind":"identifier"}],"type":"topic","deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"WithViewStore","kind":"identifier"}],"abstract":[{"type":"text","text":"A view helper that transforms a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"type":"text","text":" into a "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true,"type":"reference"},{"type":"text","text":" so that its state can be observed"},{"text":" ","type":"text"},{"type":"text","text":"by a view builder."}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"url":"\/documentation\/composablearchitecture\/store","title":"Store","navigatorTitle":[{"kind":"identifier","text":"Store"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","kind":"symbol","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.9":{"title":"Migrating to 1.9","kind":"article","url":"\/documentation\/composablearchitecture\/migratingto1.9","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","abstract":[{"text":"Update your code to make use of the new ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-8877x","isActive":true,"type":"reference"},{"type":"text","text":""},{"text":" ","type":"text"},{"type":"text","text":"method on "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","type":"reference"},{"text":" which gives a succinct syntax for sending actions with case key paths, and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","isActive":true},{"text":" method for overriding dependencies.","type":"text"}],"type":"topic","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x":{"title":"receive(_:_:timeout:assert:fileID:file:line:column:)","type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/teststore\/receive(_:_:timeout:assert:fileid:file:line:column:)-9jd7x","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"receive","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"_SendableCaseKeyPath","preciseIdentifier":"s:22ComposableArchitecture20_SendableCaseKeyPatha"},{"kind":"text","text":"<"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"Value","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"externalParam","text":"timeout"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s8DurationV","text":"Duration","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"assert","kind":"externalParam"},{"kind":"text","text":": (("},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":") "},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"text":")?, ","kind":"text"},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV","text":"StaticString"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"}],"abstract":[{"text":"Asserts an action was received matching a case path with a specific payload, and asserts how","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the state changes."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-90255":{"title":"scope(state:action:)","type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-90255","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"scope","kind":"identifier"},{"kind":"text","text":"<"},{"text":"ChildState","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"ChildAction"},{"text":">(","kind":"text"},{"text":"state","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC","text":"KeyPath"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"text":">, ","kind":"text"},{"text":"action","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ChildAction"},{"text":">) -> ","kind":"text"},{"text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"kind":"text","text":", "},{"text":"ChildAction","kind":"typeIdentifier"},{"kind":"text","text":">"}],"abstract":[{"text":"Scopes the store to one that exposes child state and actions.","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.4#Identified-actions":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4#Identified-actions","title":"Identified actions","url":"\/documentation\/composablearchitecture\/migratingto1.4#Identified-actions","abstract":[],"kind":"section","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.13":{"title":"Migrating to 1.13","url":"\/documentation\/composablearchitecture\/migratingto1.13","abstract":[{"text":"The Composable Architecture now provides first class tools for building features in UIKit,","type":"text"},{"type":"text","text":" "},{"text":"including minimal state observation, presentation and stack navigation.","type":"text"}],"role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","kind":"article","type":"topic"},"http://github.com/pointfreeco/swift-composable-architecture/discussions":{"url":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","titleInlineContent":[{"text":"discussion","type":"text"}],"identifier":"http:\/\/github.com\/pointfreeco\/swift-composable-architecture\/discussions","title":"discussion","type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/FileStorageKey":{"title":"FileStorageKey","navigatorTitle":[{"kind":"identifier","text":"FileStorageKey"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/FileStorageKey","url":"\/documentation\/composablearchitecture\/filestoragekey","kind":"symbol","abstract":[{"type":"text","text":"A type defining a file persistence strategy"}],"role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"FileStorageKey"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore/init(_:state:action:then:else:)":{"abstract":[{"text":"Initializes an ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","type":"reference","isActive":true},{"type":"text","text":" view that computes content depending on if a store of"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","type":"reference","isActive":true},{"type":"text","text":" and "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","type":"reference"},{"type":"text","text":" is "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" or non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" and state can further"},{"text":" ","type":"text"},{"type":"text","text":"be extracted from the destination state, "},{"inlineContent":[{"text":"e.g.","type":"text"}],"type":"emphasis"},{"type":"text","text":" it matches a particular case of an enum."}],"role":"symbol","url":"\/documentation\/composablearchitecture\/ifletstore\/init(_:state:action:then:else:)","title":"init(_:state:action:then:else:)","kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"DestinationState"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"DestinationAction"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"IfContent"},{"kind":"text","text":", "},{"text":"ElseContent","kind":"genericParameter"},{"kind":"text","text":">("},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC","kind":"typeIdentifier","text":"Store"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture17PresentationStateV","text":"PresentationState"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DestinationState"},{"text":">, ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO","text":"PresentationAction"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"DestinationAction"},{"kind":"text","text":">>, "},{"text":"state","kind":"externalParam"},{"kind":"text","text":": ("},{"text":"DestinationState","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"State","kind":"typeIdentifier"},{"text":"?, ","kind":"text"},{"kind":"externalParam","text":"action"},{"text":": (","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"DestinationAction"},{"text":", ","kind":"text"},{"text":"then","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"text":">) -> ","kind":"text"},{"text":"IfContent","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"else"},{"text":": () -> ","kind":"text"},{"text":"ElseContent","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/init(_:state:action:then:else:)","type":"topic","deprecated":true},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore/init(_:state:action:then:)":{"abstract":[{"text":"Initializes an ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","isActive":true},{"text":" view that computes content depending on if a store of","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","type":"reference"},{"type":"text","text":" and "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction"},{"text":" is ","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" or non-"},{"type":"codeVoice","code":"nil"},{"text":" and state can further","type":"text"},{"type":"text","text":" "},{"type":"text","text":"be extracted from the destination state, "},{"inlineContent":[{"type":"text","text":"e.g."}],"type":"emphasis"},{"text":" it matches a particular case of an enum.","type":"text"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/ifletstore\/init(_:state:action:then:)","title":"init(_:state:action:then:)","kind":"symbol","fragments":[{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"text":"DestinationState","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"DestinationAction"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"IfContent"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture17PresentationStateV","text":"PresentationState"},{"kind":"text","text":"<"},{"text":"DestinationState","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO","text":"PresentationAction","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"DestinationAction"},{"text":">>, ","kind":"text"},{"text":"state","kind":"externalParam"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"DestinationState"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"text":"?, ","kind":"text"},{"text":"action","kind":"externalParam"},{"kind":"text","text":": ("},{"text":"Action","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"DestinationAction","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"then","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"text":", ","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"text":"IfContent","kind":"typeIdentifier"},{"text":")","kind":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore\/init(_:state:action:then:)","type":"topic","deprecated":true},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"title":"TestStore","url":"\/documentation\/composablearchitecture\/teststore","abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"TestStore"}],"navigatorTitle":[{"kind":"identifier","text":"TestStore"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.14":{"type":"topic","abstract":[{"text":"The ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true,"type":"reference"},{"text":" type is now officially ","type":"text"},{"type":"codeVoice","code":"@MainActor"},{"type":"text","text":" isolated."}],"kind":"article","role":"article","title":"Migrating to 1.14","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","url":"\/documentation\/composablearchitecture\/migratingto1.14"},"#Enum-driven-navigation-APIs":{"url":"#Enum-driven-navigation-APIs","titleInlineContent":[{"text":"Enum-driven navigation APIs","type":"text"}],"identifier":"#Enum-driven-navigation-APIs","title":"Enum-driven navigation APIs","type":"link"}}}