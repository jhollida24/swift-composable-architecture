{"metadata":{"role":"article","modules":[{"name":"ComposableArchitecture"}],"roleHeading":"Article","title":"Observation backport"},"abstract":[{"type":"text","text":"Learn how the Observation framework from Swift 5.9 was backported to support iOS 16 and earlier,"},{"text":" ","type":"text"},{"text":"as well as the caveats of using the backported tools.","type":"text"}],"primaryContentSections":[{"content":[{"level":2,"text":"Overview","type":"heading","anchor":"Overview"},{"inlineContent":[{"text":"With version 1.7 of the Composable Architecture we have introduced support for Swift 5.9‚Äôs","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"observation tools, "},{"inlineContent":[{"text":"and","type":"text"}],"type":"emphasis"},{"type":"text","text":" we have backported those tools to work in iOS 13 and later. Using the"},{"type":"text","text":" "},{"text":"observation tools in pre-iOS 17 does require a few additional steps and there are some gotchas to be","type":"text"},{"type":"text","text":" "},{"text":"aware of.","type":"text"}],"type":"paragraph"},{"type":"heading","anchor":"The-Perception-framework","text":"The Perception framework","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Composable Architecture comes with a framework known as Perception, which is our backport of"},{"text":" ","type":"text"},{"type":"text","text":"Swift 5.9‚Äôs Observation to iOS 13, macOS 12, tvOS 13 and watchOS 6. For all of the tools in the"},{"type":"text","text":" "},{"type":"text","text":"Observation framework there is a corresponding tool in Perception."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, instead of the "},{"code":"@Observable","type":"codeVoice"},{"type":"text","text":" macro, there is the "},{"type":"codeVoice","code":"@Perceptible"},{"type":"text","text":" macro:"}]},{"type":"codeListing","syntax":"swift","code":["@Perceptible","class CounterModel {","  var count = 0","}"]},{"inlineContent":[{"text":"However, in order for a view to properly observe changes to a ‚Äúperceptible‚Äù model, you must","type":"text"},{"type":"text","text":" "},{"type":"text","text":"remember to wrap the contents of your view in the "},{"type":"codeVoice","code":"WithPerceptionTracking"},{"text":" view:","type":"text"}],"type":"paragraph"},{"code":["struct CounterView: View {","  let model = CounterModel()","","  var body: some View {","    WithPerceptionTracking {","      Form {","        Text(self.model.count.description)","        Button(\"Decrement\") { self.model.count -= 1 }","        Button(\"Increment\") { self.model.count += 1 }","      }","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This will make sure that the view subscribes to any fields accessed in the "},{"type":"codeVoice","code":"@Perceptible"},{"type":"text","text":" model so"},{"text":" ","type":"text"},{"type":"text","text":"that changes to those fields invalidate the view and cause it to re-render."}]},{"inlineContent":[{"type":"text","text":"If a field of a "},{"type":"codeVoice","code":"@Percetible"},{"type":"text","text":" model is accessed in a view while "},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" inside"},{"text":" ","type":"text"},{"type":"codeVoice","code":"WithPerceptionTracking"},{"text":", then a runtime warning will be triggered:","type":"text"}],"type":"paragraph"},{"name":"üü£ Runtime Warning","type":"aside","style":"note","content":[{"inlineContent":[{"type":"text","text":"Perceptible state was accessed but is not being tracked. Track changes to"},{"text":" ","type":"text"},{"text":"state by wrapping your view in a ‚ÄòWithPerceptionTracking‚Äô view.","type":"text"}],"type":"paragraph"}]},{"inlineContent":[{"type":"text","text":"To debug this, expand the warning in the Issue Navigator of Xcode (‚åò5), and click through the stack"},{"text":" ","type":"text"},{"text":"frames displayed to find the line in your view where you are accessing state without being inside","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"WithPerceptionTracking"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"heading","anchor":"Bindings","level":2,"text":"Bindings"},{"inlineContent":[{"text":"If you want to derive bindings from the store (see ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings"},{"type":"text","text":" for more information), then you"},{"text":" ","type":"text"},{"type":"text","text":"would typically use the "},{"type":"codeVoice","code":"@Bindable"},{"text":" property wrapper that comes with SwiftUI:","type":"text"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct MyView: View {","  @Bindable var store: StoreOf<MyFeature>","  \/\/ ...","}"]},{"inlineContent":[{"type":"text","text":"However, "},{"type":"codeVoice","code":"@Bindable"},{"type":"text","text":" is iOS 17+. So, the Perception library comes with a tool that can be used in"},{"text":" ","type":"text"},{"type":"text","text":"its place until you can target iOS 17 and later. You just have to qualify "},{"type":"codeVoice","code":"@Bindable"},{"text":" with the","type":"text"},{"type":"text","text":" "},{"code":"Perception","type":"codeVoice"},{"type":"text","text":" namespace:"}],"type":"paragraph"},{"type":"codeListing","code":["struct MyView: View {","  @Perception.Bindable var store: StoreOf<MyFeature>","  \/\/ ...","}"],"syntax":"swift"},{"type":"heading","text":"Gotchas","level":2,"anchor":"Gotchas"},{"inlineContent":[{"type":"text","text":"There are a few gotchas to be aware of when using "},{"type":"codeVoice","code":"WithPerceptionTracking"},{"type":"text","text":"."}],"type":"paragraph"},{"type":"heading","anchor":"Lazy-view-closures","level":3,"text":"Lazy view closures"},{"inlineContent":[{"type":"text","text":"There are many ‚Äúlazy‚Äù closures in SwiftUI that evaluate only when something happens in the view, and"},{"text":" ","type":"text"},{"type":"text","text":"not necessarily in the same stack frames as the "},{"code":"body","type":"codeVoice"},{"text":" of the view. For example, the trailing","type":"text"},{"type":"text","text":" "},{"type":"text","text":"closure of "},{"type":"codeVoice","code":"ForEach"},{"text":" is called ","type":"text"},{"inlineContent":[{"type":"text","text":"after"}],"type":"emphasis"},{"type":"text","text":" the "},{"code":"body","type":"codeVoice"},{"text":" of the view has been computed.","type":"text"}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This means that even if you wrap the body of the view in "},{"type":"codeVoice","code":"WithPerceptionTracking"},{"type":"text","text":":"}],"type":"paragraph"},{"code":["WithPerceptionTracking {","  ForEach(store.scope(state: \\.rows, action: \\.rows), id: \\.state.id) { store in","    Text(store.title)","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"‚Ä¶the access to the row‚Äôs "},{"code":"store.title","type":"codeVoice"},{"type":"text","text":" happens "},{"inlineContent":[{"text":"outside","type":"text"}],"type":"emphasis"},{"type":"text","text":" "},{"code":"WithPerceptionTracking","type":"codeVoice"},{"type":"text","text":", and hence will"},{"text":" ","type":"text"},{"type":"text","text":"not work and will trigger a runtime warning as described above."}],"type":"paragraph"},{"inlineContent":[{"text":"The fix for this is to wrap the content of the trailing closure in another ","type":"text"},{"type":"codeVoice","code":"WithPerceptionTracking"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["WithPerceptionTracking {","  ForEach(store.scope(state: \\.rows, action: \\.rows), id: \\.state.id) { store in","    WithPerceptionTracking {","      Text(store.title)","    }","  }","}"]},{"text":"Mixing legacy and modern features together","anchor":"Mixing-legacy-and-modern-features-together","level":3,"type":"heading"},{"inlineContent":[{"type":"text","text":"Some problems can arise when mixing together features built in the ‚Äúlegacy‚Äù style, using"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true,"type":"reference"},{"text":" and ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","type":"reference"},{"text":", and features built in the ‚Äúmodern‚Äù style, using the","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","isActive":true,"type":"reference"},{"text":" macro. The problems mostly manifest themselves as re-computing view bodies","type":"text"},{"type":"text","text":" "},{"type":"text","text":"more often than necessary, but that can also put strain on SwiftUI‚Äôs ability to figure out what"},{"type":"text","text":" "},{"type":"text","text":"state changed, and can cause glitches or exacerbate navigation bugs."}],"type":"paragraph"},{"inlineContent":[{"text":"See ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7#Incrementally-migrating","type":"reference","isActive":true},{"text":" for more information about this.","type":"text"}],"type":"paragraph"}],"kind":"content"}],"seeAlsoSections":[{"title":"Integrations","anchor":"Integrations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"],"generated":true}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/observationbackport"]}],"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport"},"sections":[],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"schemaVersion":{"minor":3,"patch":0,"major":0},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"abstract":[{"type":"text","text":"Integrating the Composable Architecture into a SwiftUI application."}],"type":"topic","title":"SwiftUI Integration","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/swiftuiintegration","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservableState()":{"title":"ObservableState()","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","type":"topic","abstract":[{"text":"Defines and implements conformance of the Observable protocol.","type":"text"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/observablestate()","role":"symbol","fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ObservableState"},{"text":"()","kind":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIKit":{"abstract":[{"type":"text","text":"Integrating the Composable Architecture into a UIKit application."}],"kind":"article","url":"\/documentation\/composablearchitecture\/uikit","type":"topic","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit","title":"UIKit Integration"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.7#Incrementally-migrating":{"abstract":[],"kind":"section","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7#Incrementally-migrating","url":"\/documentation\/composablearchitecture\/migratingto1.7#Incrementally-migrating","title":"Incrementally migrating"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"abstract":[{"type":"text","text":"A "},{"code":"ViewStore","type":"codeVoice"},{"type":"text","text":" is an object that can observe state changes and send actions. They are most"},{"type":"text","text":" "},{"type":"text","text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used"},{"text":" ","type":"text"},{"text":"anywhere it makes sense to observe state or send actions.","type":"text"}],"type":"topic","title":"ViewStore","role":"symbol","url":"\/documentation\/composablearchitecture\/viewstore","navigatorTitle":[{"kind":"identifier","text":"ViewStore"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"ViewStore","kind":"identifier"}],"kind":"symbol","deprecated":true},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Bindings":{"url":"\/documentation\/composablearchitecture\/bindings","kind":"article","type":"topic","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings","title":"Working with SwiftUI bindings","abstract":[{"type":"text","text":"Learn how to connect features written in the Composable Architecture to SwiftUI bindings."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"title":"WithViewStore","url":"\/documentation\/composablearchitecture\/withviewstore","navigatorTitle":[{"text":"WithViewStore","kind":"identifier"}],"type":"topic","deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"WithViewStore","kind":"identifier"}],"abstract":[{"type":"text","text":"A view helper that transforms a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"type":"text","text":" into a "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true,"type":"reference"},{"type":"text","text":" so that its state can be observed"},{"text":" ","type":"text"},{"type":"text","text":"by a view builder."}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"url":"\/documentation\/composablearchitecture\/store","title":"Store","navigatorTitle":[{"kind":"identifier","text":"Store"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}],"abstract":[{"type":"text","text":"A store represents the runtime that powers the application. It is the object that you will pass"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","kind":"symbol","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftConcurrency":{"title":"Adopting Swift concurrency","abstract":[{"type":"text","text":"Learn how to write safe, concurrent effects using Swift‚Äôs structured concurrency."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","type":"topic","role":"article","url":"\/documentation\/composablearchitecture\/swiftconcurrency","kind":"article"}}}