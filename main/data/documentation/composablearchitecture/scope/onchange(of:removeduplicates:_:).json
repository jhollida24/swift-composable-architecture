{"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"onChange"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"V"},{"kind":"text","text":", "},{"text":"R","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"of"},{"text":" ","kind":"text"},{"text":"toValue","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"kind":"text","text":" ("},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","text":"State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"V"},{"kind":"text","text":", "},{"text":"removeDuplicates","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"isDuplicate"},{"text":": ","kind":"text"},{"text":"@escaping","kind":"keyword"},{"text":" (","kind":"text"},{"kind":"typeIdentifier","text":"V"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"V"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Sb","text":"Bool"},{"kind":"text","text":", "},{"kind":"attribute","text":"@"},{"text":"ReducerBuilder","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerBuilder","kind":"attribute","preciseIdentifier":"s:22ComposableArchitecture14ReducerBuilderO"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"State","kind":"typeIdentifier","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","text":"Action","kind":"typeIdentifier","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action"},{"kind":"text","text":">"},{"kind":"text","text":" "},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"reducer","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"keyword","text":"@escaping"},{"kind":"text","text":" ("},{"text":"V","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"V"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"R"},{"text":") -> ","kind":"text"},{"text":"_OnChangeReducer","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"V","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"R"},{"text":"> ","kind":"text"},{"kind":"keyword","text":"where"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":" : "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","text":"Reducer","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP"},{"kind":"text","text":", "},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","text":"Action","kind":"typeIdentifier","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action"},{"kind":"text","text":" == "},{"text":"R","kind":"typeIdentifier"},{"text":".","kind":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action","text":"Action","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":"."},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","kind":"typeIdentifier","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","text":"State"},{"kind":"text","text":" == "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":"."},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","kind":"typeIdentifier","text":"State"}],"platforms":["macOS"],"languages":["swift"]}]},{"parameters":[{"name":"toValue","content":[{"inlineContent":[{"type":"text","text":"A closure that returns a value from the given state."}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure to evaluate whether two elements are equivalent, for purposes of"},{"type":"text","text":" "},{"text":"filtering. Return ","type":"text"},{"type":"codeVoice","code":"true"},{"text":" from this closure to indicate that the second element is a","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"duplicate of the first."}]}],"name":"isDuplicate"},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A reducer builder closure to run when the value changes."}]}],"name":"reducer"}],"kind":"parameters"},{"content":[{"anchor":"return-value","type":"heading","text":"Return Value","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"A reducer that performs the logic when the state changes."}]}],"kind":"content"},{"content":[{"level":2,"anchor":"discussion","type":"heading","text":"Discussion"},{"type":"paragraph","inlineContent":[{"text":"Use this operator to trigger additional logic when a value changes, like when a","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","type":"reference","isActive":true},{"type":"text","text":" makes a deeper change to a struct held in "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState","isActive":true},{"type":"text","text":"."}]},{"syntax":"swift","code":["@Reducer","struct Settings {","  struct State {","    @BindingState var userSettings: UserSettings","    \/\/ ...","  }","","  enum Action: BindableAction {","    case binding(BindingAction<State>)","    \/\/ ...","  }","","  var body: some Reducer<State, Action> {","    BindingReducer()","      .onChange(","        of: { ($0.userSettings.isHapticFeedbackEnabled, $0.userSettings.isPushEnabled) },","        removeDuplicates: ==","      ) { oldValue, newValue in","        Reduce { state, action in","          .run { send in","            \/\/ Persist new value...","          }","        }","      }","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"When the value changes, the new version of the closure will be called, so any captured values","type":"text"},{"type":"text","text":" "},{"text":"will have their values from the time that the observed value has its new value. The system","type":"text"},{"text":" ","type":"text"},{"text":"passes the old and new observed values into the closure.","type":"text"}]},{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"text":"Take care when applying ","type":"text"},{"code":"onChange(of:)","type":"codeVoice"},{"text":" to a reducer, as it adds an equatable check","type":"text"},{"type":"text","text":" "},{"text":"for every action fed into it. Prefer applying it to leaf nodes, like ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","type":"reference"},{"type":"text","text":","},{"text":" ","type":"text"},{"type":"text","text":"against values that are quick to equate."}]}],"style":"note","type":"aside"}],"kind":"content"}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope\/onChange(of:removeDuplicates:_:)","interfaceLanguage":"swift"},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope\/Reducer-Implementations"]]},"abstract":[{"type":"text","text":"Adds a reducer to run when this reducer changes the given value in state."}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/scope\/onchange(of:removeduplicates:_:)"]}],"deprecationSummary":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use 'onChange(of:)' with and equatable value, instead."}]}],"schemaVersion":{"patch":0,"minor":3,"major":0},"metadata":{"extendedModule":"ComposableArchitecture","role":"symbol","externalID":"s:22ComposableArchitecture7ReducerPAAE8onChange2of16removeDuplicates_AA03_OneC0Vyxqd__qd_0_Gqd__5StateQzc_Sbqd___qd__tcqd_0_qd___qd__tctAaBRd_0_6ActionQyd_0_ALRtzAJQyd_0_AKRSr0_lF::SYNTHESIZED::s:22ComposableArchitecture5ScopeV","symbolKind":"method","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"onChange","kind":"identifier"},{"text":"<","kind":"text"},{"text":"V","kind":"genericParameter"},{"kind":"text","text":", "},{"kind":"genericParameter","text":"R"},{"kind":"text","text":">("},{"kind":"externalParam","text":"of"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"text":"State","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"V"},{"kind":"text","text":", "},{"text":"removeDuplicates","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"V"},{"text":", ","kind":"text"},{"text":"V","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Bool","kind":"typeIdentifier","preciseIdentifier":"s:Sb"},{"text":", (","kind":"text"},{"text":"V","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"V","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_OnChangeReducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":", ","kind":"text"},{"text":"V","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":">"}],"roleHeading":"Instance Method","title":"onChange(of:removeDuplicates:_:)","modules":[{"name":"ComposableArchitecture"}],"platforms":[]},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/State":{"title":"State","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","type":"topic","abstract":[{"text":"A type that holds the current state of the reducer.","type":"text"}],"url":"\/documentation\/composablearchitecture\/reducer\/state","kind":"symbol","role":"symbol","required":true,"fragments":[{"kind":"keyword","text":"associatedtype"},{"text":" ","kind":"text"},{"kind":"identifier","text":"State"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Scope/onChange(of:removeDuplicates:_:)":{"fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"onChange","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"V"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"R"},{"text":">(","kind":"text"},{"text":"of","kind":"externalParam"},{"kind":"text","text":": ("},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"State","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"V","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"removeDuplicates","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"V","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"V"},{"kind":"text","text":") -> "},{"preciseIdentifier":"s:Sb","text":"Bool","kind":"typeIdentifier"},{"text":", (","kind":"text"},{"text":"V","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"V"},{"text":") -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"_OnChangeReducer"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"V","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":">"}],"abstract":[{"text":"Adds a reducer to run when this reducer changes the given value in state.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope\/onChange(of:removeDuplicates:_:)","deprecated":true,"kind":"symbol","url":"\/documentation\/composablearchitecture\/scope\/onchange(of:removeduplicates:_:)","role":"symbol","type":"topic","title":"onChange(of:removeDuplicates:_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"title":"Effect","navigatorTitle":[{"kind":"identifier","text":"Effect"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","abstract":[],"kind":"symbol","url":"\/documentation\/composablearchitecture\/effect","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Effect"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"type":"topic","abstract":[{"type":"text","text":"A protocol that describes how to evolve the current state of an application to the next state,"},{"type":"text","text":" "},{"type":"text","text":"given an action, and describes what "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"text":"s should be executed later by the store, if any.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"url":"\/documentation\/composablearchitecture\/reducer","title":"Reducer","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","kind":"symbol","role":"symbol","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"text":"Reducer","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"title":"ComposableArchitecture","kind":"symbol","abstract":[{"text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent","type":"text"},{"type":"text","text":" "},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"type":"text","text":" "},{"text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS).","type":"text"}],"role":"collection","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","url":"\/documentation\/composablearchitecture","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/Action":{"kind":"symbol","title":"Action","url":"\/documentation\/composablearchitecture\/reducer\/action","required":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/Action","type":"topic","role":"symbol","fragments":[{"kind":"keyword","text":"associatedtype"},{"kind":"text","text":" "},{"text":"Action","kind":"identifier"}],"abstract":[{"type":"text","text":"A type that holds all possible actions that cause the "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/State","type":"reference"},{"type":"text","text":" of the reducer to change"},{"type":"text","text":" "},{"type":"text","text":"and\/or kick off a side "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect"},{"type":"text","text":" that can communicate with the outside world."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Scope/Reducer-Implementations":{"url":"\/documentation\/composablearchitecture\/scope\/reducer-implementations","abstract":[],"title":"Reducer Implementations","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope\/Reducer-Implementations","type":"topic","role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState":{"deprecated":true,"abstract":[{"type":"text","text":"A property wrapper type that can designate properties of app state that can be directly bindable"},{"type":"text","text":" "},{"text":"in SwiftUI views.","type":"text"}],"url":"\/documentation\/composablearchitecture\/bindingstate","kind":"symbol","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState","title":"BindingState","navigatorTitle":[{"text":"BindingState","kind":"identifier"}],"role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"BindingState","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingReducer":{"navigatorTitle":[{"kind":"identifier","text":"BindingReducer"}],"type":"topic","abstract":[{"type":"text","text":"A reducer that updates bindable state when it receives binding actions."}],"role":"symbol","title":"BindingReducer","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","kind":"symbol","url":"\/documentation\/composablearchitecture\/bindingreducer","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BindingReducer"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ReducerBuilder":{"fragments":[{"kind":"keyword","text":"enum"},{"text":" ","kind":"text"},{"text":"ReducerBuilder","kind":"identifier"}],"role":"symbol","title":"ReducerBuilder","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ReducerBuilder","url":"\/documentation\/composablearchitecture\/reducerbuilder","abstract":[{"type":"text","text":"A result builder for combining reducers into a single reducer by running each, one after the"},{"type":"text","text":" "},{"text":"other, and merging their effects.","type":"text"}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"ReducerBuilder"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Scope":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Scope"}],"role":"symbol","title":"Scope","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Scope","url":"\/documentation\/composablearchitecture\/scope","abstract":[{"type":"text","text":"Embeds a child reducer in a parent domain."}],"kind":"symbol","navigatorTitle":[{"kind":"identifier","text":"Scope"}]}}}